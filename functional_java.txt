# Functional Programming

[[{java_lang.101,java_lang.functional.lambdas,architecture.async.reactive]]
## `TLDR` Examples:
  ```
  | int counter = 1;
  | val stream01 =      List.of(1,2,3,4,5,6,7,9,10).stream();  // <·· Init from List
  | val stream02 = IntStream.of(1,2,3,4,5,6,7,9,10);           // <·· Init from int[]
  | val stream03 = Stream.generate(() -> counter++).limit(10); // <·· stream02 == stream03
  | val Stream<Integer> stream04 =
  |                      Stream.iterate(10, n -> n).limit(10); // <·· stream generated "on demand"
  |
  | intStream1_10
  |    .skip(2)                                 // <·· discard first 2 elements
  |    .limit(3)                                // <·· returns stream no longer than 3 elements.
  | //  └──────┴─ skip + limit == "paginate".
  |    .filter( i -> i % 2 == 0 )               // <·· filter out if result is not true
  | //          └─────────────┴─················ Java 8+ lambda function ¹
  |    .distinct()                              // <·· Remove duplicated. (a "hash strategy can be used")
  |    .map(i -> i*i)                           // <·· map to new elements.
  |    ...
  |    .findFirst()                             // <·· Alt 1) Complete stream to single element
  |    .peek ( e -> System.out.println(e))      // <·· Debug streams without changes [[{troubleshooting.stream}]]
  |    .orElse(arr.length);
  | 
  | // "Complete" stream 
  |    .toArray();                              // <·· Alt 2) Complete stream to array 
  |    .count();                                // <·· Alt 3) Complete stream to element number
  |    .collect(Collectors.groupingBy(func));   // <·· Alt 4) Complete stream to Map grouping by func
  |    .collect(Collectors.toList());           // <·· Alt 5) Complete stream to List
  |    .collect(Collectors.toCollection(TreeSet::new))  // 6) Complete stream to TreeSet
  | 
  | Stream.concat( stream1, stream2 ).filter(...) // concat streams
  | 
  | Stream<Integer> stream = intStream1_10.boxed();  // <·· box primitive in Integer 
  |                                                         needed to collect to list for example.
  | ¹ Lambda syntax -----------------------------
  |   (parameters) -> expression
  |   (parameters) -> { statements; }
  | 
  |   Function<Long, String> f = (l) -> l.toString();    // <·· takes a Long , returns a String
  |   Supplier<Thread> s = Thread::currentThread;        // <·· takes nothing, returns a Thread
  |   Consumer<String> c = System.out::println;          // <·· takes a string as the parameter
  ```
<!-- } -->

[[{java_lang.functional.jOOλ,java_lang.functional.101,troubleshooting.stream,troubleshooting.checked_exceptions,PM.TODO]]
## jOOλ functional extensions to Java 8

* [jOOλ](https://github.com/jOOQ/jOOL)

- **Problem Context**: "Pains with checked exceptions and lambdas"  [[java_lang.101]]
  - <http://stackoverflow.com/q/18198176/521799>
  - <http://stackoverflow.com/q/19757300/521799>
  - <http://stackoverflow.com/q/14039995/521799>                    [[java_lang.101}]]
- **Solution**: `org.jooq.lambda.Unchecked`

  ```
  | STANDARD JAVA 8
  | Arrays
  | .stream(dir.listFiles())
  | .forEach(file -> {
  |       try {
  |   System.out.println(
  |        file.getCanonicalPath());
  |       } catch (IOException e) {
  |   throw new RuntimeException(e);
  |       }
  | });
  ```
* using jooq labmda wrapper

  ```
  | using jooq labmda wrapper:
  | ==========================
  | Arrays
  | .stream(dir.listFiles())
  | .forEach(
  |   Unchecked.consumer(file -> {
  |     System.out.println(
  |       file.getCanonicalPath());
  |   })
  | );
  ```
* Even simpler
  ```
  | Arrays
  | .stream(dir.listFiles())
  | .map(Unchecked.function(
  |      File::getCanonicalPath))
  | .forEach(System.out::println);
  ```
[[java_lang.functional.jOOλ}]]

[[java_lang.functional.lambdas}]]

## Streams and Optional are Monads [[{java_lang.functional.101]]
<https://dzone.com/articles/what-is-a-monad-basic-theory-for-a-java-developer?edition=672394>
* two of the most commonly known Java 8 features are monad
  implementations, namely Stream and Optional.
* Monad is a concept:  we can view it as a wrapper which puts our
  value in some context and allows us to perform operations on the
  value. In this context, the output of an operation at any step is the
  input to the operation at the next step.
[[java_lang.functional.101}]]

## Unix4j [[{java_lang.101,PM.low_code.unix4j,java_lang.functional]]
* [Link@Github](https://github.com/tools4j/unix4j)
* High level functional programming "the Unix way".

> ...Working in the finance industry in Melbourne, the authors of
> Unix4j spent a lot of time writing complex text processing
> applications in bash. Frustrated with the inherent limitations of the
> bash language; lack of language support, IDEs, test frameworks etc,
> the authors decided to try and bring the convenience of some of the
> Unix commands into the Java language.
> You may notice that the implemented commands are more bent towards
> text processing rather than OS and file manipulation. This is
> intended as we see text processing to be the real benefit of Unix4j.
> Not to say that this will always be the case.

* Example Ussage:
  ```
  | Unix4j.cat("test.txt").grep("Tuesday").sed("s/kilogram/kg/g").sort();
  ```
[[PM.low_code.unix4j}]]

# Functional Programming TODO

## Java Flow
* <https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/Flow.html>
[[{architecture.async.reactive.101,java_lang.flow_api,java_lang.101,PM.TODO]]
* <https://www.infoq.com/presentations/java9-flow-stream-api/?utm_source=oficina24x7.com>
  Trisha Gee shows via live coding how we can use the new Flow API to
  utilize Reactive Programming, how the improvements to the Streams API
  make it easier to control real-time streaming data and how the
  Collections convenience methods simplify code. She talks about other
  Java 9 features, including some of the additions to interfaces and
  changes to deprecation.
[[}]]



