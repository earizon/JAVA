[[{DEVOPS.MAVEN]]
# Maven Summary [[{DevOps.maven.101,devops.101,qa.*,devops,DevOps.maven.troubleshooting,_PM.WiP]]

* External Links
  * PUBLIC REPOSITORY:      @[https://mvnrepository.com/]
  * Artifact Search Engine: @[http://search.maven.org/]
  * Online doc from Maven : @[https://www.mvndoc.com]
    Ex: Show Bouncy Castle doc by:
    * full index   : @[https://www.mvndoc.com/c/org.bouncycastle/bcpg-jdk15/index-all.html]
    * by package   : @[https://www.mvndoc.com/c/org.bouncycastle/bcpg-jdk15/index.html]

# maven lifecycle : execute a set of goals IN ORDER:
  ```
  mvn   package   ┌ resources:resources     ←··· goal: unit of work. plugins implementing differet goals
        └──┬──┘   │ compiler:compile             accept parametrization customizing its run-time behavior:
           └──────┤ resources:testResources
                  │ compiler:testCompile
                  └ surefire:test jar:jar
  ```

## mvn Usssage :
 All mvn commands take the pom.xml project definition as input.
First time mvn is executed will be slow, since lot of libraries must be downloaded.

  ```
  $ QS=maven-archetype-quickstart \
  $ mvn archetype:generate           ← create new project skeleton:
      -DgroupId=my.groupId \           ./pom.xml
      -DartifactId=myArtifact \        ./src/test/java/my.groupId/AppTest.java
      -DarchetypeVersion=1.4           ./src/main/java/my.groupId/App.java
      -DinteractiveMode=false          ./src/main/resouces/ (./META-INF/MANIFEST.MF, ./images/, ... )
      -DarchetypeArtifactId=$QS        ./src/test/resources/test.properties ← ex: InputStream is = getClass()
                                       └──────┬───────┘                           .getResourceAsStream("/test.properties";
                                     To add another non-standard (old code/tool-generated/...)
                                     directories add next lines to pom.xml:
                                     <build>
                                       ...
                                    +  <sourceDirectory>src/main/generated_java</sourceDirectory>
                                    +  <testDirectory>src/functionalTest/java</testDirectory>
                                     </build>

                                       EXECUTING LIFECYCLES (ordered lists of goals)
  $ mvn clean                        ← Remove ./target folder
  $ mvn compile                      ← ... → compile app and tests code
  $ mvn test-compile                 ← ... → compile tests only.
  $ mvn test                         ← ... → test (the surefire plugin executing test will search for
                                             **/(*Test|Test*|*TestCase).java inside ./src/main/test/*

  $ mvn  -Dexec.args="arg0 ..."  \   ← Execute Java program with the help of maven.
     exec:java \                       mvn will take care of setting complex class path properly
    -Dexec.mainClass=com.foo.Main      (discouraged in production).

  $ mvn clean package                ← clean→resources→compile→test→package ( generates JAR/WAR/... package)
                                       In detail:
                                       1) resources:resources       4) compiler:testCompile
                                       2) compiler:compile          5) surefire:test jar:jar
                                       3) resources:testResources

  $ mvn clean install                ← clean→compile→test→package→install_local
                                       (Use -Dmaven.test.skip=true to skip (slow) testing )

  $ mvn clean deploy                 ← clean→compile→test→package→install_local→install_pub
                                                                                ("corporate") server
  $ mvn                              ← Default to next goals: (  WARN: no clean)
  └────────┬────────────┘              1) process-resources  4) process-test-resources 7) prepare-package
           ·                           2) compile            5) test-compile           8) package
           ·                           3) process-classes    6) test                   9) install
           ·
   mvn common Common options include :
  -U                   Force library (download) update. Fix problems with           [DevOps.maven.troubleshooting]
                       unstable networks, unstable package releases.
  -P myProfileX        Execute profile myProfileX defined in pom.xml
  -o                   offline mode. Search deps in local repo.
  -Dgenerate.pom=true  Generates the pom locally for an artefact when installing
                       and compiling. Very useful to make offilne mode work properly.
  help:active-profiles   : List project|user|global-scoped active profile for the build
  help:effective-pom     : Displays effective POM for current build                      [debugging]
  help:effective-settings: Prints calculated settings                                    [debugging]

  $ mvn fr.jcgay.maven.plugins:buildplan-maven-plugin:list \   ← show ordered-by-phase list
    -Dbuildplan.tasks=install                                    of goals executed (Very useful to
                                                                 skip slow/non-important goals like
                                                                 doc, style-checks,...)

  $ mvn resources:resources \       ← quick local install (bypass tests/style-checks/...)
     compiler:compile \
     jar:jar \  install:install

                                                                           EXTRACT PACKAGE INFO
  $ mvn help:evaluate -q -DforceStdout -Dexpression=project.artifactId   ← Artifact ID
  $ mvn help:evaluate -q -DforceStdout -Dexpression=project.groupId      ← Extract Group ID
  $ mvn help:evaluate -q -DforceStdout -Dexpression=project.version      ← Extract Version
  ```

## Adding local jar dependency  (vs. maven central repository)

**WARN**: discouraged, but sometimes needed
  ```
  <dependency>
    <groupId>   ...  <artifactId>...  <version>...<scope>...
    <systemPath>/home/project/lib/myjar.jar</systemPath>
  </dependency>
  ```

## GENERATE FAT JAR (jar with all dependencies included)

  ```
  ...
  <profiles>
    <profile>
      <id>fatjar</id>      ←···· STEP   : create 'fatjar' profile with customized maven-assembly-plugin
      <activation>               STEP   : Exec   $ mvn ... '-P fatjar'   to activate this profile
        <property> <name>fatjar</name> </property>
      </activation>
      <build>
        <plugins>
          <plugin>
          ·   <artifactId>maven-assembly-plugin</artifactId>
          ·   <version>3.0.0</version>
          ·   <configuration>
          ·      <descriptorRefs>
          ·          <descriptorRef>fatjar</descriptorRef>
          ·      </descriptorRefs>
          ·      <archive>
          ·          <manifest>
          ·              <mainClass>com.myComp.myApp</mainClass>
          ·          </manifest>
          ·      </archive>
          ·   </configuration>
          ·   <executions>
          ·       <execution>
          ·           <id>make-assembly</id> <!-- this is used for inheritance merges -->
          ·           <phase>package</phase> <!-- bind to the packaging phase -->
          ·           <goals>
          ·               <goal>single</goal >
          ·           </goals>
          ·       </execution>
          ·   </executions>
          </plugin>
          ...
  </profiles>
  ```

## SNAPSHOT VERSIONING  (Future version)

 A snapshot version is one that has not been released (  future release ).  [[{doc_has.keypoint]]<br/>
 The idea is that  before  a "1.0" release is done, there exists
a `1.0.0-SNAPSHOT`. That version is what might become 1.0. It's
basically   "1.0 under development" . This might be close to a real
1.0 release, or pretty far (right after the 0.9 release, for ex.)

 The difference between a "real" version and a snapshot version is
that  snapshots might get updates .  That means that downloading
1.0-SNAPSHOT today might give a different file than downloading it
yesterday or tomorrow.

 In contrast   Released versions are inmutables :<br/>
 updates to "1.0.0" requires new version "1.0.1".

 Snapshot dependencies should only exist during development.
Released versions (i.e. no non-snapshot) should NEVER have
dependency on snapshots                                                      [[doc_has.keypoint}]]

  ```
  <repository>
      ...
      <snapshots>
          <enabled>true</enabled>
          <updatePolicy>
            always|daily(default)|
            "X"minutes|never
          </updatePolicy>
      </snapshots>
  </repository>
  ```

# pom utils (Cleaner/Updater/...) <[[{qa]]

* REF: <https://github.com/kdgregory/pomutil>

Utilities to clean, organize, and restructure Maven POMs.

## POM Cleaner :
  "Cleans up" single POM, normale plugin and dependency specifications,
  CONVERT HARDCODED VERSIONS TO PROPERTIES,
  CONSITENTLY ORDER TOP-LEVEL ELEMENTS  (with pretty-printing output).

## VERSION UPDATER:
  Updates the version for a set of POMs to a specified|next-sequential version.

## Dependency Check:
  * find dependencies that are specified but unused.
  * find dependencies used but unspecified (TRANSITIVE DEPENDENCIES THAT SHOULD BE DIRECT).

## MVND(aemon) 
* @[https://www.infoq.com/news/2020/12/mvnd-mavens-speed-daemon/]
* Study driven by Gradle shows Maven as being
  up to 100 times slower than gradle builds .
* JIT compiled classes are cached.
* multi process if needed.

* pretty small: ~4060 lines of Java code.

* mvnd speed gains:
  * 1/2 modules: ~ x7/x10 faster
  * big projects: ~ x6 faster
    (ex:Camel Quarkus 1242 modules)

* Who-is-Who:
  * Guillaume Nodet (project creator)
  * Peter Palaga:main contributor
[[qa}]]


# pom.xml Summary

* REF: <https://maven.apache.org/pom.html>

  ```
  <project
     xmlns="http://maven.apache.org/POM/4.0.0"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <name>MyPackageDescriptiveName</name>
    <url>http://maven.apache.org</url>

    <groupId>com.mycomp.groupid</groupId>  ┐    PROJECT COORDINATES:  Reusable in pom as
    <artifactId>myArtifactId</artifactId>  ├ ←  ${project.groupId}, ${project.artifactId}, ${project.version}
    <version>1.0─SNAPSHOT</version>        ┘    version follows: MAJOR.MINOR.PATCH REF: @[https://semver.org/]

    <packaging>jar</packaging>              ← := jar│war│ear│pom│maven─plugin│ejb│rar│par│aar│apklib│...
  ┌ <properties> ←··························· Reusable propeties:
  │   ...                                     @[https://maven.apache.org/pom.html#Properties]
  │   <junit.ver>3.8.1</junit.ver>              ← Best pattern. Group all dependency versions in properties
  │   <guava.ver>21.0</guava.ver>                 (in parent pom if parent─children apply)
  │   <......ver>19.2</guava.ver>
  │   ···
  │   <maven.compiler.source>1.8</maven.compiler.source> ← Best pattern. Group plugin params in properties.
  │   <maven.compiler.target>1.8</maven.compiler.target>
  │   ...
  │ </properties>
  └ <dependencies>

    <dependency>                           ┐
        <groupId>com.google.guava</groupId>│
        <artifactId>guava</artifactId>     ├ ← Example dependency declaration.
        <version>${guava.ver}</version>    │
    </dependency>                          ┘


    <dependency>
        <groupId>ch.qos.logback</groupId>        ← Typical dependencies for logging
        <artifactId>logback-classic</artifactId>
      ┌ <exclusions>  ←······················ Excluding transitive dependencies causing conflicts. (Multiple
      │   <exclusion>                         competing implementations of a same interface, ...)
      │     <groupId>org.slf4j</groupId>    ← Ex: fix runtime error: ".. path contains multiple SLF4J bindings"
      │     <artifactId>                    │   ...XXX.jar!/org/slf4j/impl/StaticLoggerBinder.class
      │        slf4j-jdk14                  │   ...XXX.jar!/org/slf4j/impl/StaticLoggerBinder.class
      │     </artifactId>                   ┘
      │   </exclusion>
      └ </exclusions>
        <version>1.1.7</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.ver}</version>
      <scope>test</scope>                 ←  test dependency. Not included in final packaged app
    </dependency>

    <build>                               ← Build customizations:
      <plugins>
    ┌ <plugin> ←········································· Ex. Plugin customization
    │   <groupId>org.apache.maven.plugins</groupId>
    │   <artifactId>maven─compiler─plugin</artifactId>  ← plugin implementing compile 'goal'
    │   <version>3.3</version>
    │   <configuration>       ┐
    │     <source>9</source>  │ ←·······················  plugin tunable parameters.
    │     <target>9</target>  │
    │   </configuration>      ┘
    └ </plugin>
      </plugins>
    </build>
    </dependencies>
  </project>
  ```

# Parent+Children Multiproject  [[{]]
## parent vs aggregator
* An aggregator is a pom.xml containing a <modules> section with a list of
  aggregated projects. It can also be a parent when aggregated projects point
  back to it as parent project, ussually because parent project includes
  also a  <dependencyManagement> "bill-of-material" sections.
* children projects can depend on a parent project that is NOT an
  aggregator (does not contains a <modules> sections) just to inherit
  common <properties> and <dependencyManagement> bill of materials.
* As explained later, in complex project different pom.xml can import
  not just one but many <dependencyManagment> sections from "orthogonal"
  pom.xml (one for security, another one for loggin, ...)

- Allows to inherit project dependency in children projects and build all sub-module child
- [REF](https://maven.apache.org/guides/mini/guide-multiple-modules.html)
  ```
  .../parent/pom.xml                               │ .../parent/child1/pom.xml
  ───────────────────────────────                  │ ──────────────────────────────────
  <modelVersion>4.0.0                              │ <parent>
  </modelVersion>                                  │   <groupId>...</groupId>
  <groupId>....</groupId>                          │   <artifactId>parent</artifactId>
  <artifactId>parent</artifactId>                  │   <version>1</version>
  <version>0.1.0</version>                         │   <relativePath>
  <packaging>pom</packaging>                       │      ../pom.xml</relativePath>
                                                   │ </parent>
                                                   │ <dependecies>
  <modules>                                <·· *1  │   <dependency>
  <module>./library1</module>                      │     <groupId>...</groupId>
  <module>./library2</module>                      │     <artifactId>...</artifactId>
  <module>./service1</module>                      │   </dependency>...
  </modules>                                       │ </dependecies>
                                                   │
                                                   │
  <dependencyManagement>                           │
    <dependencies>                                 │
      <dependency>                                 │
        <groupId>...</groupId>                     │
        <artifactId>...</artifactId>               │
         <version>${dep1_ver}</version>    <·· Children will not need to declare version (merged from parent)
         <scope>compile</scope>                unless they want to override with a different value.
      </dependency>...
    <dependencies>

    <exclusions>                           <·· Exclusions commons to all modules.
        <exclusion>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </exclusion>
    </exclusions>

  </dependencyManagement>
  ```

* [[{qa.best_practices}]] Try to avoid using parent inherited 
properties in children, unless we know they are "inmutable" or really 
shared.  Otherwise modifying the parent can break children.

1. Defining all children sub-modules in the <modules> sections converts the parent pom into an aggregator.
  This allows to build all children in "one shot" like:
  ```
  $ cd parent
  $ mvn package   <·· package all submodules. maven (reactor) will figure out the
                      dependencies amongst sub-modules (if any) to build in correct order.
                      It also include a given module using a plugin that itself is part
                      of the build. Such plugin will be built first.
                      Otherwise the default order in the <modules> section is used.
                      Optional flags include:
                      --resume-from          : resumes reactor from a given project 
                                               (on previous fail)
                      --also-make            : build the specified projects, and any
                                               of their dependencies in the reactor
                      --also-make-dependents : build the specified projects, and any that 
                                               depend on them
                      --fail-fast            : default behavior. Stop on first module fail.
                      --fail-at-end          : Continue on module failure.
                      --non-recursive        : Ignore <modules>, build just project in 
                                               the current directory (not very useful since
                                               usually modules exists just on pom like projects)
  ```
  (output will be similar to)
  ```
  [INFO] Scanning for projects...
  [INFO] -------------------------------
  [INFO] Reactor Build Order:
  [INFO] parent-project            [pom]
  [INFO] library1                  [jar]
  [INFO] library2                  [jar]
  [INFO] service1                  [war]
  ...
  [INFO] BUILD SUCCESS
  ```

## Parent and Aggregator best-practices:

- Split parents and aggregators in separate files like:
  ```
  ├─ aggregatorSec/
  │ └─ pom.xml                <·· Aggregate libraries related to a given set of security libraries.
  │
  ├─ aggregatorReporting/
  │ └─ pom.xml                <·· Aggregate libraries related to a given set of reporting libraries.
  │
  ├─ module1/ (extends parent)
  │ └─ pom.xml
  ├─ module2/ (extends parent)
  │ └─ pom.xml
  ├─ parent/                  <·· Define plugins and versions that must be reused among children projects
  │ └─ pom.xml
  ```

This way you can always install the parent only, with mvn clean install without extra options.

There are numerous benefits to keeping the parent and the aggregator as two separate things.
But in the end, you choose what's best for your project/environment.


    - use <dependencyManagement> @ parent's POM to define all dependency versions.
      See Bill of Material (BOMs) section for more details.
    - Do not set a scope or or set it to default compile.

  - Use the pluginManagement section of parent pom to define versions for
    all plugins that your build uses, even standard maven plugins like
    maven-compile-plugin and maven-source-plugin. This way your build will
    not suddenly behave differently when a new version of a plugin is released.

  - When using a parent POM not located in the directory directly above
    the current POM define an empty relativePath element in your parent section.
[[}]]

## Bill-of-materials BOM [[{]]
- [REF](https://www.baeldung.com/spring-maven-bom)

* pom vs bom:
  POM == Project Object Model == information + configurations to import dependencies and build a project.
  BOM == "Bill Of Materials"  == special POM used to control the versions of a project's dependencies and
                                 provide a central place to define and update those versions.

* BOM Use Case: add a dependency to our module without worrying about the version that we should depend on.

* Problem: 2 dependencies refer to different versions of a specific artifact.
  Project A's dependency tree:
   ```
   A -> B -> C -> Dv1.4
   A -> E      -> Dv1.0
                  └─┬─┘
  Which version of project D will be used. v1.4 or v1.0?
  ```

* Solution 1: Maven automatic dependency mediation. "nearest 
  one"/closest to our project.  (D v1.0 in previous dependency tree 
  example)
* Solution 2: Explicit declaration (put Dv1.4 as direct dependency in 
  pom.xml of project A)
* Solution 3: Use <dependencyManagement> as BOM (Bill of material)
* Solution 3.Alt 1: Declare <dependencyManagement> in parent's pom, and just inherit in
  child's submodule. A (parent) pom containing a <dependencyManagement> section
  is call a Bill Of Material pom.
* Solution 3.Alt 2: In complex projects there can be more than one set of
  "Bill Of Material" BOMs files. Parent-child relationship will not be enough.
  In that case we **import** each of the BOMs files like:
  ```
  <project ...>
    ...
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>project01</groupId>
          <artifactId>BOM_security</artifactId>   <·· BOM for security stuff
          <version>1.0</version>
          <type>pom</type>
          <scope>import</scope>                   <··· Note the import scope
        </dependency>
        <dependency>
          <groupId>project01</groupId>
          <artifactId>BOM_analytics</artifactId>
          <version>1.0</version>
          <type>pom</type>
          <scope>import</scope>                   <··· BOM for analytics stuff
        </dependency>
      </dependencies>
    </dependencyManagement>
  </project>
  ```

* Version resolution will take precedence like:
  1. direct   version declared in pom's <dependency>.
  2. parent's version in parent's pom.
  3. imported version in import scope.
  4. (automatic) dependency mediation.

### Real case example:
* ensure that all Spring dependencies are at the same version:
1. Step One. Import spring-framework-bom in our dependencyManagement to ensure that
   all Spring dependencies are at the same version:
   ```
   <dependencyManagement>
       <dependencies>
           <dependency>
               <groupId>org.springframework</groupId>
               <artifactId>spring-framework-bom</artifactId>
               <version>5.3.27</version>
               <type>pom</type>
               <scope>import</scope>
           </dependency>
       </dependencies>
   </dependencyManagement>
   ```
2. No need now to set the specify version attribute for any Spring artifact:
   ```
   <dependencies>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-context</artifactId>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-web</artifactId>
       </dependency>
   <dependencies>
   ```
[[}]]

# POM BEST PRACTICES:  [[{qa.best_practices]]
REF: @[http://geertschuring.wordpress.com/2011/02/23/maven-best-practices/]

  ```
  $ mvn versions:use-latest-versions \      ← update pom dependency to latest version
      -Dincludes="org.checkerframework:*"

  $ mvn versions:use-latest-versions \      ← update pom dependency to latest version
      -Dincludes="com.google.guava:*"
  ```

* Prefer `${project.artifactId}` vs `${artifactId}` or `${pom.artifactId}`
  following XML document structure.

- Use the dependency plugin to check your project for both unnecessary
  dependencies and undeclared-but-used-none-the-less dependencies.
  The goal is called ‘analyze’:
  ```
  $ mvn dependency:analyze
  ```

- Make sure the pom files contain all the repository references needed
  to download all dependencies. If you want to use a local repository
  instead of downloadin strait from the internet then use the maven
  settings file to define mirrors for the individual repositories that
  are defined in the poms.

- If you use Nexus, then do not create repository groups containing both
  hosted and proxied repositories. This will dramaticly reduce the
  responsiveness because Nexus will check the remote locations of the
  proxied repositories even if a hosted repository contains the requested
  artifact.

- TODO:
@[http://www.sonatype.com/people/2009/01/maven-continuous-integration-best-practices/]
[[qa.best_practices}]]

# Package Dependency Management  [[{DevOps.maven,qa.101,java_lang.*,qa.*,_PM.WiP]]
  ```
  $ mvn dependency:analyze       ← Inform about:
                                   - Dependencies used but not declared.
                                     If found in the parent pom, there is no problem when compiling,
                                     but must be included at runtime on the server.

                                   - Dependencies declared but not used for the scope provided
                                     (compile, provided…).  They can be in the parent pom too.
                                     Noneless, can be needed at runtime.

  $ mvn dependency:tree -Dscope=compile
                         ^^^^^^^^^^^^^^
                         skip/ignore test/provided/... dependencies
  → ...
  → [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ tamperproof ---
  → [INFO] com.myCompany:myProject:jar:1.0-SNAPSHOT
  → [INFO] +- org.web3j:core:jar:4.3.0:compile
  → [INFO] |  +- org.web3j:abi:jar:4.3.0:compile
  → [INFO] |  |  \- org.web3j:utils:jar:4.3.0:compile
  → [INFO] |  |     \- org.bouncycastle:bcprov-jdk15on:jar:1.60:compile
  → [INFO] |  +- org.web3j:crypto:jar:4.3.0:compile
  → [INFO] |  |  \- org.web3j:rlp:jar:4.3.0:compile
  → [INFO] |  +- org.web3j:tuples:jar:4.3.0:compile
  → [INFO] |  +- com.github.jnr:jnr-unixsocket:jar:0.21:compile
  → [INFO] |  |  +- com.github.jnr:jnr-ffi:jar:2.1.9:compile
  → [INFO] |  |  |  +- com.github.jnr:jffi:jar:1.2.17:compile
  → [INFO] |  |  |  +- org.ow2.asm:asm:jar:5.0.3:compile
  → [INFO] |  |  |  +- org.ow2.asm:asm-commons:jar:5.0.3:compile
  → [INFO] |  |  |  +- org.ow2.asm:asm-analysis:jar:5.0.3:compile
  → [INFO] |  |  |  +- org.ow2.asm:asm-tree:jar:5.0.3:compile
  → [INFO] |  |  |  +- org.ow2.asm:asm-util:jar:5.0.3:compile
  → [INFO] |  |  |  +- com.github.jnr:jnr-a64asm:jar:1.0.0:compile
  → [INFO] |  |  |  \- com.github.jnr:jnr-x86asm:jar:1.0.2:compile
  → [INFO] |  |  +- com.github.jnr:jnr-constants:jar:0.9.11:compile
  → [INFO] |  |  +- com.github.jnr:jnr-enxio:jar:0.19:compile
  → [INFO] |  |  \- com.github.jnr:jnr-posix:jar:3.0.47:compile
  → ...
  ```
[[}]]

# Publishing to Maven Central [[{DevOps.maven,devops]]
* External references:
  * @[https://www.apache.org/dev/publishing-maven-artifacts.html]
  * @[http://maven.apache.org/repository/guide-central-repository-upload.html]
  * @[/General/cryptography_map.html?id=pgp_summary]

* Requirements @[http://central.sonatype.org/pages/requirements.html]
  Prepare pom.xml properly:
  ```
  <?xml version="1.0" encoding="UTF-8"?>
  <project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="... http://.../maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.u1.training</groupId>     ← Prepare valid coordinates
    <artifactId>artifact01</artifactId>
    <version>1.0</version>                 ←  snapshots NOT allowed  (Recheck)
    <packaging>jar</packaging>

    <name>${project.groupId}:${project.artifactId}</name>
    <description>....</description>
    <url>http://github.com/user01/artifact01</url>

    <licenses>
      <license>
        <name>Apache Software License, Version 2.0</name>
        <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      </license>
    </licenses>

    <developers>
      <developer>
        <name>First_Name Second_Name</name>
        <email>asdf.qwer@mock.com</email>
        <organization>Mock Corp</organization>
        <organizationUrl>http://...</organizationUrl>
      </developer>
    </developers>

    <scm>
      <connection>scm:git:git://github.com/user01/artifact01.git</connection>
      <developerConnection>
        scm:git:ssh://github.com:user01/artifact01.git
      </developerConnection>
      <url>http://github.com/user01/artifact01/tree/master</url>
    </scm>
    ...
  </project>
  └──────────────────────────────────┬──────────────────────────────────────┘
    WARN : """ we discourage the usage of <repositories> and                      ← [QA]
        <pluginRepositories> and instead publish any required
        components to the Central Repository """
  ```

* required files:
  ```
  $  cat artifact01-1.4.7.pom            | gpg2 -ab -o artifact01-1.4.7.pom.asc          ² 
  $  cat artifact01-1.4.7.jar            | gpg2 -ab -o artifact01-1.4.7.jar.asc          ² 
  $  cat artifact01-1.4.7-sources.jar ¹  | gpg2 -ab -o artifact01-1.4.7-sources.jar.asc  ² 
  $  cat artifact01-1.4.7-javadoc.jar ¹  | gpg2 -ab -o artifact01-1.4.7-javadoc.jar.asc  ² 
         └──┬─────┘ └─┬─┘              ^               └──────────────┬───────────────┘  ^
         artifactId version            │                      GPG signatures *.asc       │
                                       │                                                 │
                                       ¹: required except for pom (vs jar) packages      │
                                       ²: Verify sign. like   $ gpg2 --verify ...asc ────┘
  ```

## Build tool integration @[http://pgp.mit.edu]  [TODO]
* <http://central.sonatype.org/pages/working-with-pgp-signatures.html#using-build-tools-for-signing>

## PUBLISH BEST PATTERNS
* Use approved repository hosting location:
  ```
  <http://www.apache.org/>           (for all Apache projects)
  <http://www.fusesource.org/forge/> (focused on FUSE related projects)
  <http://www.nuiton.org>
  ```

* User automatic publication in "forges" providing hosting services.

* OSS Repository Hosting
  @[http://central.sonatype.org/pages/ossrh-guide.html]
  * Approved repository provided by Sonatype for OOSS Projects that want to
    get their artifacts into Central Repository.
  * Open an account as explained at
   @[http://central.sonatype.org/pages/ossrh-guide.html]

## POST-NAMESPACE REGISTRATION:

* e-mail received after Namespace correct registration
  ```
  ┌──────────────────────────────────────────────────────────────────┐
  │ https://issues.sonatype.org/browse/OSSRH-39644?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel
  │ Thad Watson resolved OSSRH-39644: Resolution: Fixed              │
  │                                                                  │
  │ Configuration has been prepared, now you can:                    │
  │ → Deploy snapshot artifacts into repository                      │
  │   @[https://oss.sonatype.org/content/repositories/snapshots]     │
  │ → Deploy release artifacts into the staging repository           │
  │   @[https://oss.sonatype.org/service/local/staging/deploy/maven2]│
  │ → Promote staged artifacts into repository 'Releases'            │
  │ → Download snapshot and release artifacts from group             │
  │   @[https://oss.sonatype.org/content/groups/public]              │
  │ → Download snapshot, release and staged artifacts from           │
  │   staging group                                                  │
  │   @[https://oss.sonatype.org/content/groups/staging]             │
  │  please comment on this ticket when you promoted                 │
  │  your first release, thanks                                      │
  └──────────────────────────────────────────────────────────────────┘
  ```

## pre-deployment Tests:

1. Verify that all pom.xml files have an SCM definition.
1. Diff original 'pom.xml' with 'pom.xml.tag' to check if license,...
   or any other info has been removed. This has been known
   to happen if the starting <project> tag is  NOT  on a single
   line.
   The only things that should be different are:
   <version> and <scm> elements. Anyother must be manually updated
   from original pom.xml.
  ```
  $ mvn deploy           ← Deploy snapshot (to be staged)

  mvn release:clean      ← Prepare for  release
  $ mvn release:prepare\ ← Dry run. Check output is OK.
    -DdryRun=true          -DautoVersionSubmodules=true can save time
                           in multi-module projects
  mvn release:prepare    ← Exec. release.  new tag will automatically
                           be created and checked in git (or svn,...)
  mvn release:perform    ← Stage release for a vote. release will
                           automatically be added to temp staging dir.
  ```
[[}]]

# OWASP (maven) Plugin [[{security.101.owasp,devops.maven,01_PM.TODO]]
@[https://maven.apache.org/plugins/]
* OWASP Dependency-Check identifies project dependencies and checks
  if there are any known, publicly disclosed, vulnerabilities.
@[https://www.owasp.org/index.php/OWASP_Dependency_Check]
[[}]]

# Un-ordered recipes [[{]]

* "Mavenize" a jar (copy and add coordinates into local .m2/repository)
  ```
  $ mvn install:install-file \          [[{troubleshooting}]]
    -Dfile=path_to_local_jar.file \
    -DgroupId=$groupId \
    -DartifactId=$artifactId \
    -Dversion=$version \
    -Dpackaging=$packaging
  ```
[[}]]

[[DEVOPS.MAVEN}]]
