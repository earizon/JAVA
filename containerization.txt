# Dockerfile "pipeline": mvn to Container [[{devops.containarization,devops.maven,cloud.k8s,02_doc_has.diagram,_PM.TODO]]
FROM maven:3.6-jdk-12-alpine as build
WORKDIR /builder
ADD pom.xml /builder/pom.xml
ADD src /builder/src

RUN mvn install -DskipTests=true

FROM openjdk:11-jre
ARG APP_NAME_ARG=middleware-0.0.1-SNAPSHOT.jar
ENV APP_PROFILE docker
ENV APP_NAME $APP_NAME_ARG
WORKDIR /app
COPY --from=build /builder/target/$APP_NAME /app
COPY --from=build /builder/src/main/resources /app/src/main/resources
EXPOSE 8080
CMD java -Dspring.profiles.active=$APP_PROFILE -jar $APP_NAME
<hr/>
# Jib: Image Builder
Docker+mvn/gradle integration:
@[https://www.infoq.com/news/2018/08/jib]
@[https://github.com/GoogleContainerTools/jib]

- Build Java Container without Docker/Dockerfile
- Jib's build approach separates the Java application
  into multiple layers, so when there are any code changes,
  only those changes are rebuilt, rather than the entire application.
- these layers are layered on top of a distroless base image.
  containing only the developer's application and its runtime deps.

-  Docker build flow
        │JAR│ ← (build) ← │Project│
          ·                                                              │Container │
          ├·····→ │Build Context│ →(build)→ │ Container Image │ →(push)→ │Image     │
          ·                                 │ (docker cache)  │          │(registry)│
     │Dockerfile│

   Jib Build Flow:
                                                                         │Container │
     │Project│ ───────────────(Jib)─────────────────────────────────────→│Image     │
                                                                         │(registry)│

- Ex: Creating images from command line:
  Once jib is installed and added to PATH, to create a new image do something like:
$ $ /opt/jib/bin/jib
$   --insecure \                                ← allow conn. to HTTP (non TLS) dev.registries
$   build \                                     ← build image
$   --registry \                                ← Push to registry
$     gcr.io/distroless/java \                  ← Base image (busybox, nginx, gcr.io/distroless/java,...)
$     192.168.1.3:5000/jib:latest \             ← Destination registry / image
$   --entrypoint "java,-cp,/app/lib/*,\
$   com.google.cloud.tools.jib.cli.JibCli" \
$   build/install/jib/lib,/app/lib
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    Other options include:
    (See jib build --help for more options)

    p=perms       set file and directory permissions:
      actual      use actual values in file-system
      fff:ddd     octal file and directory
                  (Default to 644 for files and 755 for dir.)
    ts=timestamp  set last-modified timestamps:
       actual     use actual values in file-system
       "seconds since Unix epoch"
       "date-time in ISO8601 format"
                  (Default  to 1970-01-01 00:00:01 UTC).
    -a, --arguments=arg         container entrypoint's default arguments
    -c, --creation-time=time    Set image creation time  (default: 1970-01-01T00:00:00Z)
    -l, --label=key=val[,key=va l...]
    -p, --port=port[,port...]   Expose port/type (ex: 25 or 25/tcp)
    -u, --user=user             Set user for execution (uid or existing user id)
    -V, --volume=path1,path2... Configure specified paths as volumes


- Ex pom.xml to create tomcat container with war:
  REF: https://stackoverflow.com/questions/63657172/option-to-auto-generate-dockerfile-and-other-deployment-tooling-in-intellij

$ $ mvn clean package jib:dockerBuild
$ $ docker run --rm -p 8082:8080 \
$   registry.localhost/hello-world:latest

  <?xml version="1.0" encoding="UTF-8"?>
  <project xmlns="http://maven.apache.org/POM/4.0.0"
  "http://maven.apache.org/POM/4.0.0"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>mvn-jib-example</artifactId>
    <version>1.0</version>
    <packaging>war</packaging>

    <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <failOnMissingWebXml>false</failOnMissingWebXml>
    </properties>

    <dependencies>
      <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>4.0.1</version>
        <scope>provided</scope>
      </dependency>
    </dependencies>

    <build>
      <finalName>servlet-hello-world</finalName>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.1</version>
          <configuration>
            <source>1.8</source>
            <target>1.8</target>
          </configuration>
        </plugin>
        <plugin>
          <groupId>com.google.cloud.tools</groupId>
          <artifactId>jib-maven-plugin</artifactId>
          <version>2.5.0</version>
          <configuration>
            <allowInsecureRegistries>true</allowInsecureRegistries>
            <from> <image>tomcat:9.0.36-jdk8-openjdk</image> </from>
            <to>
              <image>registry.localhost/hello-world</image>
              <auth> <username>...</username> <password>...</password> </auth>
              <tags>
                <tag>latest</tag>
              </tags>
            </to>
            <container>
              <appRoot>/usr/local/tomcat/webapps/ROOT</appRoot>
            </container>
            <extraDirectories>
              <paths>
                <path>
                  <from>./src/main/resources/extra-stuff</from>
                  <into>/path/in/docker/image/extra-stuff</into>
                </path>
                <path>
                  <from>/absolute/path/to/other/stuff</from>
                  <into>/path/in/docker/image/other-stuff</into>
                </path>
              </paths>
            </extraDirectories>
          </configuration>
        </plugin>
      </plugins>
    </build>
  </project>


See also: jKube notes
[[devops.containarization}]]
