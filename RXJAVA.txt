# RxJava [[{architecture.async.reactive.rxjava,qa]]
* <https://github.com/ReactiveX/RxJava>
* ReactiveX provides a set of very-well thought-out cross-language abstraction to
  implement the reactive patterns.

## Why Reactive Programming <!-- { -->

The conventional computing model of a Touring machine takes for granted
that data is already available to be processed.
In the Internet era, data is arriving at random and we don't want to block
our CPU in an infinite loop waiting for such data to arrive.

The conventional approach is to let the OS scheduler to divide the CPU
into threads or processes sharing the hardware at defined intervals.
While this approach works well for standard load scenarios, it fails for
"moderm" workloads with thousands or tens of thousands of simultaneous
clients accessing the server. Each new OS thread requires some extra
memory on the OS kernel (about 2Kilobytes per Thread, and even more
per Process). Switching from thread to thread or process to process becomes
expensive or prohibitive with that number of concurent I/O flows.
This is even worse when our server is virtualized with many other
competing VMs running on the same physical server.

  Async programming will try to reause the same thread by many different
  clients or flows of I/O data providing a much better ussage of hardware
  resources and avoiding unnecesary context-switches between threads or
  processes.

  The term "reactive" refers to programming models that are built around
  reacting to change — network component reacting to I/O events, UI controller
  reacting to mouse events, etc. In that sense non-blocking is reactive because
  instead of being blocked we are now in the mode of reacting to notifications
  as operations complete or data becomes available.

  Spring Reactive Streams is a small spec, also adopted in Java 9, that defines
  the interaction between asynchronous components with back pressure. For
  example a data repository — acting as Publisher, can produce data that an
  HTTP server — acting as Subscriber, can then write to the response. The main
  purpose of Reactive Streams is to allow the subscriber to control how fast or
  how slow the publisher will produce data.

  Reactive Streams is of interest to low-level reusable libraries but
  no final applications are better suites using a higher level and richer
  (functional) API like Java8+ Collection-Stream API or more ingeneral APIs
  like those provided by ReactiveRX.

  Reactive programming can also be compared with the way data flows in Unix
  pipelines when handling text files. In the next Unix command there is a
  file input (it can be a real file in the hard-disk or a socket receiving
  data) and the different commands in the pipe consume STDIN and result to
  STDOUT for further processing.
  ```
  | $ cat input.csv | grep "...." | sort | uniq | ... >  output.csv
  ```
  Reactive Java frameworks are ussually much fasters since everything executes
  on the same process (a Unix pipeline requires the help of the underlying
  OS to work), and the type of input/output data can be any sort of Java
  object (not just file text).
<!-- } -->

  ```
  | Observable/Operators/Observers
  |<http://reactivex.io/documentation/contract.html>
  |<http://reactivex.io/documentation/observable.html>
  |                                         ⇑
  |                                    <<Subscriber>>
  |                                    unsubscribe  : - Observable can opt to stop
  |                                                   event-emission if no more clients
  |                                                   are subcribed
  | Loop-of-Observable-emitted-events:                - unsubscription will cascade back
  | ·  Observable → <<IObserver>>: onNext(event)      through the chain of operators
  | ·                                                 applying to associated Observable.
  | ·  observer   →   observer*1 : handle event    *1 also called "subscriber", "watcher"
  | ·                                                 or "reactor" ("reactor pattern")
  | end-loop
  | Observable    → <<handler>>  : onCompleted()
  |                  (instance)
  | observer      →  observer    : handle event
  |
  |   WARN:  There is no canonical naming standard in RXJava
  |
  |
  |  Observable<T>  → operator1 → ... → operatorN  →  Observer
  |  pushes objects       ^        ^      ^           Subscribes to
  | (events) from         ·        ·      ·           the observable
  | any source            ·        ·      ·           events
  | (ddbb, csv,...)       ·        ·      ·           .onNext()
  |                       ·        ·      ·           .onCompleted()
  |          TIP :Learning which operators to use     .onError()
  |               for a situation and how to combine  .onSubscribe(Disposable d);
  |               them is the key to master RxJava    ^
  |┌──────────────────────────────────────────────────┘
  |├─onSubscribe(Disposible): Free any resources created by the rxJava pipeline.
  |├─onNext()     : passes each item, one at a time,   to the  Observer
  |├─onCompleted(): communicates a completion event    to the  Observer
  |└─onError()    : communicates an error up the chain to the  Observer
  |                 where the Observer typically defines how to handle it.
  |                 Unless retry() operator is used to intercept the error,
  |                 the Observable chain typically terminates, and no
  |                 more emissions will occur.
  |                 See also   operators 'Catch' and 'Retry'
  |
  |By default, Observables execute work on the immediate thread,
  |which is the thread that declared the Observer and subscribed it.
  |Not all Observables will fire on the immediate thread, (Observable.interval(),...)
  |
  | Creating a source Observable:
  |  Observable<String> source01 = Observable .just ("value1",...,"valueN");
  |  Observable<String> source02 = Observable .fromCallable (() -> 1/0);
  |                                            ^^^^^^^^^^^^        ^^^
  |                                            Similar to .just() but errors
  |                                            are captured by the rxJava "pipeline"
  |
  |  Observable<String> source02 = Observable .create ( emitter ->
  |  {
  |        try {
  |    emitter .onNext (myList.get(0));
  |    emitter .onNext (myList.get(1));
  |    ...
  |    emitter .onComplete() ; // ← Optional
  |        } catch(Throwable e) {
  |    emitter .onError(e) ;
  |        }
  |  } );
  |  Observable<String>  source03 = Observable .fromIterable (myIterableList);
  |  Observable<Integer> source04 = Observable .range (1,10);
  |  Observable<String>  source05 = Observable .interval (1, TimeUnit.SECONDS);
  |                                             ^^^^^^^^
  |                                             Since it operates on a timer →
  |                                             needs to run on separate thread
  |                                             and will run on the computation
  |                                             Scheduler by default
  |
  |  Observable<String>  source06 = Observable .fromFuture (myFutureValue);
  |  Observable<String>  source07 = Observable .empty ();
  |                                             ^^^^^
  |                                             calls onComplete() and ends
  |
  |  Observable<String>  source08 = Observable .defer ( () -> Observable.range(start,count));
  |                                             ^^^^^
  |                                      Advanced factory pattern.
  |                                      allows a separate state for each observer
  |  Observable<String>  source09 = Observable .fromCallable ( () -> Observable.range(start,count));
  |
  | creating Single/Maybe/Completable "Utility" Observables:
  | ┌─────────────────────────────┬────────────────────────────────┬─────────────────────────────────┐
  | │ Single.just("Hello")        │ Maybe.just("Hello")            │ Completable.fromRunnable(       │
  | │ .subscribe(...);            │   .subscribe(...);             │   () -> runProcess() )          │
  | │                             │                                │ .subscribe(...);                │
  | ├─────────────────────────────┼────────────────────────────────┼─────────────────────────────────┤
  | │ Emits a single item         │ Emits (or not)a single item    │  does not receive any emissions │
  | ├─────────────────────────────┼────────────────────────────────┼─────────────────────────────────┤
  | │ SingleObserver              │  MaybeObserver                 │  CompletableObserver            │
  | │ .onSubscribe(Disposable d); │  .onSubscribe(Disposable d);   │  .onSubscribe(Disposable d);    │
  | │ .onSuccess(T value);        │  .onSuccess(T value);          │  .onComplete();                 │
  | │ .onSuccess(Throwable error);│  .onSuccess(Throwable error);  │  .onError(Throwable error);     │
  | │                             │  .onComplete();                │                                 │
  | └─────────────────────────────┴────────────────────────────────┴─────────────────────────────────┘
  |
  | Create Test-oriented observables
  |   Observable .never ();
  |   Observable .error ();
  |
  | Derive Observables from source:
  |Observable<Integer> lengths  =  source .map    (String::length);
  |Observable<Integer> filtered = lengths .filter (i -> i  = 5);
  |
  | creating an Observer:
  |(Lambdas in the source Observable .subscribe can be used in place)
  |Observer<Integer> myObserver = new Observer<Integer>() {
  |  @Override public void onSubscribe(Disposable d) { //... }
  |  @Override public void onNext(Integer value)     { log.debug("RECEIVED: " + value); }
  |  @Override public void onError(Throwable e)      { e.printStackTrace();}
  |  @Override public void onComplete()              { log.debu("Done!"); }
  |};
  |
  |  Cold/Hot Observables
  |  └ Cold: - Repeat the same content to different observers.
  |          - Represent sort-of inmmutable data.
  |          - A "cold" Observable waits until an observer subscribes to it
  |            an observer is guaranteed to see the whole sequence of events
  |  └ Hot : "Broadcast" to all observers at the same time.
  |          - A "hot" Observable may begin emitting items as soon as it is created.
  |          - An observer connecting "later" will loose old emissions.
  |          - Represent real-time events . They are time-sensitive.
  |          - Emissions will start when first observers calls connect().
  |          - a cold/hot observable can generate a new hot observable by
  |            calling publish() that will return a hot ConnectableObservable.
  |            Helpful to avoid the replay of data on each subscrived Observer.
  |
  |          - NOTE: A "Connectable" Observable: does NOT begin emitting items
  |              until its Connect method is called, whether or not any observers
  |              have subscribed to it.
  ```

* In RxJava 2.0, Observables **NO LONGER SUPPORT EMITTING null VALUES** !!! [[{qa.101,qa.billion_dolar_mistake}]]

[[{doc_has.decission_tree]]
## RxJava Decision Tree  (Choosing the right Operator for a task)
* [REF](http://reactivex.io/documentation/operators.html#tree)
  ```
  | Alphabetical List of Observable Operators
  | <http://reactivex.io/documentation/operators.html#alphabetical>
  | 
  | Core API
  | └ rx.Observable "==" [Java 8 Stream + CompletableFuture + "Back-presure" measures ]
  |   <http://reactivex.io/documentation/observable.html>    └──────────────┬──────┘
  |                                                                          │
  |                                                           probably an intermediate
  |                                                           buffer for incomming/outgoing
  |                                                           messages that acts async.
  |                                                           when not full, and sync when
  |                                                           full.
  |   -  rx.Single : specialized version emiting a single item
  | 
  | └ rx.Operators :
  |   - Compose Observables in a chain
  |   - gives the real "reactive" power
  |   - operators allow to transform, combine, manipulate, and work
  |     with the sequences of items emitted by Observables.
  |   - declarative programming
  |     - AVOID THE THE DRAWBACKS OF CALLBACK-NESTING("callback hell")
  |     - Most operators operate on an Observable and return an Observable.
  |       Each operator in the chain modifies the Observable that results
  |       from the operation of the previous operator. Order matters.
  |       (the Builder Pattern, also supported, is non-ordered)
  | └ rx.Subject :
  | <http://reactivex.io/documentation/subject.html>
  |   sort of "bridge or proxy" is available in some implementations
  |   that acts both as an observer and as an Observable.
  | └ rx.Scheduler :
  | <http://reactivex.io/documentation/scheduler.html>
  |   - Needed when using multithreading into the
  |     cascade of Observable operators.
  |   - By default, the chain of Observables/operators
  |     will notify its observers  on the same thread
  |     on which its Subscribe method is called
  |   Operator|SubscribeOn         |ObserveOn
  |   --------+--------------------+---------
  |           |sets an Scheduler on|sets an Scheduler used
  |           |which the Observable|by the Observable to
  |           |should operate.     |send notifications to
  |           |                    |its observers.
  |   Scheduler "==" Thread
  ```
[[}]]

## External links:
* Rx Workshop: Introduction
 <https://channel9.msdn.com/Series/Rx-Workshop/Rx-Workshop-Introduction>
* Introduction to Rx: IObservable
 <http://introtorx.com/Content/v1.0.10621.0/02_KeyTypes.html#IObservable>
* Mastering observables (from the Couchbase Server documentation)
 <https://developer.couchbase.com/documentation/server/3.x/developer/java-2.0/observables.html>
* 2 minute introduction to Rx by Andre Staltz (“Think of an Observable as an asynchronous immutable array.”)
 <https://medium.com/@andrestaltz/2-minute-introduction-to-rx-24c8ca793877>
* Introducing the Observable by Jafar Husain (JavaScript Video Tutorial)
 <https://egghead.io/lessons/rxjs-introducing-the-observable>
* Observable object (RxJS) by Dennis Stoyanov
 <http://xgrommx.github.io/rx-book/content/observable/index.html>
* Turning a callback into an Rx Observable by @afterecho
 <https://afterecho.uk/blog/turning-a-callback-into-an-rx-observable.html>

## Ops.classification 1
* Operators creating new Observables
  ```
  | <http://reactivex.io/documentation/operators.html#creating>
  |  Create     create Observable from scratch programmatically
  |  Defer      do not create the Observable until the observer subscribes,
  |             and create a fresh Observable for each observer
  |  Empty      create Observables that have very precise and limited behavior
  |  Never        "
  |  Throw        "
  |  From       create some object or data structure
  |  Interval   create Observable that emits a sequence of integers spaced
  |             by a particular time interval
  |  Just       convert an object or a set of objects into an Observable that emits that or those objects
  |  Range      create an Observable that emits a range of sequential integers
  |  Repeat     create an Observable that emits a particular item or sequence of items repeatedly
  |  Start      create an Observable that emits the return value of a function
  |  Timer      create an Observable that emits a single item after a given delay
  ```

* Operators Transforming Items:
  ```
  |<http://reactivex.io/documentation/operators.html#transforming>
  |  Buffer     periodically gather items from input into bundles and emit
  |             these bundles rather than emitting the items one at a time
  | 
  |  FlatMap    transform the items emitted by an Observable into Observables,
  |             then flatten the emissions from those into a single Observable
  |  GroupBy    divide an Observable into a set of Observables that each emit a
  |             different group of items from the original Observable,
  |             organized by key
  |  Map        transform each input-item by applying a function
  |  Scan       apply a function to each item emitted by an Observable,
  |             sequentially, and emit each successive value
  |  Window     periodically subdivide items from an Observable into
  |             Observable windows and emit these windows rather than emitting
  |             the items one at a time
  ```
* Operators selectively filtering emitted events from a source Observable
  ```
  | <phttp://reactivex.io/documentation/operators.html#filtering>
  |  Debounce   only emit an item from an Observable if a particular timespan has passed
  |             without it emitting another item
  |  Distinct   suppress duplicate items emitted by an Observable
  |  ElementAt  emit only item n emitted by an Observable
  |  Filter     emit only those items from an Observable that pass a predicate test
  |  First      emit only the first item, or the first item that meets a condition, from an Observable
  |  IgnoreElements   do not emit any items from an Observable but mirror its termination notification
  |  Last       emit only the last item emitted by an Observable
  |  Sample     emit the most recent item emitted by an Observable within periodic time intervals
  |  Skip       suppress the first n items emitted by an Observable
  |  SkipLast   suppress the last n items emitted by an Observable
  |  Take       emit only the first n items emitted by an Observable
  |  TakeLast   emit only the last n items emitted by an Observable
  ```
* Operators Combining multiple source Observables into a new single Observable
  ```
  | <http://reactivex.io/documentation/operators.html#combining>
  |  And        combine sets of items emitted by two or more Observables by means
  |  Then       of Pattern and Plan intermediaries
  |  When
  |
  |  CombineLatest   when an item is emitted by either of two Observables, combine the
  |             latest item emitted by each Observable via a specified function and
  |             emit items based on the results of this function
  |  Join       combine items emitted by two Observables whenever an item from one
  |             Observable is emitted during a time window defined according to an
  |             item emitted by the other Observable
  |  Merge      combine multiple Observables into one by merging their
  |             emissions
  |  StartWith  emit a specified sequence of items before beginning to emit the
  |             items from the source Observable
  |  Switch     convert an Observable that emits Observables into a single
  |             Observable that emits the items emitted by the most-recently-
  |             emitted of those Observables
  |  Zip        combine multiple Observables emissions together via a function
  |             function → emit single items for each input tuple
  ```
* Operators handling Errors and helping to recover from error-notifications
  ```
  | <http://reactivex.io/documentation/operators.html#error>
  |  Catch   recover from an onError notification by continuing the sequence without error
  |  Retry   if a source Observable sends an onError notification, resubscribe to it
  |          in the hopes that it will complete without error
  ```
* Utility Operators "toolbox"
  ```
  | <http://reactivex.io/documentation/operators.html#utility>
  |  Delay       shift the emissions from an Observable forward in time by a particular amount
  |  Do          register an action to take upon a variety of Observable lifecycle events
  |
  |  Materialize    represent both the items emitted and the notifications sent
  |  Dematerialize   as emitted items, or reverse this process
  |
  |  ObserveOn   specify the scheduler on which an observer will observe this Observable
  |  Serialize   force an Observable to make serialized calls and to be well-behaved
  |  Subscribe   operate upon the emissions and notifications from an Observable
  |  SubscribeOn   specify the scheduler an Observable should use when it is subscribed to
  |  TimeInterval  convert an Observable that emits items into one that emits indications
  |                of the amount of time elapsed between those emissions
  |  Timeout     mirror the source Observable, but issue an error notification if a
  |              particular period of time elapses without any emitted items
  |  Timestamp   attach a timestamp to each item emitted by an Observable
  |  Using       create a disposable resource that has the same lifespan as the Observable
  ```
* Conditional and Boolean Operators evaluating one or more
  Observables or items emitted by Observables
  ```
  | <http://reactivex.io/documentation/operators.html#conditional>
  | All         determine whether all items emitted by an Observable meet some criteria
  |             Mathematical and Aggregate Operators
  | Amb         given two or more source Observables, emit all of the items from only the
  |             first of these Observables to emit an item
  |           <http://reactivex.io/documentation/operators.html#mathematical>
  | Contains   determine whether an Observable emits a particular item or not
  |            Average, Concat, Count, Max, Min, Reduce, and Sum
  | DefaultIfEmpty  emit items from the source Observable, or a default item if the
  |            source Observable emits nothing  onverting Observables
  | SequenceEqual   determine whether two Observables emit the same sequence of items
  | SkipUntil   discard items emitted by an Observable until a second Observable emits an item To
  | SkipWhile   discard items emitted by an Observable until a specified condition becomes false
  ```
* Connectable Observable Operators
  ```
[http://reactivex.io/documentation/operators.html#connectable]
  | TakeUntil   discard items emitted by an Observable after a second Observable emits an item or terminates
  | TakeWhile   discard items emitted by an Observable after a specified condition becomes false
  | Connect
  | Publish
  | RefCount
  | Replay
  ```
* Mathematical and Aggregate Operators.<br/>
  Operators that operate on the entire sequence of items emitted by an Observable
  ```
  | Average     calculates the average of numbers emitted by an Observable and emits this average
  | Concat      emit the emissions from two or more Observables without interleaving them
  | Count       count the number of items emitted by the source Observable and emit only this value
  | Max         determine, and emit, the maximum-valued item emitted by an Observable
  | Min         determine, and emit, the minimum-valued item emitted by an Observable
  | Reduce      apply a function to each item emitted by an Observable, sequentially, and emit the final value
  | Sum         calculate the sum of numbers emitted by an Observable and emit this sum
  ```
* Backpressure Operators. <br/>
  A variety of operators that enforce particular flow-control policies
  <http://reactivex.io/documentation/operators/backpressure.html>
  * backpressure operators strategies for coping with Observables that produce items more
  rapidly than their observers consume them
  ```
  | Connectable Observable Operators
  ```
  * Specialty Observables that have more precisely-controlled subscription dynamics
  ```
  | Connect   instruct a connectable Observable to begin emitting items to its subscribers
  | Publish   convert an ordinary Observable into a connectable Observable
  | RefCount  make a Connectable Observable behave like an ordinary Observable
  | Replay    ensure that all observers see the same sequence of emitted items, even if they
  |           subscribe after the Observable has begun emitting items
  ```
* Operators to Convert Observables
  ```
  | To        convert an Observable into another object or data structure
  ```

## Ops.classification 2
* Basic Operators:
  * Suppressing operators:
    * filter, take, skip, takeWhile/skipWhile, distinct, distinctUntilChanged
  * Transforming operators:
    * map, cast, startWith, defaultIfEmpty, switchIfEmpty, sorted, deplay,repeat, scan
  * Reducing operators:
    * count, reduce, all, any, contains
  * Collection operators:
    * toList, toSortedList, toMap, toMultiMap, collect
  * Error recovery Operators
    * onErrorReturn, onErrorReturnItem, onErrorResumeNext, retry
  * Action ("stream life*cicle") Operators:
    * doOnNext, doOnComplete, doOnError, doOnSubscribe, doOnDispose
* Combining Observables:
  ```
  Merging         : merge , mergeWith , flatMap
  * Concatenation : concat, concatWith, concatMap
  * Ambiguous     : amb
  * Zipping       : 
  * Combine Latest: withLatestFrom
  * Grouping      : groupBy
  ```
* Multicasting, Replaying and Caching:<br/>
  ( Multicasting is helpful in preventing redundant work being done by multiple
    Observersand instead makes all Observers subscribe to a single stream,
    at least to the point wherethey have operations in common)
  * "Hot" operators. (TODO)
  * Automatic connection:
    * autoConnect, refCount, share
  * replay
  * cache
* Subjects
  * Just like mutable variables are necessary at times even though you
    should strive forimmutability, Subjects are sometimes a necessary tool
    to reconcile imperative paradigmswith reactive ones.
  * PublishSubject
  * Serializin Subject
  * BehaviourSubject
  * ReplaySubject
  * AsyncSubject
  * UnicastSubject

## TODO [[{PM.TODO,troubleshooting,qa.error_control]]
* Custom Ops
<http://reactivex.io/documentation/implement-operator.html>
[[{architecture.async.reactive.rxjava,qa,PM.TODO}]]
* 5 Not So Obvious Things About RxJava
<https://medium.com/@jagsaund/5-not-so-obvious-things-about-rxjava-c388bd19efbc>
* Error control
<https://github.com/ReactiveX/RxJava/wiki/Error-Handling-Operators>
* Dealing with RxJava's never-ending Observables
<https://tech.xing.com/dealing-with-rxjavas-never-ending-observables-1ca8f18797ff>
[[}]]

[[{java_lang.functional,qa,architecture.async.reactive,PM.WiP]]
## java.utility.function
<https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html>
<https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html>
* JDK 1.8+
* Incomplete but good enough to cover the "shape" of many lambda
  expressions and method references representing abstract concepts like
  functions, actions, or predicates
* The @FunctionalInterface is used to capture design intent (not needed by compiler).
* In documenting functional interfaces, or referring to variables
  typed as functional interfaces, it is common to refer directly to
  those abstract concepts, for example using "this function" instead of
  "the function represented by this object".
* Each functional interface has a single abstract method, called the
  functional method for that functional interface, to which the lambda
  expression's parameter and return types are matched or adapted.
* Functional interfaces can provide a target type in multiple
  contexts, such as assignment context, method invocation, or cast
  context:
  ```
  | Predicate<String> p = String::isEmpty;           // Assignment context
  | stream.filter(e -> e.getSize() > 10)...          // Method invocation context
  | stream.map((ToIntFunction) e -> e.getSize())...  // Cast context
  ```
* Defined functions in 1.8
  ```
  | ────────────────────────────────────────────┬────────────────────────────────────────────────────────────────────────────────
  |            Interface Summary                │           Interface Description
  | ────────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────
  |                   BiConsumer‹T,U›           │opt. accepting two input arguments and returns no result
  |   (|Double|Int|Long)Consumer‹T›             │opt. accepting a single (Object|double|int|long)input argument and returns no result
  | Obj(Double|Int|Long)Consumer‹T›             │opt. accepting an object-valued and a (double|int|long)-valued argument, and returns no result
  | ────────────────────────────────────────────│────────────────────────────────────────────────────────────────────────────────
  |         (|Double|Long|Int)Function‹(T,)R›   │func. that accepts an (T|double,long,int) argument and produces a result
  |        (|Double|Long)ToIntFunction          │func. that accepts a (T|double|long)argument and produces an int-valued result
  | (ToDouble|ToLong|ToInt|)BiFunction‹(T,)U,R› │func. that accepts two arguments and produces an (T,double,long,int) result.
  |            To(Double|Long)Function‹T›       │func. that produces a (double|long)-valued result
  | (Int|Long|Double)To(Int|Long|Double)Function│func. that accepts a (int|long|double) argument and produces a (int|long|double) result
  | ────────────────────────────────────────────│────────────────────────────────────────────────────────────────────────────────
  |  (|Int|Long|Double)UnaryOperator‹T›         │op. on a single (T|int|long|double) operand that produces a result of the same type
  | (Double|Long|Int|)BinaryOperator‹T›         │op. upon two (T|int|long|double) operands and producing a result of the same type
  | ────────────────────────────────────────────│────────────────────────────────────────────────────────────────────────────────
  |                 BiPredicate‹T,U›            │predicate (boolean-valued function) of two arguments
  | (|Int|Long|Double)Predicate‹T›              │predicate (boolean-valued function) of one (T|int|long|double) argument
  | ────────────────────────────────────────────│────────────────────────────────────────────────────────────────────────────────
  | (|Boolean|Int|Long|Double)Supplier(‹T›)     │supplier of (T|Boolean|Int|long|double) results
  | ────────────────────────────────────────────┴────────────────────────────────────────────────────────────────────────────────
  ```
[[java_lang.functional}]]


[[ $functional_programming }]]


