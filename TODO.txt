[[{PM.TODO]]
# TODO 

# JHipster [[{PM.low_code.jhipster,spring.101,architecture.frontend]]
* HomePage: <https://www.jhipster.tech/>
* Development platform to generate, develop and deploy
  Spring Boot + Angular / React / Vue Web applications and 
  Spring microservices.
* Created by Julien Dubois, currently (2021-06) Java Developer Advocacy
  manager at Microsoft

## JHipster install: 
1. Install a LTS node version (through `nvm`)
2. Install latest JHipster.

## JHiipster project bootstrap:

1. Choose the desired Java version. Probably latest LTS JDK supported by
   the project and library transitive dependencies. <br/>
   This means, unfortunately, JDK 11 for many "old" libraries using XML.
   Otherwise opt for JDK 21 (as of 2024-03), since it's just better.
2. Choose a desired Spring version compatible with your JDK:
   [REF](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions#jdk-version-range)
   ```
   JDK Version Range
   - Spring Framework 6.2.x: JDK 17-25 (expected)
   - Spring Framework 6.1.x: JDK 17-23
   - Spring Framework 6.0.x: JDK 17-21
   - Spring Framework 5.3.x: JDK 8-21 (as of 5.3.26)
   ```
3. Choose newest Spring-Boot version compatible with your Java version.<br/>
   ```
       \             Spring               \   Spring Boot 
   JDK  \            Version               \   Version
         \----------------------------------\---------------
         | 6.2.x   6.1.0    6.0.x   5.3.26+ | 3.0.X+ 2.7.X 
   25    | OK      ERR      ERR     ERR     | ??     ERR
   23    |  OK      OK      ERR     ERR     | ??     ERR
   21    |  OK      OK       OK      OK     | OK     ERR
   17    |  OK      OK       OK      OK     | OK     ERR
   11    | ERR     ERR      ERR      OK     | ERR    OK 
    8    | ERR     ERR      ERR      OK     | ERR    OK

   C&P from
   https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions
   We fully test and support Spring on Long-Term Support (LTS) releases of the JDK:
   currently JDK 8, JDK 11, JDK 17, and JDK 21. Additionally, there is support for
   intermediate releases such as JDK 18/19/20 on a best-effort basis, ...
   We recommend JDK 17 and 21 for production use with Spring Framework 6.x as well as 5.3.x.
   --------------------------------------------------------
    https://spring.io/projects/spring-boot#support
    Branch |Init. Relea.| End Suppor| End Comm.
    -------+------------+-----------+-----------
    3.2.x  | 2023-11-23 |2024-11-23 | 2026-02-23
    3.1.x  | 2023-05-18	|2024-05-18	| 2025-08-18
    3.0.x  | 2022-11-24	|2023-11-24	| 2025-02-24
    2.7.x  | 2022-05-19	|2023-11-24	| 2025-08-24
   ```
3.  Choose the jhipster version supporting the JDK version:<br/>
   TODO:(0) Map JDK to supported spring versions.
   ```
              |  Spring-boot | Min.Spring | JDK
    JHipster  |  version     | Supported  | Supported
    8.0.x     |   3.1.5      | ???        | ¿17,21? 
    7.9.0     |   2.7.2      |            | ¿8,11?
    7.8.0     |   2.6.6      |            | ¿8,11?

   ```

[[PM.low_code.jhipster}]]



## BascomTask Lib: 'CompletableFutures' Complement  [[{architecture.async.reactive.101,qa,PM.TODO.NOW]]
* [REF@dzone](https://dzone.com/articles/lightweight-parallel-tasks-in-java-microservices)
* lightweight task-orchestration library providing frictionless thread-level
  parallelization.
* by design, use is very close to pure Java code, including use of
  CompletableFutures (where they can be used effectively), but without
  having to rely solely on them for task-level organization of a
  codebase.
* BascomTask aims to compliment rather than replace 'CompletableFutures'
  and freely integrates with them.
[[}]]

[[{java_lang.101,PM.whats_new,PM.low_code,qa.101,]]]
## EMT4J: JDK 8 -> 11, 11 -> 17 Migration Toolkit  

* <https://www.infoq.com/news/2022/12/eclipse-migration-toolkit-java/>
* project capable of analyzing and upgrading applications from 
  Java 8 to Java 11 and from Java 11 to Java 17.
* EMT4J will support upgrading to future LTS versions.
[[}]]

## Amdahl's law [[{concurrency.101,PM.TODO]]
- Amdahl's law provides a formula to compute the theoretical maximum
  speed up by providing multiple processors to an application like:
  ```
  S(n) = 1 / (B + (1-B)/n)  : n == number-of-processors
                              B == fraction of non-paralellizable code

  S(n) ~  1 / B when big 'n' <·· maximum speedup is reciprocal to
                                 fraction of non-paralellizable code
  ```
[[}]]

## Sub-processes [[{concurrency.101,PM.TODO,PM.low_code]]
* Concurrency can be greately simplified by using OS processes
  (vs in-process threads).  This automatically avoid many/most of the problems
  with thread concurrency.
* When context switching among OS process is not an issue multi-process
  architecture is a safer, easier and faster (fewer locks) approach.
  Note for example how all modern web browser have switched to a
  multi-process (one per-tab) approach to gain estability and safety.
* Invoquing sub-processes from java, curl example:
  https://www.baeldung.com/java-curl
[[}]]

## Java 9 to 13 in a Nutshell!!!: [[{PM.TODO.NOW}]]
  https://bentolor.github.io/java9to13/#/_preview_features_preview_12


String switchExpressionPreview13(Direction way) {    
    return switch (way) {            // <·· switch as expression JDK 13+, JEP-325 JEP-354
        case N -> "Up";              // <·· No break needed                
        case S -> { yield "Down"; }  // <·· Lambdas OK using yield             
        case E, W -> "Somewhere left or right";
        default -> "Foo"             // <·· default can be ommitted for 
    };                               //    a) void return values or 
}                                    //    b) enum with every value handled

## Java Dev External Tutorials
* <https://dev.java/>
  ```
  Get Started                Go Deeper                    Resources
  -------------------------  -------------------------    ------------------------------
  Getting Started with Java  Lambda Expressions           Java News
  Java Language Basics       The Stream API               Official Java Podcast and More
  Downloading Java           The Collections Framework    JavaOne Conference 2022
  ```
* https://inside.java/

## openjdk-containers [[{DevOps.containerization.JDK,PM.TODO.now]]
* <https://www.infoq.com/presentations/openjdk-containers/>
  ```
  ... OpenJDK 13 Oracle build          :  50MBs.
  ... OpenJDK 13 Oracle build + Debian : 500MBs !!!! ¹

  ¹ Debian is embedding the debug symbols. 
    Use JLink strip-native-debug-symbols (Java 13+) to remove them
  ```
* rootless mode:
  * podman: use cgroups v2. (enabled by default on Fedora)
  * Use JDK 15+ to support cgroups v2. JDK will fallback to cgroups v1
    if v2 not present.

[[DevOps.containerization.JDK}]]

## TODO Concurrency [[{concurrency.101,PM.TODO]]
* Create zipped summary of java.util.concurrent.
* Inmmutable Objects are faster and thread-safe:
  <https://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html>
* Concurrency Classes Video
<https://www.youtube.com/watch?v=8yD0hHAz3cs&list=PLw8RQJQ8K1ySGcb3ZP66peK4Za0LKf728&index=4>
* java.util.concurrent.locks.ReentrantLock vs synchronized { ... } block
* example stack trace (extracted from Vert.X):
  ```
  | at jdk.internal.misc.Unsafe.park(Native Method)
  | at java.util.concurrent.locks.LockSupport.park
  | at java.util.concurrent.LinkedTransferQueue.awaitMatch
  | at java.util.concurrent.LinkedTransferQueue.xfer
  | at java.util.concurrent.LinkedTransferQueue.take
  | at java.util.concurrent.ThreadPoolExecutor.getTask
  | at java.util.concurrent.ThreadPoolExecutor.runWorker
  | at java.util.concurrent.ThreadPoolExecutor$Worker.run
  ```
[[concurrency.101}]]


## TODO: Java 101 [[{PM.TODO]]
  <https://www.programcreek.com/2013/03/hashmap-vs-treemap-vs-hashtable-vs-linkedhashmap/>
  <https://www.programcreek.com/2015/12/top-10-java-utility-classes/> 
  <https://www.programcreek.com/2013/09/top-9-questions-for-java-map/>
  <https://www.programcreek.com/2013/09/top-10-questions-for-java-collections/>
  <https://www.programcreek.com/2013/09/top-8-diagrams-for-understanding-java/>
  <https://www.programcreek.com/2013/09/top-10-faqs-of-java-strings/>
  <https://www.programcreek.com/2013/09/top-10-methods-for-java-arrays/>
  <https://www.programcreek.com/2013/09/top-10-websites-for-advanced-level-java-developers/>
  <https://www.programcreek.com/2013/08/top-books-for-advanced-level-java-developers/>
[[PM.TODO}]]


## https://github.com/topics/snippets-collection


## JAVA DONT's:
  https://dzone.com/articles/we-should-write-java-code-differently?edition=598293#

## Complete how to write files in Guava

## aborted compilation of a multi-module (like AbsisParentPom)  [[{devops.maven]]
  can be restarted (from the last failed module) with '--resume-from' option like:
$ $ mvn --resume-from=com.myCompany.myModule:MyArtifact \
$   $ clean install -P myProfile -DskipTests=true            [[devops.maven}]]


## Java Erasure
  Type Erasure is a technique employed the Java compiler to support the use of Generics.
<https://developer.ibm.com/recipes/tutorials/java-language-type-erasure/>

## High Perf Persistence
  https://www.reddit.com/r/linux/comments/ajkfs0/github_trimstraythepracticallinuxhardeningguide/

## Kryo serialization lib [[{]]
  - Object graph serialization library:
   <https://github.com/EsotericSoftware/kryo>
    Kryo is a fast and efficient binary object graph serialization
    framework for Java. The goals of the project are high speed, low
    size, and an easy to use API. The project is useful any time objects
    need to be persisted, whether to a file, database, or over the
    network.

     Kryo can also perform automatic deep and shallow copying/cloning.
    This is direct copying from object to object, not object to bytes to
    object.  [[}]]

## java_lang.101,qa.billion_dolar_mistake:
  Optional (1.8+)

  Optional<Integer> highestNumber
      = itemList.stream()
        .reduce((int1, int2) ->               ← Reduce returns Optional
                (int1 > int2) ? int1 : int2);

  Optional Evolution
  https://dzone.com/articles/java-optional-api-evolution?edition=699391

[[{PM.TODO]]
## Secomp JVM Integration
<https://docs.sonarqube.org/latest/requirements/requirements/>
https://en.wikipedia.org/wiki/Seccomp
http://people.apache.org/~rmuir/es-coverage/post-query-refactoring/org.elasticsearch.bootstrap/Seccomp.java.html
seccomp filter  Non-portable linux/amd64 only security protection, preventing non
                authorized calls to kernel.


By default, Elasticsearch uses seccomp filter. On most distribution
this feature is activated in the kernel. If  distributions without
this featur you have to explicitly deactivate this security layer
by updating sonar.search.javaAdditionalOpts in
$SONARQUBEHOME/conf/sonar.properties_:

sonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=false

You can check if seccomp is available on your kernel with:

$ grep SECCOMP /boot/config-$(uname -r)

If your kernel has seccomp, you will see:

CONFIG_HAVE_ARCH_SECCOMP_FILTER=y
CONFIG_SECCOMP_FILTER=y
CONFIG_SECCOMP=y
[[}]]

## Clean JSON Notes.
## <https://www.baeldung.com/java-json-binding-api>

## Compact monitoring notes: jcmd, Visual Recorder,  CRaSH shell
  Eclipse Mem.Analizer

## https://eclipse-ee4j.github.io/jakartaee-tutorial/ @ma
  https://www.uml-diagrams.org/java-ejb-uml-profile-diagram-example.html
  https://www.uml-diagrams.org/java-ejb-state-machine-diagram-example.html

## https://www.uml-diagrms.org/java-7-api-uml-package-diagram-example.html
  https://www.uml-diagrams.org/examples/java-servlet-25-api-package-diagram-example.html
  https://www.uml-diagrams.org/examples/java-servlet-30-api-package-diagram-example.html
  https://www.uml-diagrams.org/java-thread-uml-state-machine-diagram-example.html

## https://www.uml-diagrams.org/tomcat-server-uml-composite-structure-diagram-example.html
  https://www.uml-diagrams.org/web-application-clusters-uml-deployment-diagram-example.html


## https://github.com/google/re2j
  linear time regular expression matching in Java
  If you use regular expression patterns with a high degree of
  alternation, your code may run faster with RE2/J. In the worst case,
  the java.util.regex matcher may run forever, or exceed the available
  stack space and fail; this will never happen with RE2/J.

## weekly Inside Java Newscast:
  https://www.youtube.com/playlist?list=PLX8CzqL3ArzX8ZzPNjBgji7rznFFiOr58

## Who-is-Who:
  https://nipafx.dev/nicolai-parlog/
  Java developer advocate at Oracle

## plans for Java in 2022.
  https://www.youtube.com/watch?v=4Y3LijiBxRA
  focus on the four main Java projects:
  · https://openjdk.java.net/projects/amber
  · https://openjdk.java.net/projects/loom
  · https://openjdk.java.net/projects/panama/
  · https://openjdk.java.net/projects/valhalla
    The goal of Project Valhalla is to explore and incubate advanced
    Java VM and Language feature candidates such as:
    · Value types
    · Generic specialization
    · Enhanced volatiles
    · and possibly othe related topics, such as reified generics

## https://openjdk.java.net/jeps/0


## Testing add notes:    @ma
  • mockito,
    https://github.com/mockito/mockito/wiki/Features-And-Motivations
    "...Mockito has very slim API, almost no time is needed to start mocking.
      There is only one kind of mock, there is only one way of creating
      mocks. Just remember that stubbing goes before execution,
      verifications of interactions go afterwards... "

## Add notes on JUnit parameterized tests.
  https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests

## Apple has open-sourced GCGC, a tool for Java Garbage Collector (GC)
  logs visualization based on Python 3 and pandas.
  https://www.infoq.com/news/2022/01/apple-gcgc-java/
  https://github.com/apple/GCGC

## GCGC uses a Jupyter notebook to analyze and visualize GC log files. A
  notebook is provided for the analysis and it generates plots and
  tables from collected GC information.

## https://theboreddev.com/understanding-java-streams @ma?

## Data Oriented Programming in Java
   https://www.infoq.com/articles/data-oriented-programming-java/

## cache2k - Java Caching –https://cache2k.org/

## Java 18
  https://www.infoq.com/news/2022/03/java18-released/
## Failsafe 3.2 Released with New Resilience Policies
  https://www.infoq.com/news/2022/02/failsafe-resilience-3/

## 101: Six Features From Java 12 to 17 to Get Excited About!
  https://www.infoq.com/articles/six-features-jdk12-to-jdk17/

## log4j, Log4Shell: A new fix, details of active attacks, and risk mitigation recommendations
  https://www.helpnetsecurity.com/2021/12/15/log4shell-mitigation/

## E-book Collection Page | Red Hat DeveloperLot of books about quarkus!!!
  https://developers.redhat.com/e-books
## Introducing the KivaKit Framework
  https://www.infoq.com/articles/introducing-kivakit/

## concurrency, 101? Measuring ForkJoinPool Parallelism
  https://www.javaspecialists.eu/archive/Issue297-Measuring-ForkJoinPool-Parallelism.html

## Why SOLID principles are still the foundation for modern software architecture [[{]]
https://stackoverflow.blog/2021/11/01/why-solid-principles-are-still-the-foundation-for-modern-software-architecture/ 
  - Single responsibility principle Original definition: “There should
    never be more than one reason for a class to change.”If you write a
    class with many concerns, or “reasons to change”, then you need
    to change the same code whenever any of those concerns has to change.
    This increases the likelihood that a change to one feature will
    accidentally break a different feature.
  - Open-closed principle Original definition: “Software entities should
    be open for extension, but closed for modification.”This is part of
    the design of languages like Java—you can create classes and extend
    them (by creating a subclass), but you can’t modify the original
    class. One reason for making things “open for extension” is to
    limit the dependency on the author of the class—if you need a
    change to the class, you’d constantly need to ask the original
    author to change it for you, or you’d need to dive into it to
    change it yourself. What’s more, the class would start to
    incorporate many different concerns, which breaks the single
    responsibility principle.The reason for closing classes for
    modification is that we may not trust any and all downstream
    consumers to understand all the “private” code we use to get our
    feature working, and we want to protect it from unskilled hands

  - Liskov substitution principle Original definition:
   “If S is a subtype of T, then objects of type T may be replaced with
    objects of type S without altering any of the desirable properties of the program.”
  - Interface segregation principle Original Definition:
    “Many client-specific interfaces are better than one
    general-purpose interface.”In OO, you can think of this as
    providing a “view” into your class. Rather than giving your full
    implementation to all your clients, you create interfaces on top of
    them with just the methods relevant to that client, and ask your
    clients to use those interfaces. 
  - Dependency inversion principle Original definition:
   “Depend upon abstractions, not concretions.”In OO, this means
    that clients should depend on interfaces rather than concrete classes
    as much as possible. This ensures that code is relying on the
    smallest possible surface area—in fact, it doesn’t depend on code
    at all, just a contract defining how that code should behave. As with
    other principles, this reduces the risk of a breakage in one place
    causing breakages elsewhere accidentally.
[[}]]

[[{troubleshooting.memory,jvm.gc.zgc,jvm.gc.gc1,jvm.gc.parallel,jvm.gc.serial]]
## Eclipse Jifa Analytics 
* <https://www.infoq.com/news/2022/02/eclipse-jifa/> 

* Jifa: analytic engine with:
  * Heap Dump Analysis based on Eclipse MAT, with 
    detailed documentation about analyzing heap dumps.
  * GC Log Analysis service supporting G1, Parallel GC,
    Serial GC, CMS and ZGC garbage collection algorithms.
* Can process logs from Java 8 and 11, support for Java
  17 under development

* Frontend based on Vue 2.0 frontend 
* backend based on VertX.

* Can be deployed as "1 worker", "1 master + N workers" or 
  "Kubernetes".
[[troubleshooting.memory}]]

[[}]]

[[{scalability.JVM.shared_JIT_server]]
## Azul Launches Java Cloud Compiler

* <https://www.infoq.com/news/2022/02/azul-cloud-compiler/>

  Azul Intelligence Cloud introduces a third option that bridges the
  benefits of JIT (peak performance) with the benefits of AOT (fast
  startup time).
* When running the same code across many systems, the JRE
  communicates with an organization’s shared JIT server so that
  each JRE does not need to do the same observation and optimization
  cycle.
* The cloud compiler can then also perform deeper analysis, using
   CPU resources that are isolated from the running application.

* ... In tests described at QCon, time to peak performance was
  was between 25 to 100% faster.
[[scalability.JVM}]]

[[{architecture.async.reactive.rxjava]]
## RxRelay: progresively adapt non-Rx to Rx.

* <https://github.com/JakeWharton/RxRelay>

* "Subjects" types are useful to bridge the gap between non-Rx APIs.
  However, they are stateful in a damaging way:<br/>
  when they receive an onComplete or onError they no longer become
  usable for moving data.<br/>
  This is the observable contract and sometimes it is the desired behavior.
  Most times it is not.
* "Relays" are simply Subjects without the aforementioned property.
  They allow you to bridge non-Rx APIs into Rx easily, and without
  the worry of accidentally triggering a terminal state.

* As more of your code moves to reactive, the need for Subjects and 
  Relays should diminish.  In the transitional period, or for quickly 
  adapting a non-Rx API, Relays provide the convenience of Subjects 
  without the worry of the statefulness of terminal event behavior.
[[architecture.async.reactive.rxjava}]]


[[{architecture.async.reactive.101,standards.AsyncAPI,qa.*,PM.TODO]]
## AsyncAPI.org 
 
* <https://www.asyncapi.org/>
- Building the future of event-driven architectures.
- Open source tools to easily build and maintain your event-driven architecture.
- All powered by the AsyncAPI specification, the industry standard for defining
  asynchronous APIs.
[[}]]

[[{security.cryptography.signedJARs,security.101,devops,PM.TODO]]
## Sign/Verify JARs 
* <https://docs.oracle.com/javase/9/tools/jarsigner.htm>

  ```
  $ jarsigner file01.jar $keystore_alias  #< Sign Jar. 
                                          #  Opt. -sigalg <preferred sign. algorithm> 
  $ jarsigner -verify file01.jar          #< Verify jar
  ```
[[security.cryptography.signedJARs}]]

[[{scalability.native_code.JNR]]
## JNR(JNI/UNIX friendly)

* load native libraries without writing JNI code by hand.
* used by Netty and others...
* <https://github.com/jnr/jnr-ffi>
* <https://github.com/jnr/jnr-unixsocket>
   jnr-unixsocket: UNIX domain sockets (AF_UNIX) for Java
* <https://github.com/jnr/jnr-enxio>
  Java Native Runtime Enhanced X-platform I/O
* <https://github.com/jnr/jnr-x86asm>
  Pure java x86 and x86_64 assembler
* <https://github.com/jnr/jnr-a64asm>
  AArch64 assembler for the Java Native Runtime
* <https://github.com/jnr/jnr-process>
  A ProcessBuilder look-alike based entirely on native POSIX APIs
* ...
[[scalability.native_code.JNR}]]


[[{security.aaa,PM.TODO]]
## JAAS 

* <https://en.wikipedia.org/wiki/Java_Authentication_and_Authorization_Service>
* In UNIX, by default we authenticate against /etc/passwd, but the
  (P)lugable (A)uthentication (M)odule (PAM), allows to check against other sources.
* JAAS is similar to PAM for Java, allowing to offer a common AAA front-end to
  file/ddbb/LDAP/... backends.
[[}]]

[[{java_lang.transpiler.JavaPoet,PM.TODO]]
## JavaPoet 

* <https://github.com/square/javapoet>
* Library/API for generating .java source files.
* Useful for things like:
  - annotation processing
  - interacting with metadata files (e.g., database schemas, protocol formats).
  - Transpiler (language A → Java Src ).
    keeping a single source of truth for the metadata .
[[java_lang.transpiler.JavaPoet}]]

## 9 Profiling tools [[{java_lang.profiling,doc_has.comparative,PM.TODO]]

* <https://blog.idrsolutions.com/2014/06/java-performance-tuning-tools/>
[[}]]

[[{devops.jEnv,qa.UX,troubleshooting.jEnv,PM.TODO]]
## jEnv

* <http://www.jenv.be/>
* tool to help you forget how to set the JAVA_HOME environment variable.

 ```
 $ jenv add /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
   oracle64-1.6.0.39 added
 $ jenv add /Library/Java/JavaVirtualMachines/jdk17011.jdk/Contents/Home
   oracle64-1.7.0.11 added

 $ jenv versions  # <·· List managed JDKs
   system
   oracle64-1.6.0.39
   * oracle64-1.7.0.11 (set by /Users/hikage/.jenv/version)

 $ jenv global oracle64-1.6.0.39 # Configure global version
 $ jenv local oracle64-1.6.0.39  # Configure local version (per directory)
 $ jenv shell oracle64-1.6.0.39  # Configure shell instance version
 ```
[[devops.jEnv}]]

[[{architecture.async.reactive.rxjava,doc_has.comparative,qa,quarkus.mutiny,vertx.mutiny,PM.TODO]]
## Mutiny Simplified Reactive Programming

* <https://smallrye.io/smallrye-mutiny/>

Why "yet another reactive framework":

... many developers lost in an endless sequence of flatMap and
  hundreds of operators. 
... Mutiny does focusing only on the most used operators with a 
more guided API, which avoids having classes with hundreds of
methods that cause trouble for even the smartest IDE.
 A PhD in functional programming is not required. [[{doc_has.keypoint}]]

* Mutiny has built-in converters from/to other reactive 
  libraries, so you can always pivot.
* Based on the Reactive Streams protocol, <https://www.reactive-streams.org/>
  and Java flow <https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/Flow.html>, it can be integrated with any other reactive programming library.

* Event driven.
* Explicit easy to navigate API.
* Non-blocking I/O
* Quarkus and Vert.x native.

  ```
  | Uni<String> request = makeSomeNetworkRequest(params);
  | 
  | request.ifNoItem().after(ofMillis(100))
  |     .failWith(() -> new TooSlowException("💥"))
  |     .onFailure(IOException.class).recoverWithItem(fail -> "📦")
  |     .subscribe().with(
  |         item -> log("👍 " + item),
  |          err -> log(err.getMessage())
  |     );
  ```
[[}]]


[[{scalability.native_code.Netty,architecture.async.reactive.io.network,doc_has.comparative,]]
## Netty 
- "One Framework to rule them all" by Norman Maurer
  <https://www.youtube.com/watch?v=DKJ0w30M0vg>

* Netty is the base of any modern Java stack (Tomcat, Jetty, Apache Kafka, Pulsar, ...)
  due to its integration with native and optimized OS I/O stack.
[[scalability.native_code.Netty}]]


## Apache MINA

[[{PM.radar.mina,security.cryptography.ssh,protocol.ssh]]
* Apache MINA vs Netty: https://www.youtube.com/watch?v=A2pWsxPWJuc
* network application framework which helps users develop high
  performance and high scalability network applications easily. It provides an
  abstract event-driven asynchronous API over various transports such as TCP/IP
  and UDP/IP via Java NIO.
* Apache MINA is often called:
  - NIO framework library
  - client server framework library, or
  - a networking socket library
* Apache MINA comes with many subprojects :
  - Asyncweb : An HTTP server build on top of MINA asynchronous framework
  - FtpServer : A FTP server
  - SSHd : A Java library supporting the SSH protocol
  - Vysper : An XMPP server
[[PM.radar.mina}]]

[[{data_structures.bytes]]
## bytes java 

* <https://github.com/patrickfav/bytes-java>
* utility library that makes it easy to create, parse, transform,
  validate and convert byte arrays in Java.
* It's main class "Bytes" is a collections of bytes and the main API.
  It supports endianness as well as copy-on-write and mutable access,
  so the caller may decide to favor performance.
  * This can be seen as combination of the features provided by BigInteger,
    ByteBuffer but providing a lot of additional features on the micro and
    macro level of byte arrays (similar to Okio's ByteString). 
* Main goal: **minimize the need to blindly paste code snippets from stackoverflow**.
  [[{qa.UX}]]

Main features include:
* Creation from a wide variety of sources: multiple arrays, integers, streams,
  random, strings, files, uuid, ...
* Transformation with many built-in: append, xor, and, hash, shifts, shuffle,
  reverse, checksum, ...
* Validators with the ability to arbitrarily combine multiple ones 
  with logical expressions
* Parsing and Encoding in most common binary-to-text-encodings: 
  hex, base32, base64, ...
* Immutable, Mutable and Read-Only versions
* Handling Strings with encoding and normalizing strings for arbitrary charset
* Utility Features like indexOf, count, isEmpty, bitAt, contains ...
* Flexibility provide your own Transformers, Validators and Encoders
[[data_structures.bytes}]]

[[{java_lang.configuration,standards.JSR330,qa,doc_has.comparative,Spring,standards.JSR330,doc_has.comparative]]
## Spring vs Google Guice vs Dagger

* <https://www.baeldung.com/guice-spring-dependency-injection>

* <http://www.theserverside.com/feature/Spring-vs-Guice-The-Clash-of-the-IOC-Containers>
  It's important to realize that Dagger was created after Guice, by one
  of Guice's creators ("Crazy Bob" Lee) after his move to Square.
  ```
  | · 2002-10 Spring:
  | · 2007-03 Guice (by Google)
  | · 2009-10 JSR-330: formalized javax.inject annotations
  |           (with heavy input from Google (Bob Lee), Spring, ...)
  |   Provider<MyTargetBean>
  |   C&P from <https://github.com/google/guice/wiki/JSR330>
  |   .. standardizes annotations like @Inject and the Provider
  |     interfaces for Java platforms.
  |   .. It doesn't currently specify how applications are configured,
  |      so it has no analog to Guice's modules.
  |   <http://javax-inject.github.io/javax-inject/>
  | · 2013-05 Dagger 1 (by Square), deprecated on September 15, 2016.
  | · 2015-04 Dagger 2 (by Google).
  ```
[[java_lang.configuration}]]

[{security.cryptography,security.secret_mng,security.aaa,PM.TODO]]

## XML Stream parsing [[{persistence.xml,PM.TODO]]

* TODO: Write summary of best XML libraries.

* <https://github.com/FasterXML/aalto-xml>
* <http://www.studytrails.com/java/xml/aalto/java-xml-aalto-stax-async-basic/>
* <https://docs.oracle.com/javase/tutorial/jaxp/stax/why.html>
* <https://gist.github.com/shvalb/38cc8f454ee84a2032d2b341a9b8aeae>
* <http://www.studytrails.com/java/xml/aalto/java-xml-aalto-introduction/>
* <https://gist.github.com/shvalb/38cc8f454ee84a2032d2b341a9b8aeae>
[[}]]

## Example JVM Server Optimized config  [[{scalability.jvm,PM.TODO]]

  ```
  | Server version:        Apache Tomcat/8.x
  | Server built:          unknown
  | Server number:         8.0.x
  | OS Name:               Linux
  | OS Version:            3.10.0-1062.9.1.el7.x86_64
  | Architecture:          amd64
  | Java Home:             /ec/local/appserver/u000/app/java/jdk1.8.0_121-strong/jre
  | JVM Version:           1.8.0_121-b13
  | JVM Vendor:            Oracle Corporation
  | Command line argument: 
  |   -Djava.util.logging.config.file=.../logging.properties
  |   -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager
  |   -Djdk.tls.ephemeralDHKeySize=2048                   [[{security.cryptography.DH}]]
  |   -Xms1536m                 <·· make Xms == Xmx to avoid relocations [{perfomance.memory}]]
  |   -Xmx1536m                                          
  |   -XX:MetaspaceSize=512m    <·· make MetaspaceSize == MaxMetaspaceSize  [[{performance.jvm}]]
  |   -XX:MaxMetaspaceSize=512m
  |   -XX:MaxDirectMemorySize=1G <·· JDK 1.4+ Direct memory used for NIO [[{IO.scalability}]]
  |   -XX:+UseParallelGC
  |   -XX:ParallelGCThreads=4
  |   -XX:+UseParallelOldGC
  |   -XX:LargePageSizeInBytes=4m
  |   -XX:-BindGCTaskThreadsToCPUs
  |   -Djava.awt.headless=true
  |   -Dsun.net.inetaddr.ttl=60
  |   -Dsun.net.inetaddr.negative.ttl=5
  |   -Djava.io.tmpdir=/_tmp
  |   -Dfile.encoding=UTF-8
  |   -XX:ErrorFile=./logs/fatal_error/hs_err_pid%p.log
  |   -Dcom.sun.management.jmxremote=true
  |   -Dcom.sun.management.jmxremote.login.config=Tomcat
  |   -Djava.security.auth.login.config=..../login.config
  |   -Dcom.sun.management.jmxremote.access.file=.../jmxremote.access
  |   -Dcom.sun.management.jmxremote.ssl=false
  |   -Djava.rmi.server.hostname=tcsn0201.cc.cec.eu.int
  |   -Dcom.sun.management.jmxremote.ssl.need.client.auth=false
  |   -verbose:gc
  |   -Xloggc:....API_TEST-gc.log
  |   -XX:+PrintGCDetails
  |   -XX:+PrintGCTimeStamps
  |   -XX:+PrintTenuringDistribution
  |   -XX:+PrintGCApplicationConcurrentTime
  |   -XX:+PrintGCApplicationStoppedTime
  |   -Djava.endorsed.dirs=.../tomcat8/endorsed
  |   -Dcatalina.base=...
  |   -Dcatalina.home=...
  |   -Djava.io.tmpdir=.../temp
  ```
[[}]]

## Java on Visual Code Studio

* <https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-february-2020/?WT.mc_id=social-reddit-marouill>
[[}]]


## JHSDB [[{java_lang.debugging,monitoring.forensic,PM.TODO]]

* <https://docs.oracle.com/en/java/javase/12/tools/jhsdb.html>
* tool to attach to a Java process or to a core dump
  from a crashed HotSpot Java Virtual Machine (JVM).
* works as a Serviceability Agent (SA) tool, JDK component used to
  provide snapshot debugging, performance analysis and to get an
  in-depth understanding of the Hotspot JVM and the Java application 
  executed by the Hotspot JVM.
* Compared to gdb, jhsdb, have inbuilt understanding of the data
  structures in Hotspot, being  able to throw insights on the
  Java application being executed. 
  * jhsdb knows about the locations and address ranges of crucial 
    components of the JVM like the Java heap, heap generations,
    regions, code cache, etc.
[[}]]

[[{architecture.async.reactive.servlets,standards.jee.servlets,PM.TODO]]
## Async Servlets 3.0+
* <https://www.infoworld.com/article/2077995/java-concurrency-asynchronous-processing-support-in-servlet-3-0.html>
[[}]]

[[{devops.containarization,standards.jee.war,devops.k8s]]
## Deplo WAR to k8s with JKube 

<https://developers.redhat.com/blog/2020/07/27/deploy-your-java-web-application-into-the-cloud-using-eclipse-jkube/>

## JKube Maven  converts war (dependent of a container) into cloud-native app.

  - pom.xml:
    ```
    <!-- ... -->
    <packaging>war</packaging>
    <!-- ... -->
    <properties>
      <maven.compiler.source>11</maven.compiler.source>
      <maven.compiler.target>11</maven.compiler.target>
      <failOnMissingWebXml>false</failOnMissingWebXml>  ← configure maven-war-plugin so
                                                          that it won't fail due
      <!-- ... -->                                        to a missing web.xml file.

      <jkube.enricher.jkube-service.type>NodePort</jkube.enricher.jkube-service.type>
      └────────────────────────────────┬────────────────────────────────────────────┘
      configure JKube to create service-resource manifest using NodePort as the spec.type.

    </properties>
    <dependencies>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>${version.spring}</version>
      </dependency>
      <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>4.0.1</version>
        <scope>provided</scope>
      </dependency>
    </dependencies>
    <build>
      <plugins>
        <plugin>
          <groupId>org.eclipse.jkube</groupId>
          <artifactId>kubernetes-maven-plugin</artifactId> ← Alt: openshift-maven-plugin.
          <version>${version.jkube}</version>
        </plugin>
        <!-- ... -->
      </plugins>
    </build>
    ```

## example project contains three Java classes:

* ExampleInitializer: replaces standard WEB-INF/web.xml
  registering Spring's DispatcherServlet directly.
  ```
     final AnnotationConfigWebApplicationContext context
            = new AnnotationConfigWebApplicationContext();
     context.register(ExampleConfiguration.class);
     context.setServletContext(servletContext);
     final ServletRegistration.Dynamic dsr
            = servletContext.addServlet("dispatcher",
              new DispatcherServlet(context));
     dsr.setLoadOnStartup(1);
     dsr.addMapping("/");
  ```

* ExampleConfiguration: Spring-specific config enabling Spring MVC.

* ExampleResource: standard Spring @RestController.

- Deploy to Kubernetes:
  ```
  | $ mvn clean package # ← generate war in target/
  | $ mvn k8s:build     # ← Build OCI image (webapp/example:latest)
  |                     #   using jkube/jkube-tomcat9-binary-s2i by default.
  |                     #   Alternatives like Jetty can be used
  | $ mvn k8s:resource  # ← create required cluster config resource manifests
  | $ mvn k8s:apply     # ← apply to (kubectl configured) cluster
  | $ kubectl get pod   # ← Verify that app is running
  | $ mvn k8s:log       # ← Retrieve app Logs
  ```
[[}]]



[[{architecture.distributed,PM.low_code,PM.TODO]]

## Jrpip: Low code RMI 

"...Let developers concentrate on logic vs network plumbing and TCP errors..."

- Jrpip mplements remote interface method invocation which allows different
  Java processes to interact with one another.
- designed to increase developer efficiency by providing useful features, such as
  the ability to deploy in any servlet container, interface
  implementation that doesn’t require RemoteException and automatic
  retries with once-execute semantics.
- efficient binary protocol that is streamed, reducing memory
  consumption and garbage collector issues.
- "Competes with gPRC (multi stack -Java, C, Rust, ...) 
[[}]]

[{messaging.mail.smtp,security.notifications]]
## Sending mail  with SMTP 

* Based on AWS guide
  <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-using-smtp-java.html>
  but applying to any standard SMTP e-mail server.

* Dependencies:
  ```
  | <dependency>
  |     <groupId>com.sun.mail</groupId>
  |     <artifactId>javax.mail</artifactId>
  |     <version>1.6.2</version>
  | </dependency>
  ```

  ```
  | import java.util.Properties;
  |
  | import javax.mail.Message;
  | import javax.mail.Session;
  | import javax.mail.Transport;
  | import javax.mail.internet.InternetAddress;
  | import javax.mail.internet.MimeMessage;
  |
  | public class SendMailThroughSMTP {
  |   static final String
  |     FROM     = "...", // ← in AWS this address must be verified
  |     FROMNAME = "...", // ← Human readable FROM
  |     TO       = "...", // ← in AWS if sending account is still in the
  |                       //   sandbox this address must be  case-sensitive  verified.

  |     CONFIGSET = "ConfigSet", // ← Configuration Set name used for this message.
  |                              //  If commented out remove header below.   *
  |     BODY      = String.join( "\n",
  |         "<h1>header</h1>", "html line2", "html line3", "..." ),
  |     SMTP_HOST = "email-smtp.us-west-2.amazonaws.com",
  |     SMTP_USERNAME = "..." , //  *
  |     SMTP_PASSWORD = "...";
  |     // SMTP_HOST REF: https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html#region-endpoints

  |   static final int PORT = 587; // The port you will connect to on the Amazon SES SMTP endpoint.
  |
  |   public static void main(String[] args) throws Exception {
  |     final Properties props = System.getProperties();
  |     props.put("mail.smtp.port"           , PORT  );
  |     props.put("mail.transport.protocol"  , "smtp");
  |     props.put("mail.smtp.starttls.enable", "true");
  |     props.put("mail.smtp.auth"           , "true");
  |     Session session = Session.getDefaultInstance(props); // ← represents mail session
  |
  |     final MimeMessage
  |       msg = new MimeMessage(session);    // ← Build message
  |       msg.setFrom(new InternetAddress(FROM,FROMNAME));
  |       msg.setRecipient(
  |              Message.RecipientType.TO,
  |              new InternetAddress(TO));
  |       msg.setSubject(MAIL_SUBJECT);
  |       msg.setContent(HTML_BODY,"text/html");
  |       msg.setHeader(                     // Remove if not using a configuration set
  |         "X-SES-CONFIGURATION-SET",
  |         CONFIGSET);
  |
  |     final Transport transport =            // ← Create transport
  |       session.getTransport();
  |
  |     try { // Send the message.
  |       transport.connect(
  |         SMTP_HOST, SMTP_USERNAME, SMTP_PASSWORD); // Connect to SMTP using username/pass
  |       transport.sendMessage(msg, msg.getAllRecipients());    // Send email.
  |     } catch (Exception ex) {
  |       // process and rethrow
  |     }
  |     finally { transport.close(); }
  |   }
  | }
  ```
* More info at
  <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html>

* WARN: Do not confuse SMTP credentials to (AWS specific) IAM credentials.
  SMTP username credential is 20-chars (letters and numbers)
[[}]]

## JVM Anatomy [[{jvm.101,PM.TODO]]
* <https://shipilev.net/jvm-anatomy-park/>
* <https://shipilev.net/jvm-anatomy-park/22-safepoint-polls/>
[[}]]

## Java Class Library (JCL, rt.jar) [[{java_lang.101,PM.TODO]]

* rt.jar contains the Java Class Library (JCL)
<https://en.wikipedia.org/wiki/Java_Class_Library>

* The Java Class Library (JCL) is a set of dynamically loadable
  libraries that Java applications can call at run time. Because the
  Java Platform is not dependent on a specific operating system,
  applications cannot rely on any of the platform-native libraries.
  Instead, the Java Platform provides a comprehensive set of standard
  class libraries, containing the functions common to modern operating
  systems.
* Java Class Library (JCL) is almost entirely written in Java, except
  for the parts that need direct access to the hardware and operating
  system (such as for I/O or bitmap graphics). The classes that give
  access to these functions commonly use Java Native Interface wrappers
  to access operating system APIs.
* The Java Class Library (rt.jar) is located in the default bootstrap
  classpath[1] and does not have to appear in the classpath declared
  for the application. The runtime uses the bootstrap class loader to
  find the JCL.

  The Java Module System (part of the Java 9 release) broke the
  monolithic "rt.jar" JAR file and modularized the JCL itself in
  several modules with specified dependencies.
[[}]]

## Java Threading resources [[{concurrency.101,PM.TODO]]

* <https://avaldes.com/?s=java+thread>
* <https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Lock.html>
* Java Thread Deadlock Example and Thread Dump Analysis using VisualVM
* Java Thread Starvation and Livelock with Examples
* Examining Volatile Keyword with Java Threads
* Java Threads Wait, Notify and NotifyAll Example
[[}]]

[[{architecture.async.reactive.io,persistence.fs,PM.TODO]]
## JimFS 

* <https://github.com/google/jimfs>

Jimfs supports almost all the APIs under java.nio.file:
- Create/delete/move/Copy files/dirs.
- Read/write files with FileChannel/SeekableByteChannel/InputStream/OutputStream/...
- Symbolic links.
- Hard links to regular files.
- SecureDirectoryStream, for operations relative to an open directory.
- Glob and regex path filtering with PathMatcher.
- Watching for changes to a directory with a WatchService.
- Built-in (file) attribute views that can be supported include
  "basic", "owner", "posix", "unix", "dos", "acl" and "user".

- Simple ussage:
  ```
  | import com.google.common.jimfs.Configuration;
  | import com.google.common.jimfs.Jimfs;
  | ...
  |
  | // For a simple file system with Unix-style paths and behavior:
  | final FileSystem fs = Jimfs.newFileSystem(Configuration.unix());
  | final Path foo = fs.getPath("/foo");
  | Files.createDirectory(foo);
  | final Path hello = foo.resolve("hello.txt");
  | Files.write(hello, ImmutableList.of("hello world"), StandardCharsets.UTF_8);
  ```
[[}]]

[[{persistence.session,scalability.cache,architecture.distributed]]
## Storing HttpSessions to Redis

* <https://github.com/AmadeusITGroup/HttpSessionReplacer>
* AmadeusITGroup/HttpSessionReplacer: Store JEE Servlet HttpSessions in Redis
[[}]]

## Dekorate: k8s annotations [[{devops.k8s,PM.backlog]]

* <https://developers.redhat.com/blog/2021/03/17/using-dekorate-to-generate-kubernetes-manifests-for-java-applications/>

Example JAVA ANOTATION INPUT:


  ```
  @KubernetesApplication(
     name = "hello-world-fwless-k8s",
     ports = @Port(name = "web", containerPort = 8080),
     expose = true,
     host = "fw-app.127.0.0.1.nip.io",
     imagePullPolicy = ImagePullPolicy.Always
  )

  Generates:
  ./target/classes/META-INF/dekorate/kubernetes.yml 

  $ kubectl apply \
    -f target/classes/META-INF/dekorate/kubernetes.yml 
  ```

* Integration with Jib to generate OCI images is also available.
[[}]]

[[{java_lang.profiling,PM.radar]]
## Yourkit profiler 

* <https://www.yourkit.com/java/profiler/features/>
* Yourkit: commercial (non OOSS) profiler with advanced features
* free licenses for non-commercial open source projects.
  Special offers for educational and scientific organizations.
* Tight integration with your IDE
* "Smart what if"  allows to evaluate performance gains of supposed optimizations
 without re-profiling the application.
* CPU call tree
* Flame graphs
* Database queries and web requests:
  - display slow SQL queries and web requests.
  (support for MongoDB, Cassandra, HBase,...)
* Memory profiling: object heap, traversing of object graph.
  The Profiler chooses the best way to show you a content of a HashMap, String, ... ).
  For each object you can see how much memory it retains, and what happens when
  particular reference in object graph does not exist.
  This saves time, and lets you estimate the expected memory leak fix without changing the code.
* Report inefficient collections and I/O operations.
* Find/Resolve thread synchronization issues.
  It is possible to combine thread states with HTTP requests and SQL queries to get
  the full picture how the requests are processed by your applications.
* Exception profiling: Massive exception throwing is a common but often hidden
  performance problem.
* Deobfuscate the code on the fly restoring original class, method and field names of
  applications obfuscated with ProGuard, yGuard, Zelix KlassMaster, Allatori, and other
  popular Java obfuscators.
* control profiling overhead up to production profiling.
* Extensible API to create custom probes.
* Command line support. (UI free).
[[}]]

[[{scalability.JVM.LMAX,concurrency,PM.radar]]
## LMAX Disruptor: High Perf Inter-Thread Messaging Library 
<https://lmax-exchange.github.io/disruptor/>

* See also:
  <https://www.infoq.com/articles/High-Performance-Java-Inter-Thread-Communications/>,
  <https://www.infoq.com/news/2013/05/lmax-zing>

* LMAX Exchange Getting Up To 50% Improvement in Latency From Azul's Zing JVM
  Interesting points about GC tunning.
[[scalability.JVM.LMAX}]]

## Excellent Java Blog (spanish)
* <https://picodotdev.github.io/blog-bitix/tags/java/>Excellent Java Blog (spanish)

## Awesome Java
* <https://github.com/akullpp/awesome-java> 

[[{qa.testing,cloud.aws,devops,PM.backlog]]
## Amazon CodeGuru 
- Powered by IA.
- CodeGuru consists of two components
– Amazon CodeGuru Profiler:
  helps developers find an application’s most expensive lines
  of code along with specific visualizations and recommendations
  on how to improve code to save money.
- Amazon CodeGuru Reviewer:
  helps enhance the quality of code by scanning for critical issues,
  identifying bugs, and recommending how to remediate them.
  ```
  ┌> Write Code
  ·    |
  ·    v
  ·  Review Code  ← CodeGuru Reviewer
  ·    |
  ·    v
  ·  Test App     ← CodeGuru Profiler
  ·    |
  ·    v
  ·  Deploy App
  ·    |
  ·    v
  ·  Run App      ← CodeGuru Profiler
  ·    |
  └····┘
  ```

- Profiler supports application written
in Java virtual machine (JVM) languages such as Clojure,
JRuby, Jython, Groovy, Kotlin, Scala, and Java.
- Reviewer’s bug-fixing recommendations currently support
Java code stored in GitHub, AWS CodeCommit, or Bitbucket.
[[}]]


[[{java_lang.101.best_patterns,qa.best_patterns]]
##  Entity Component System (ECS): composition over inheritance

* <https://www.reddit.com/r/java/comments/z5yj0i/dominion_vs_artemis_the_missing_benchmarks_link/>
Entity Component System (ECS) architecture promotes data-oriented
programming. It’s all about data (components) andfirst-class
functions (systems) that operate on data.This means that, unlike OOP,
data and operations are not encapsulated together in objects, which
are called entities inECS.Entities model the business objects of the
user application, and the entity promotes “composition over
inheritance” bygrouping a dynamic list of components to define its
specific features.
[[java_lang.101}]]

## Spring Framework 6.x

<https://github.com/spring-projects/spring-framework/wiki/What%27s-New-in-Spring-Framework-6.x/>
<https://www.reddit.com/r/java/comments/z1s58l/spring_6_migration_guide/>
<https://springframework.guru/getting-ready-for-spring-framework-6/>

[[{jvm.alpaquita]]
## Alpaquita Linux by BellSoft 

* <lhttps://www.infoq.com/news/2022/10/java-news-roundup-sep26-2022/>

* operating system tailored for the Java programming language. 
* Based on Alpine Linux, 
* enables the effective containerization of Java
  applications developed with Liberica JDK; 
* better performance
* allows developers to take advantage of native image technology 
  through the Liberica Native Image Kit.
[[jvm.alpaquita}]]

## Project Loom: Java virtual Threads.

* <https://www.infoq.com/presentations/loom-java-concurrency/>

[[{architecture.API_management]]
## Apache ShenYu: Java Responsive API Gateway Announced as Apache Top-Level Project

* <https://www.infoq.com/news/2022/09/shenyu-gateway/>
[[architecture.API_management}]]

## JEP 429: Extent-Local Variables to Promote Immutability in Java

* <https://www.infoq.com/news/2022/09/extent-local-variables-java/>

## "Programmer's Guide to JDK Flight Recorder" 
   <https://youtu.be/K1ApBZGiT-Y>

## quartz alternatives, batch, schedule task runners "cron".

* <https://www.reddit.com/r/java/comments/zariyv/is_quartz_abandoned/See alternatives>

[[{]]
## JVM Options Explorer - OpenJDK11 HotSpot 101

https://chriswhocodes.com/ 
[[}]]

[[{scalability.cache]]
## Caffeine

* <https://github.com/ben-manes/caffeine  >

* high performance, near optimal (local vs distributed) caching library.

  ```
  LoadingCache<Key, Graph> graphs = Caffeine.newBuilder()
      .maximumSize(10_000)
      .expireAfterWrite(Duration.ofMinutes(5))
      .refreshAfterWrite(Duration.ofMinutes(1))
      .build(key -> createExpensiveGraph(key));
  ```

Features:
- automatic loading of entries into cache: optionally asynchronously
- size-based eviction: when a maximum is exceeded based on frequency and recency
- time-based expiration of entries, measured since last access or last write
- asynchronously refresh when the first stale request for an entry occurs
- keys automatically wrapped in weak references
- values automatically wrapped in weak or soft references
- notification of evicted (or otherwise removed) entries
- writes propagated to an external resource
- accumulation of cache access statistics

Community provided integration:
- Play Framework: High velocity web framework
- Micronaut: A modern, full-stack framework
- Spring Cache: As of Spring 4.3 & Boot 1.4
- Quarkus: Supersonic Subatomic Java
- Scaffeine: Scala wrapper for Caffeine
- ScalaCache: Simple caching in Scala
- Camel: Routing and mediation engine
- JHipster: Generate, develop, deploy
- Aedile: Kotlin wrapper for Caffeine
  [[}]]


[[{java_lang.profiling]]
## Profiler in 240 Lines of Pure Java 

* <https://foojay.io/today/writing-a-profiler-in-240-lines-of-pure-java/>

* JVM safepoint: point in time where the JVM has a known defined
  state, and all threads have stopped. JVM itself needs safepoints to
  do major garbage collections, Class definitions, method
  deoptimizations, and more. Threads are regularly checking whether
  they should get into a safepoint, for example, at method entry, exit,
  or loop backjumps. A profiler that only profiles at a safepoint have
  an inherent bias because it only includes frames from the locations
  inside methods where Threads check for a safepoint. The only
  advantage is that the stack-walking at safepoints is slightly less
  error-prone, as there are fewer mutations of heap and stack.
  Further read: Java Safepoint and Async Profiling by Seetha Wenner,
  the more technical one by JP Bempel, or the classic article
  Safepoints: Meaning, Side Effects and Overheads by Nitsan Wakart. To
  conclude: Safepoint-biased profilers don't give you a holistic view
  of your application, but can still be helpful to analyze major
  performance issues where you look at the bigger picture.This article
  aims to develop a tiny Java profiler in pure Java code that everyone
  can understand. Profilers are not rocket science, and ignoring
  safepoint-bias, we can write a usable profiler that outputs a flame
  graph in just 240 lines of code.You can find the whole project on
  GitHub.
[[}]]

[[{scalability.jvm.virtualthreads,scalability.jvm.101]]
## JEP 444: Virtual Threads (JDK 21)

* <https://www.infoq.com/news/2023/04/virtual-threads-arrives-jdk21/>

Java now has two types of threads:
- traditional threads, platform or OS "wrapper" threads
- virtual threads:  "many" virtual threads per OS thread.
  OFFERING COMPATIBILITY WITH EXISTING JAVA CODE

 path to benefit from enhanced performance and resource
utilization. 
[[scalability.jvm.virtualthreads}]]

[[{scalability.network.chronicle_wire,io.serialization,performance.serialization,io.scalability,]]
## Chronicle Wire: Billions of Messages Per Minute Over TCP/IP
* <https://www.infoq.com/articles/billions-messages-minute/>

  ... provides high-performance transformations of state in Java
objects between their internal JVM representation and a format
that allows that state to be persisted or communicated to another
Java process.  

  It grew from Chronicle Queue project, which offers single digit
microsecond latencies for messaging between JVMs on the same machine,
or stable latencies of tens of microseconds between machines,
as throughput scales to millions of messages per second.

[[scalability.network.chronicle_wire,}]]

[[{data_structures,java_lang.functional]]
## Java's Collections Framework Gets a Makeover  
  
* <https://www.infoq.com/news/2023/03/collections-framework-makeover/>
  New Sequenced Collection Types
[[java_lang.functional}]]

[[{SPRING.testing]]
## WireMock Spring Boot Simplifies WireMock Configuration 

* <https://www.infoq.com/news/2023/03/wiremock-spring-boot/>
[[}]]

## Spring and Records [[{spring.101.records,qa.spring.101,qa.inmutability]]

* REF: <https://dzone.com/articles/tackling-records-in-spring-boot>
  By Anghel Leonard

* Example. Using Records in Controllers
  ```
  public record Book(String title, String isbn) {}
  public record Author(String name, String genre, List<Book> books) {}

  @GetMapping("/authors")
  public List<Author> fetchAuthors() {
    return bookstoreService.fetchAuthors();
  }
  ```
  NOTE: Jackson library (default JSON library in Spring Boot) will automatically 
  (un)marshal instances of type Author/Book to/from JSON.

* Example: Using Records With Thymeleaf Templates
   
  1. store List<Author> into "authors" Thymeleaf variable:
     ```
     @GetMapping("/bookstore")
     public String bookstorePage(Model model) {
       model.addAttribute("authors",   
          bookstoreService.fetchAuthors());
       return "bookstore";
     }
     ```
  2. Consume in bookstore.html thymeleaf template:
     ```
      ...
      <ul th:each="author : ${authors}">
        <li th:text="${author.name} + ' (' + ${author.genre} + ')'" />
        <ul th:each="book : ${author.books}">
          <li th:text="${book.title}" />
        </ul>
      </ul>
     ```
* Example: Using Records for Configuration

  1. Configuration: 
  ```
  $ cat configuration.properties: (or yml)
  bookstore.bestseller.author=Joana Nimar
  bookstore.bestseller.book=Prague history
  ```
  Mapping to recod with Spring @ConfigurationProperties. 
  ```
  | @ConfigurationProperties(prefix = "bookstore.bestseller")
  | public record BestSellerConfig(String author, String book) {}
  ```
  Inject BestSellerConfig into Service through constructor:
  ```
  | @Service
  | public class BookstoreService {
  |   private final BestSellerConfig bestSeller; // QA.inmutability
  | 
  |   public BookstoreService(BestSellerConfig bestSeller) {
  |     this.bestSeller = bestSeller;
  |   }
  |  
  |   public String fetchBestSeller() {
  |      return bestSeller.author() + " | " + bestSeller.book();
  |   }
  | }
  ```

### Record and Dependency Injection

  ```
  | @RestController
  | public class BookstoreController {
  | 
  |   private final BookstoreService bookstoreService;
  | 
  |   public BookstoreController(BookstoreService bookstoreService) {
  |     this.bookstoreService = bookstoreService;
  |   }
  | 
  |    @GetMapping("/authors")
  |    public List<Author> fetchAuthors() {
  |      return bookstoreService.fetchAuthors();
  |    }
  | }
  ```
[[spring.101.records}]]

## EclipseStore   [[{scalability.storage,storage.scalability,cloud.pricearchitecture.storage,]]
* <https://devsummit.infoq.com/presentation/munich2024/ultra-fast-memory-database-applications-java>

* New (as of 2024) open source project.
* Only java core dependencies.
* Hibernate is the de facto standard persistence for traditional Java 
  database apps. It is also known as complex and slow.<br/>
   Cloud, microservices and serverless have changed Java dramatically,
  but persistence is still the same.  [[{doc_has.comparative}]]
* EclipseStore is built to be the next generation Java persistence for 
  modern cloud-native systems and AI.  It follows the system prevalence 
  architectural pattern and enables databaseless in-memory data 
  processing using the native Java object model.
*  The engine enables seamlessly mirroring any Java object graph of
  any size and complexity transaction-safe into any binary object 
  storage such as AWS S3. Main benefits:
  * High performance: microsecond response and query time, way faster
    than comparable JPA queries,
  * Significant cloud database cost savings: Ex. AWS S3 object storage 
    is 70% – 96% cheaper than any database in the cloud such as
    AWS RDS PostgreSQL or Maria DB. [[{storage.cloud.price}]]
  * Simplicity: only one data model (just POJOs), any Java types are 
    supported, no expensive mappings or data conversion, simple 
    architecture, simple schema migration.
[[storage}]]

JAVA GOLang

[[io.json.jsoniter}]] 


## With Java 21, Your Code Runs Even Faster
* <https://inside.java/2023/10/06/devoxx-your-code-runs-even-faster/>


## "1 Billion Row Challenge"  [[{scalability.101]]
* It Shows Java Can Process a One Billion Rows File in Two Seconds
* <https://www.infoq.com/news/2024/01/1brc-fast-java-processing/>
[[scalability.101}]]

## Redisson: Easy Redis Java client  [[{architecture.cachearchitecture.distributed,]]
* <https://github.com/redisson/redisson>
* features In-Memory Data Grid.
* Sync/Async/RxJava/Reactive API.
* Over 50 Redis based Java objects and services:
  * Set, Multimap, SortedSet, Map, List, Queue, Deque,
    Semaphore, Lock, AtomicLong, Map Reduce, Bloom filter, 
    Spring Cache, Tomcat, Scheduler, JCache API, Hibernate,
    RPC, local cache 
[[architecture.cache}]]

## JEP 474: Generational Mode Now Standard for ZGC in Java [[{jvm.gc.ZGC,]]
* <https://www.infoq.com/news/2024/05/java-zgc-update/>
* The non-generational mode will be deprecated and removed in a future JDK release.
* most significant change in JEP 474: switch of the ZGenerational option’s default
  value from false to true.
* This clearly signals a strategic change in Java's approach to memory management,
  specifically optimizing garbage collection based on delivering more ‘free’ memory
  to Java applications and a lower overhead of GC.  [[{scalability.jvm.memory}]]
[[jvm.gc.ZGC}]]

## Is Protobuf 5x Faster Than JSON?  [[{io.protobuf,doc_has.comparative]]
* <https://dzone.com/articles/is-protobuf-5x-faster-than-json-part-ii>
[[io.protobuf}]]


[[{security.101,qa,pm.low_code]]

## Eclipse (Safe) Serializer
* <https://github.com/eclipse-serializer/serializer/blob/main/README.md>

* High secure serialization for the JVM and Android
* Strict separation of data and code
* Neither code nor any class information is transferred
* No code is executed through deserialization
* Objects are generated by the framework
* Injecting malicious code won't have any consequences because executing is impossible
* Implementing the interface java.io.Serializable is not required at all
* Serialize any object
* Any object from 3rd party APIs can be serialized
* Built for any complex object graphs, circular references are troublefree
* The depth of an object graph is not limited, no stack-based recursion
* No requirements to your classes, no interfaces, superclasses or annotations required
[[security.101}]]

[[{qa.refactoring.openrewrite]]
## OpenRewrite 
https://docs.openrewrite.org/ 
Introduction to OpenRewrite

Large-scale automated source code refactoring

OpenRewrite is an automated refactoring ecosystem for source code, 
enabling developers to effectively eliminate technical debt within 
their repositories.

It consists of an auto-refactoring engine that runs prepackaged, 
open-source refactoring recipes for common framework migrations, 
security fixes, and stylistic consistency tasks – reducing your 
coding effort from hours or days to minutes. Build tool plugins like 
the OpenRewrite Gradle plugin and the OpenRewrite Maven plugin help 
you run these recipes on one repository at a time.

While the original focus was on the Java language, the OpenRewrite 
community is continuously expanding language and framework coverage. 
Thousands of great individuals and teams are working together to make 
software seamless to update and continuously secure.
[[qa.refactoring.openrewrite}]]

## Spring shell
https://spring.io/projects/spring-shell

[[{scalability.jvm.virtualThreads]]
## Spring Boot 3.2
* Support for Virtual Threads and Modern RestClient and JdbcClient
* <https://www.infoq.com/news/2023/12/spring-boot-virtual-threads/>
[[scalability.jvm.virtualThreads}]]

[[{security.AAA]]
## Spring Boot OAuth2 Auth+Resource Server Example

* <https://github.com/amitdhodi/spring-boot-oauth2>
* Showcasing the authorization code grant flow.
[[security.AAA}]]

[[{security.AAA]]
## Simplified Guide to JWT Authentication with Spring Boot - DEV Community
* <https://dev.to/abhi9720/a-comprehensive-guide-to-jwt-authentication-with-spring-boot-117p>
[[security.AAA}]]

## Java 9+ Multi-Release JARs

## Snippets Collection [[{]]
https://github.com/topics/snippets-collection
[[}]]

## Microsoft Open-Sources GCToolkit to Tap into JVM GC Logs  [[{JVM.gc.debugging,troubleshooting.debugging,]]
  https://www.infoq.com/news/2021/09/msft-opensourced-gctoolkit/

Besides the API, there are two other modules: the parser and the
Vert.x module. The parser module is based on a collection of regular
expressions and code written over many years to be considered the
most robust GC log parser available. The Vert.x-based messaging
backend makes use of two message buses: the first one streams data
from a data source. The current implementation streams log lines from
the GC log file. The consumers of this bus are the parsers that
convert the data from the data source into events that represent
either a GC cycle or safe point. These events are published on the
second message bus: the event bus. Subscribers on the event bus are
then able to be notified and to process events that are of interest
to them.

More importantly, it has long been known that a suboptimal
configuration collector will result in an application requiring more
CPU and memory, while at the same time, degrading the end user’s
experience. In other words, poorly tuned often equates to a more
expensive runtime and unhappy users. The challenge is that to
optimally tune the GC, one needs to create a delicate balance between
several concerns all of which are not easily seen without the
assistance of tooling. GCToolKit has been helpful in making this
easier. [[JVM.gc.debugging}]]


## Boost with Record Pattern 
https://www.infoq.com/news/2023/05/java-gets-boost-with-record/

https://www.baeldung.com/java-completablefuture-non-blocking  

# Profilers VisualVM vs JMC vs async-profiler

* <https://www.infoq.com/articles/open-source-java-profilers/>

* a simple profiler (VisualVM),
* a hackable profiler with lots of features (async-profiler),
* a built-in profiler which obtains lots of additional information (JMC)

## JReleaser 
* https://jreleaser.org/ 
* quick effortless way to release Java project! to Windows/Mac/OSX.

## Flowable: workflow engine 

* https://github.com/flowable/flowable-engine 
* support bpmn, cmmn and dmn 

## Error Prone (and refaster) 
* https://errorprone.info/ 

from Google. ... augment the compiler’s type analysis, you can catch 
more mistakes before they cost you time, or end up as bugs in 
production.

## Kcctl kafka connect CLI 
<https://github.com/kcctl/kcctl>

## Mustache Template
* https://ernestmicklei.com/melrose/introduction_melrose/Mustache Template
* https://mustache.github.io/;
* Language for creating dynamic content like HTML, configuration files 

## Java virtualthreads  vs Kotlin coroutines
* <https://spring.io/blog/2022/10/11/embracing-virtual-threads>

## Mocking the java.time API for Better Testability 
* <https://dzone.com/articles/mocking-the-javatime-api-for-better-testability >
* <https://stackoverflow.com/questions/24491260/mocking-time-in-java-8s-java-time-api>
* https://gabstory.com/70?category=933660>
* https://www.baeldung.com/java-override-system-time

## Java Census: official record of the structure of theOpenJDK Community  [[{]]
* <https://openjdk.org/census#crac>
* It lists the active Groups, Projects, andContributors and the 
  relationships between them. The census wasinitially constructed per 
  the transitionplan defined in the ratified Bylaws;details are 
  available below.To nominate an existing Contributor to a new role, or 
  to proposea new Group or Project, please see the advice and 
  instructions forGroups and Projects.To request a change or correction 
  to the census, please contactthe registrar.IndexGroupsadoption 
  buildclient-libs compiler conformancecore-libs csr gb hotspot i18n 
  ide-support jmx members net porters quality security serviceability 
  vulnerability webProjectsaarch32-port aarch64-port amberanno-pipeline 
  audio-engine babylonbrisbane bsd-portbuild-infra caciocavallo 
  closurescode-tools coincompiler-grammar crac cvmi detroit dio duke 
  font-scaler galahad graal graphics-rasterizer guide haiku hsx icedtea 
  javadoc-next jdk jdk-updates jdk10 jdk6 jdk7 jdk7u jdk8 jdk8u jdk9 
  jigsaw jmc jmmjmx2 kona kulla lambda lanai leyden lilliput 
  locale-enhancement loom macosx-port metropolis mips-portmlvm mobile 
  modules nashorn nio openjfx panama penrose portola 
  ppc-aix-portriscv-port s390x-port sctp shenandoah skara sumatra 
  threeten tiered-attrib tsantype-annotations valhalla verona visualvm 
  wakefieldzero zgc
[[}]]

[[{security.]]
[[}]]
## Apache Shiro 

https://shiro.apache.org/

 Apache Shiro™ is a powerful and easy-to-use Java security framework 
that performs authentication, authorization, cryptography, and 
session management. With Shiro’s easy-to-understand API, you can 
quickly and easily secure any application – from the smallest mobile 
applications to the largest web and enterprise applications. 
[[PM.TODO}]]

## Concurrency @ docs.oracle.com
http://docs.oracle.com/javase/tutorial/essential/concurrency/

## JDK 7 in Action: Using New Core Platform Features in Real Code

* <https://www.youtube.com/watch?v=uohJjidczQc>

* 55 new features in jdk 7
  <https://www.youtube.com/results?search_query=55+New+Features+in+JDK+7>
