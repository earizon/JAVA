[[{java,01_PM.TODO]]
•  Spring SecurityContext* [[{]]
https://www.javacodegeeks.com/spring-interview-questions-and-answers.html
https://www.javacodegeeks.com/java-interview-questions.html
https://www.javacodegeeks.com/2014/11/multithreading-concurrency-interview-questions-answers.html
https://www.javacodegeeks.com/2013/02/40-java-collections-interview-questions-and-answers.html
https://www.javacodegeeks.com/spring-batch-tutorial.html
https://docs.spring.io/spring-cloud-cli/docs/current/reference/html/  spring.boot,cli:
[[}]]

• Sprint Tools 4 (Integration with Visual Studio Code, Eclipse, Theia IDE)
  https://spring.io/tools/

• [[{]]
  @[https://www.programcreek.com/2013/03/hashmap-vs-treemap-vs-hashtable-vs-linkedhashmap/]
  @[https://www.programcreek.com/2015/12/top-10-java-utility-classes/]      @ma
  @[https://www.programcreek.com/2013/09/top-9-questions-for-java-map/]
  @[https://www.programcreek.com/2013/09/top-10-questions-for-java-collections/]
  @[https://www.programcreek.com/2013/09/top-8-diagrams-for-understanding-java/]
  @[https://www.programcreek.com/2013/09/top-10-faqs-of-java-strings/]
  @[https://www.programcreek.com/2013/09/top-10-methods-for-java-arrays/]
  @[https://www.programcreek.com/2013/09/top-10-websites-for-advanced-level-java-developers/]
  @[https://www.programcreek.com/2013/08/top-books-for-advanced-level-java-developers/]
[[}]]

• Spring Cloud Function promotes the implementation of business [[{]]
  logic via functions based on the standard interfaces introduced by Java   :
  Supplier: A supplier is a function with only output, no input.
            It’s also known as a 'producer', 'publisher' or 'source'.
  Function :A function has both input and output.
            It’s also known as a processor.
  Consumer. A consumer is a function with input but no output.
            It’s also known as a 'subscriber' or 'sink'
[[}]]

• https://hantsy.github.io/spring-r2dbc-sample/auditing.html

• https://blog.frankel.ch/jvm-security/4/ [[{jvm,security}]]

• https://github.com/vert-x3/vertx-4-migration-guide

• SPARTA (anti-malware)
  - Aimed at preventing malware from appearing in an app store.
  - provides an information-flow type-checker customized to Android
    but can also be applied to other domains.
  @[https://checkerframework.org/sparta/]
    The paper "Collaborative verification of information flow for a
    high-assurance app store" appeared in CCS 2014.

• java_lang.101,java_lang.functional:
  Collectors (1.8+)

• Java 9 to 13 in a Nutshell!!!: @ma
  https://bentolor.github.io/java9to13/#/_preview_features_preview_12

• "The Netflix Domain Graph Service framework - OSS GraphQL for Spring Boot by Paul Bakker"
  https://youtu.be/WfK44fDuijI

• Guava Collections [[{data_structures,qa.data]]
- Widely used Google Core Libraries for Java 6+.
  with as advanced collection types
  https://www.baeldung.com/guava-sets?
[[}]]
######################################################
• Is Java 17 a Glass Half Full?
  https://www.infoq.com/news/2021/07/java-17-glass/

  Overall, the features present in Java 17 are broadly following the
  expected pattern, as InfoQ previously reported on. The unfortunate
  truth is that of the major projects that have been the major areas of
  JDK development in the last three years (Loom, Valhalla, Amber and
  Panama) - none are complete as of the release of Java 17.

  This means that the feature set of Java 17 will be more modest than
  many developers hoped.

  For example, The Algebraic Data Types feature (comprising Records and
  Sealed Types) is complete as of 17. This is a major step forward in
  terms of data modeling and enhancing the OO capabilities of the Java
  language. However, the Pattern Matching feature which complements and
  builds upon algebraic data types is only present as a Preview feature
  in Java 17 (and only in a fairly rudimentary form at that).

• Architecture of a Geospatial Application with Java
  https://www.baeldung.com/java-geospatial-applications

• Eclipse Memory Analyzer Open Source Project
  https://www.eclipse.org/mat/
  - fast and feature-rich Java heap analyzer that helps you find
    memory leaks and reduce memory consumption.
  - Use the Memory Analyzer to analyze productive heap dumps with
    hundreds of millions of objects, quickly calculate the retained sizes
    of objects, see who is preventing the Garbage Collector from
    collecting objects, run a report to automatically extract leak
    suspects.

• Java 17, the Next Long-Term Support Release, is Now Available
  https://www.infoq.com/news/2021/09/java17-released/

• JDK Mission Control 8.1.0 Released!
  https://foojay.io/today/jdk-mission-control-8-1-0-released/

• https://github.com/topics/snippets-collection

• Scala 3 Overhauls Language for Better Developer Experience
  https://www.infoq.com/news/2021/06/scala-3-overhaul/

• Microsoft Open-Sources GCToolkit to Tap into JVM GC Logs  [[{]]
  https://www.infoq.com/news/2021/09/msft-opensourced-gctoolkit/

Besides the API, there are two other modules: the parser and the
Vert.x module. The parser module is based on a collection of regular
expressions and code written over many years to be considered the
most robust GC log parser available. The Vert.x-based messaging
backend makes use of two message buses: the first one streams data
from a data source. The current implementation streams log lines from
the GC log file. The consumers of this bus are the parsers that
convert the data from the data source into events that represent
either a GC cycle or safe point. These events are published on the
second message bus: the event bus. Subscribers on the event bus are
then able to be notified and to process events that are of interest
to them.

More importantly, it has long been known that a suboptimal
configuration collector will result in an application requiring more
CPU and memory, while at the same time, degrading the end user’s
experience. In other words, poorly tuned often equates to a more
expensive runtime and unhappy users. The challenge is that to
optimally tune the GC, one needs to create a delicate balance between
several concerns all of which are not easily seen without the
assistance of tooling. GCToolKit has been helpful in making this
easier. [[}]]

• VMware Overhauls Spring 6 & Spring Boot 3 for Another Decade  @ma
  https://www.infoq.com/news/2021/09/spring-6-spring-boot-3-overhaul/

• java.util.concurrent.locks.ReentrantLock vs synchronized { ... } block  [[{concurrency.101]]

 1) Another significant difference between ReentrantLock and the
synchronized keyword is fairness. The synchronized keyword doesn't
support fairness. Any thread can acquire lock once released, no
preference can be specified, on the other hand, you can make
ReentrantLock fair by specifying fairness property while creating an
instance of ReentrantLock. Fairness property provides a lock to the
longest waiting thread, in case of contention.

 2) The second difference between synchronized and Reentrant lock is
tryLock() method. ReentrantLock provides a convenient tryLock()
method, which acquires lock only if its available or not held by any
other thread. This reduces the blocking of thread waiting for lock-in
Java applications.

 3) One more worth noting the difference between ReentrantLock and
synchronized keyword in Java is, the ability to interrupt Thread
while waiting for Lock. In case of a synchronized keyword, a thread
can be blocked waiting for a lock, for an indefinite period of time
and there was no way to control that. ReentrantLock provides a method
called lockInterruptibly(), which can be used to interrupt thread
when it is waiting for lock. Similarly, tryLock() with timeout can be
used to timeout if the lock is not available in certain time period. [[}]]

• Modern functional programming in Java:  ¡¡¡@ma!!!
@[https://dzone.com/articles/introduction-to-pragmatic-functional-java]

• JAVA DONT's:
  https://dzone.com/articles/we-should-write-java-code-differently?edition=598293#

• Complete how to write files in Guava

• aborted compilation of a multi-module (like AbsisParentPom)  [[{maven]]
  can be restarted (from the last failed module) with '--resume-from' option like:
$ $ mvn --resume-from=com.myCompany.myModule:MyArtifact \
$   $ clean install -P myProfile -DskipTests=true            [[}]]


• Java Erasure
  Type Erasure is a technique employed the Java compiler to support the use of Generics.
@[https://developer.ibm.com/recipes/tutorials/java-language-type-erasure/]

• High Perf Persistence
  https://www.reddit.com/r/linux/comments/ajkfs0/github_trimstraythepracticallinuxhardeningguide/

• Kryo serialization lib [[{]]
  - Object graph serialization library:
   @[https://github.com/EsotericSoftware/kryo]
    Kryo is a fast and efficient binary object graph serialization
    framework for Java. The goals of the project are high speed, low
    size, and an easy to use API. The project is useful any time objects
    need to be persisted, whether to a file, database, or over the
    network.

     Kryo can also perform automatic deep and shallow copying/cloning.
    This is direct copying from object to object, not object to bytes to
    object.  [[}]]

• java_lang.101,qa.billion_dolar_mistake:
  Optional (1.8+)

  Optional<Integer> highestNumber
      = itemList.stream()
        .reduce((int1, int2) ->               ← Reduce returns Optional
                (int1 > int2) ? int1 : int2);

  Optional Evolution
  https://dzone.com/articles/java-optional-api-evolution?edition=699391

[[{01_PM.TODO]]
● Secomp JVM Integration
@[https://docs.sonarqube.org/latest/requirements/requirements/]
https://en.wikipedia.org/wiki/Seccomp
http://people.apache.org/~rmuir/es-coverage/post-query-refactoring/org.elasticsearch.bootstrap/Seccomp.java.html
seccomp filter  Non-portable linux/amd64 only security protection, preventing non
                authorized calls to kernel.


By default, Elasticsearch uses seccomp filter. On most distribution
this feature is activated in the kernel. If  distributions without
this featur you have to explicitly deactivate this security layer
by updating sonar.search.javaAdditionalOpts in
$SONARQUBEHOME/conf/sonar.properties_:

sonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=false

You can check if seccomp is available on your kernel with:

$ grep SECCOMP /boot/config-$(uname -r)

If your kernel has seccomp, you will see:

CONFIG_HAVE_ARCH_SECCOMP_FILTER=y
CONFIG_SECCOMP_FILTER=y
CONFIG_SECCOMP=y
[[}]]

[[{qa.testing.101,01_PM.TODO]]
● Mockito
• Top voted Java testing framework in StackOverflow
• Top 10 most-widely used Java amongt 30.000 inspected projects.
[[}]]

• Clean JSON Notes.
• @[https://www.baeldung.com/java-json-binding-api]

• Compact monitoring notes: jcmd, Visual Recorder,  CRaSH shell
  Eclipse Mem.Analizer

• https://eclipse-ee4j.github.io/jakartaee-tutorial/ @ma
  https://www.uml-diagrams.org/java-ejb-uml-profile-diagram-example.html
  https://www.uml-diagrams.org/java-ejb-state-machine-diagram-example.html

• https://www.uml-diagrms.org/java-7-api-uml-package-diagram-example.html
  https://www.uml-diagrams.org/examples/java-servlet-25-api-package-diagram-example.html
  https://www.uml-diagrams.org/examples/java-servlet-30-api-package-diagram-example.html
  https://www.uml-diagrams.org/java-thread-uml-state-machine-diagram-example.html

• https://www.uml-diagrams.org/tomcat-server-uml-composite-structure-diagram-example.html
  https://www.uml-diagrams.org/web-application-clusters-uml-deployment-diagram-example.html


• https://github.com/google/re2j
  linear time regular expression matching in Java
  If you use regular expression patterns with a high degree of
  alternation, your code may run faster with RE2/J. In the worst case,
  the java.util.regex matcher may run forever, or exceed the available
  stack space and fail; this will never happen with RE2/J.

• weekly Inside Java Newscast:
  https://www.youtube.com/playlist?list=PLX8CzqL3ArzX8ZzPNjBgji7rznFFiOr58

• Who-is-Who:
  https://nipafx.dev/nicolai-parlog/
  Java developer advocate at Oracle

• plans for Java in 2022.
  https://www.youtube.com/watch?v=4Y3LijiBxRA
  focus on the four main Java projects:
  · https://openjdk.java.net/projects/amber
  · https://openjdk.java.net/projects/loom
  · https://openjdk.java.net/projects/panama/
  · https://openjdk.java.net/projects/valhalla
    The goal of Project Valhalla is to explore and incubate advanced
    Java VM and Language feature candidates such as:
    · Value types
    · Generic specialization
    · Enhanced volatiles
    · and possibly othe related topics, such as reified generics

• https://openjdk.java.net/jeps/0


• Testing add notes:    @ma
  • mockito,
    https://github.com/mockito/mockito/wiki/Features-And-Motivations
    "...Mockito has very slim API, almost no time is needed to start mocking.
      There is only one kind of mock, there is only one way of creating
      mocks. Just remember that stubbing goes before execution,
      verifications of interactions go afterwards... "

• Add notes on JUnit parameterized tests.
  https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests

• Apple has open-sourced GCGC, a tool for Java Garbage Collector (GC)
  logs visualization based on Python 3 and pandas.
  https://www.infoq.com/news/2022/01/apple-gcgc-java/
  https://github.com/apple/GCGC

• GCGC uses a Jupyter notebook to analyze and visualize GC log files. A
  notebook is provided for the analysis and it generates plots and
  tables from collected GC information.

• https://theboreddev.com/understanding-java-streams @ma?

• Data Oriented Programming in Java
   https://www.infoq.com/articles/data-oriented-programming-java/

• cache2k - Java Caching –https://cache2k.org/

• Java: Spring Boot 2.7.0 Released With Support for GraphQL, Podman and Cache2k
  https://www.infoq.com/news/2022/06/spring-boot-2-7/
• Java 18
  https://www.infoq.com/news/2022/03/java18-released/
• Failsafe 3.2 Released with New Resilience Policies
  https://www.infoq.com/news/2022/02/failsafe-resilience-3/

• 101: Six Features From Java 12 to 17 to Get Excited About!
  https://www.infoq.com/articles/six-features-jdk12-to-jdk17/

• Java: Spring Boot 2.6 Improves Docker Images and Metrics, Version 2.4 Is EOL
  https://www.infoq.com/news/2021/12/spring-boot-2-6/

• log4j, Log4Shell: A new fix, details of active attacks, and risk mitigation recommendations
  https://www.helpnetsecurity.com/2021/12/15/log4shell-mitigation/

• E-book Collection Page | Red Hat DeveloperLot of books about quarkus!!!
  https://developers.redhat.com/e-books
• Introducing the KivaKit Framework
  https://www.infoq.com/articles/introducing-kivakit/
• Extending Swagger and Spring Doc Open API
  https://dzone.com/articles/extending-swagger-and-spring-doc-open-api?edition=699391 

• concurrency, 101? Measuring ForkJoinPool Parallelism
  https://www.javaspecialists.eu/archive/Issue297-Measuring-ForkJoinPool-Parallelism.html

• Why SOLID principles are still the foundation for modern software architecture [[{]]
https://stackoverflow.blog/2021/11/01/why-solid-principles-are-still-the-foundation-for-modern-software-architecture/ 
  - Single responsibility principle Original definition: “There should
    never be more than one reason for a class to change.”If you write a
    class with many concerns, or “reasons to change”, then you need
    to change the same code whenever any of those concerns has to change.
    This increases the likelihood that a change to one feature will
    accidentally break a different feature.
  - Open-closed principle Original definition: “Software entities should
    be open for extension, but closed for modification.”This is part of
    the design of languages like Java—you can create classes and extend
    them (by creating a subclass), but you can’t modify the original
    class. One reason for making things “open for extension” is to
    limit the dependency on the author of the class—if you need a
    change to the class, you’d constantly need to ask the original
    author to change it for you, or you’d need to dive into it to
    change it yourself. What’s more, the class would start to
    incorporate many different concerns, which breaks the single
    responsibility principle.The reason for closing classes for
    modification is that we may not trust any and all downstream
    consumers to understand all the “private” code we use to get our
    feature working, and we want to protect it from unskilled hands

  - Liskov substitution principle Original definition:
   “If S is a subtype of T, then objects of type T may be replaced with
    objects of type S without altering any of the desirable properties of the program.”
  - Interface segregation principle Original Definition:
    “Many client-specific interfaces are better than one
    general-purpose interface.”In OO, you can think of this as
    providing a “view” into your class. Rather than giving your full
    implementation to all your clients, you create interfaces on top of
    them with just the methods relevant to that client, and ask your
    clients to use those interfaces. 
  - Dependency inversion principle Original definition:
   “Depend upon abstractions, not concretions.”In OO, this means
    that clients should depend on interfaces rather than concrete classes
    as much as possible. This ensures that code is relying on the
    smallest possible surface area—in fact, it doesn’t depend on code
    at all, just a contract defining how that code should behave. As with
    other principles, this reduces the risk of a breakage in one place
    causing breakages elsewhere accidentally.
[[}]]

• persistence: No More MultipleBagFetchException Thanks to Multiset Nested Collections SQL and jOOQ.
  https://blog.jooq.org/no-more-multiplebagfetchexception-thanks-to-multiset-nested-collections/
______________________________
• Troubleshooting Java Applications with Eclipse Jifa [[{]]
  https://www.infoq.com/news/2022/02/eclipse-jifa/ 
The analytic engine currently has two parts: the Heap Dump Analysis
service based on Eclipse Memory Analyzer (MAT) and the GC Log
Analysis service which supports the G1, Parallel GC, Serial GC, CMS
and ZGC garbage collection algorithms. The GC Log Analysis Service
can process logs from Java 8 and 11, while support for Java 17 is
under development

Eclipse Jifa’s heap dump analysis, based on Eclipse MAT, provides
detailed documentation about analyzing heap dumps

Vue 2.0 and Vert.x are used for the frontend and backend,
respectively.

There are several ways to deploy Eclipse Jifa: only one worker, one
master and several workers or the Kubernetes model.
Java: Compressed GraalVM Native Images: the best startup for Java
apps comes in tiny packages
https://medium.com/graalvm/compressed-graalvm-native-images-4d233766a214
[[}]]

• Azul Launches Java Cloud Compiler
  https://www.infoq.com/news/2022/02/azul-cloud-compiler/ 
  Azul Intelligence Cloud introduces a third option that bridges the
  benefits of JIT (peak performance) with the benefits of AOT (fast
  startup time). As teams often run the same code across many systems,
  the JRE communicates with an organization’s shared JIT server so
  that each JRE does not need to do the same observation and
  optimization cycle. The cloud compiler can then also perform deeper
  analysis, using CPU resources that are isolated from the running
  application. Resulting applications can reach peak performance in the
  network time needed to transfer this information and run with the
  improved code. In tests described at QCon, the time to peak
  performance was faster and throughput was between 25 to 100%
  faster.
https://www.baeldung.com/java-weekly-425

• Spring for GraphQL Version 1.0 Released
  https://www.infoq.com/news/2022/06/spring-graphql/ 
  Still in its infancy, Spring for GraphQL will most likely evolve with
  new features and bug fixes, and could become an alternative to the
  popular DGS framework, developed at Netflix in the last three years.

• Java, Introduction To Pragmatic Functional Java - DZone Java
  https://dzone.com/articles/introduction-to-pragmatic-functional-java?edition=699391

• Java, quarkus + neo4j,...:
  https://www.infoq.com/news/2021/10/java-news-roundup-oct04-2021/

• Security: Detect and block Log4j exploitation attempts with CrowdSec
  The OOSS & collaborative IPS
https://crowdsec.net/blog/detect-block-log4j-exploitation-attempts/

• https://github.com/JakeWharton/RxRelay
  Subjects and Relays allow to bridge non-Rx APIs into Rx easily, and without
  the worry of accidentally triggering a terminal state.

• JAVA Example Architecute:
  In the case of Java, we may add new libraries (with all its
  transitive dependencies) for each of the “microservicilitities”,
  such as Resiliency4J for resiliency, Jaeger for tracing, or
  Micrometer for monitoring.

• JAVA JDK version, JVM version, javac -source/-target/-release/ ... related info: [[{java,01_PM.TODO}]]
  https://stackoverflow.com/questions/43102787/what-is-the-release-flag-in-the-java-9-compiler

• java.util.concurrent [[{concurrency.101,01_PM.TODO]]
• TODO: Create package summary
  example stack trace extracted from Vert.X :
  at jdk.internal.misc.Unsafe.park(Native Method)
  at java.util.concurrent.locks.LockSupport.park
  at java.util.concurrent.LinkedTransferQueue.awaitMatch
  at java.util.concurrent.LinkedTransferQueue.xfer
  at java.util.concurrent.LinkedTransferQueue.take
  at java.util.concurrent.ThreadPoolExecutor.getTask
  at java.util.concurrent.ThreadPoolExecutor.runWorker
  at java.util.concurrent.ThreadPoolExecutor$Worker.run
[[}]]

● JVM Journey to Cloud-native [[{cloud.101,01_PM.TODO]]
(by BellSoft)
• JDK 9 : Compact Strings
          HTTP/2 client
• JDK 10: Docker awareness
• JDK 11: ZGC
• JDK 12: Return unused memory
          Shenandoah GC
• JDK 13: Uncommit unused memory for ZGC
• JDK 14: JFR Event Streaming
• JDK 15: Reimplement Datagram Socker API
          Hidden Classes

• JDK 16: Elastic metaspace
          Alpine Linux port

[[}]]

● Monads in Java [[{java_lang.functional,java_lang.101,01_PM.TODO]]
@[https://dzone.com/articles/what-is-a-monad-basic-theory-for-a-java-developer?edition=672394]
• two of the most commonly known Java 8 features are monad
  implementations, namely Stream and Optional
• Monad is a concept:  we can view it as a wrapper which puts our
  value in some context and allows us to perform operations on the
  value. In this context, the output of an operation at any step is the
  input to the operation at the next step.
[[}]]
● Simplifying Async code [[{async/reactive.101,01_PM.TODO]]
• Simplifying Async/CompletableFuture code with BascomTask @ma
  https://dzone.com/articles/lightweight-parallel-tasks-in-java-microservices
  BascomTask is a lightweight task orchestration library that provides
  thread-level parallelization in a way that is as frictionless as
  possible. This means that, by design, using BascomTask is very close
  to pure Java code in both usage and performance, including use of
  CompletableFutures where they can be used effectively, but without
  having to rely solely on them for task-level organization of a
  codebase. BascomTask aims to compliment rather than replace
  CompletableFutures and freely integrates with them.
[[}]]

● JPA Summary [[{01_PM.TODO]]
• Java: Migrating from JPA 2.x to 3.0
  https://thorben-janssen.com/migrating-jpa-2-x-to-3-0/?ck_subscriber_id=935368299
• https://www.javacodegeeks.com/2015/02/jpa-tutorial.html
• JAVA, Soft Arch: REST Query Language with Spring Data JPA and Querydsl
  " The Holy Grail - a REST Query Language"
  https://www.baeldung.com/rest-api-search-language-spring-data-querydsl
[[}]]

● Amdahl's law [[{concurrency.101,01_PM.TODO]]
• Amdahl's law provides a formula to compute the theoretical maximum
  speed up by providing multiple processors to an application.
• theoretical speedup is computed by S(n) = 1 / (B + (1-B)/n) where n
  denotes the number of processors and B the fraction of the program
  that cannot be executed in parallel. When n converges against
  infinity, the term (1-B)/n converges against zero. Hence the formula
  can be reduced in this special case to 1/B. As we can see, the
  theoretical maximum speedup behaves reciprocal to the fraction that
  has to be executed serially. This means the lower this fraction is,
  the more theoretical speedup can be achieved.
[[}]]

● Sub-processes [[{concurrency.101,01_PM.TODO]]
• Concurrency can be greately simplified by using OS processes
  (vs in-process threads).  This automatically avoid many/most of the problems
  with thread concurrency.
• When context switching among OS process is not an issue multi-process
  architecture is a safer and easier approach.
  Note for example how all modern web browser have switched to a
  multi-process (one per-tab) approach to gain estability and safety.

• Invoquing sub-processes from java, curl example:
  https://www.baeldung.com/java-curl
[[}]]

● Vert.X Mutiny APIs [[{vertx.*,01_PM.TODO]]
• Reactive isn't Complicated with Vert.x and the new Mutiny APIs
@[https://www.youtube.com/watch?v=3tdU5WRvuuo]
[[}]]

● Resilience4j [[{architecture.distributed,qa.error_control,01_PM.TODO]]
• higher-order functions (decorators) to enhance any functional interface,
  lambda expression or method reference with a Circuit Breaker, Rate
  Limiter, Retry or Bulkhead.
• more than one decorator on any functional interface, lambda or method ref
  can be stacked.
[[}]]
● JDeps [[{devops.101,01_PM.troubleshooting,01_PM.TODO]]
• JDeps: dependency analysis tool for Java bytecode (class files and JARs).
@[https://nipafx.dev/jdeps-tutorial-analyze-java-project-dependencies/]

$ $ jdeps sh-2.6.3.jar       ←  -verbose:class will list dependencies between classes
  sh-2.6.3.jar → java.base      (vs aggregating them to package level)
  sh-2.6.3.jar → java.datatransfer
  sh-2.6.3.jar → java.desktop
  sh-2.6.3.jar → java.logging
  sh-2.6.3.jar → java.prefs
  sh-2.6.3.jar → java.sql
  sh-2.6.3.jar → java.xml
  sh-2.6.3.jar → not found
     edu.udo.sh → com.beust.jcommander  not found
     edu.udo.sh → edu.udo.sh.data       sh-2.6.3.jar
     edu.udo.sh → edu.udo.sh.gui        sh-2.6.3.jar
     edu.udo.sh → edu.udo.sh.gui.util   sh-2.6.3.jar
     edu.udo.sh → edu.udo.sh.util       sh-2.6.3.jar
     edu.udo.sh → java.io               java.base
     edu.udo.sh → java.lang             java.base
     edu.udo.sh → javax.swing           java.desktop
     edu.udo.sh → org.slf4j             not found
  [... truncated many more package dependencies ...]
[[}]]

● GraalVM Summary [[{jvm.graalvm,cloud.k8s,scalability.jvm,01_PM.TODO]]
@[http://www.graalvm.org/]
@[https://technology.amis.nl/2018/11/23/comparing-jvm-performance-zulu-openjdk-openjdk-oracle-jdk-graalvm-ce/]
@[https://www.reddit.com/r/java/comments/acarqq/graalvm_in_2018/]

- Graal: How to Use the New JVM JIT Compiler in Real Life
  @[https://www.infoq.com/presentations/graal-jvm-jit/]

- GraalVM Native Image
@[https://www.graalvm.org/docs/reference-manual/native-image/]
 "native-image"  utility:
 - ahead-of-time compiler to a   standalone executable .
 - JVM is replaced with necesary  components (memory mngr,
   Thread scheduler) in "Substrate VM" runtime:
   Substrate VM runtime is actually the name for the runtime components
   (like the deoptimizer, garbage collector, thread scheduling etc.).
 - Result has faster startup time and lower runtime memory .
 - It statically analyses which classes and methods are reachable
   and used during application execution and passes all this
   reachable code as the input to the GraalVM compiler for
   ahead-of-time compilation into native-library.
Ex Ussage:
@[https://github.com/web3j/svm/blob/master/generate_native_image.sh]
  # tested with graalvm 19.3.1
  ./gradlew spotlessApply
  ./gradlew build
  ./gradlew shadowJar  // ← create fat JARs, relocate packages for apps/libs
  cd "build/libs" || exit
  native-image \
     -cp svm-1.0-SNAPSHOT-all.jar \
     org.web3j.svm.MainKt \
     --no-fallback \
     --enable-https \
     --enable-http
[[}]]
● Spring GraalVM issues [[{spring,jvm.graalvm,01_PM.backlog]]
REF:
@[https://github.com/spring-projects/spring-framework/wiki/GraalVM-native-image-support]
Working toward GraalVM native image support without requiring additional
configuration or workaround is one of the themes of upcoming Spring Framework
5.3. The main missing piece for considering GraalVM as a suitable deployment
target for Spring applications is providing custom GraalVM Feature
implementation at Spring Framework level to automatically register classes
used in the dependency mechanism or Spring factories, see the related issue #
22968 for more details.
[[}]]


● Quarkus (GraalVM) Framework [[{jvm.graalvm,cloud.k8s,scalability.jvm,01_PM.TODO]]
@[https://quarkus.io/guides/]
@[https://quarkus.io/guides/kogito-guide]
@[https://marketplace.visualstudio.com/items?itemName=kie-group.vscode-extension-kogito-bundle]
@[https://quarkus.io/guides/using-vertx.html]
..
@[https://www.infoq.com/news/2019/03/redhat-release-quarkus]

Extracted from "Hibernate with Panache" by Emmanuel Bernard.
""" Quarkus is Supersonic Subatomic Java. extremely fast with low memory footprint""".
@[https://quarkus.io/guides/hibernate-orm-panache-guide]
Hibernate ORM is the de facto JPA implementation and offers you the full
breadth of an Object Relational Mapper. It makes complex mappings possible,
but it does not make simple and common mappings trivial. Hibernate ORM with
Panache focuses on making your entities trivial and fun to write in Quarkus.

  Panache example:
  @Entity
  public class Person extends PanacheEntity {
      public String    name;
      public LocalDate birth;
      public Status    status;

      public static Person      findByName(String name) {
        return find("name", name).firstResult();
      }
      public static List<Person> findAlive           () {
        return list("status", Status.Alive);
      }
      public static void       deleteStefs           () {
        delete("name", "Stef");
      }
  }
[[}]]

● JobRunr [[{architecture.batch,doc_has.comparative,01_PM.TODO]]
@[https://www.infoq.com/news/2021/09/jobrunr-4-released/]
• JobRunr 4.0 Delivers Improved Integration with Spring Starter, Quarkus and Micronaut.

• Spring Batch or Quartz frameworks force to implement custom interfaces and
  they add a lot of overhead whereas I just want to run some long-running
  tasks in the background. JobRunr solves all of this by just
  accepting any Java 8 lambda, analyzing it and storing the job
  information in a SQL or NoSQL database. You can schedule these jobs
  to be executed as soon as possible, somewhere in the future or in a
  recurring manner using Cron expressions.

• Dehuysser: I would like to highlight three things:
  • JobRunr does some magic with ASM (which is also used by Spring,
    Hibernate and a lot of other frameworks) to analyze the job lambda.
    By using ASM, I really learned a lot about the JVM bytecode, which is
    not as difficult as I imagined.
  • As JobRunr performs bytecode analysis, it also participates in
    the Oracle Quality Outreach program. This means JobRunr is tested
    against upcoming releases of the JVM. This helps me to make sure that
    it will continue working on newer Java releases and also helps the
    Java community as bugs in the JVM itself are caught earlier.
  • For users that need support or extra features, there is also JobRunr Pro.
    Adding extra features like queues with different priorities (high priority
    jobs get processed before low priority jobs), job chaining, atomic batches
    and a better dashboard which adds search capabilities.
[[}]]

● OWASP (maven) Plugin <!-- @ma --> [[{security.101,security.owasp,devops.maven,01_PM.TODO]]
@[https://maven.apache.org/plugins/]
• OWASP Dependency-Check identifies project dependencies and checks
  if there are any known, publicly disclosed, vulnerabilities.
@[https://www.owasp.org/index.php/OWASP_Dependency_Check]
[[}]]
● AsyncAPI.org [[{async/reactive.101,standards.openapi,qa.*,01_PM.TODO]]
@[https://www.asyncapi.org/]
- Building the future of event-driven architectures.
- Open source tools to easily build and maintain your event-driven architecture.
- All powered by the AsyncAPI specification, the industry standard for defining
  asynchronous APIs.
[[}]]

● Sign/Verify JARs [[{devops.*,security.cryptography,01_PM.TODO]]
@[https://docs.oracle.com/javase/9/tools/jarsigner.htm]

$ $ jarsigner file01.jar $keystore_alias   ← Sign Jar. use flag -sigalg ... to set sign. algorithm

$ $ jarsigner -verify file01.jar           ← Verify jar
[[}]]



● Non Classified/BackLog:
● Guava VisibleForTesting[qa] [[{data_structures.*,concurrency.*,qa.testing,01_PM.TODO]]
[[{data_structures.*,concurrency.*,qa.testing,01_PM.TODO]]
REF: @[https://stackoverflow.com/questions/6913325/annotation-to-make-a-private-method-public-only-for-test-classes]
@[https://guava.dev/releases/19.0/api/docs/com/google/common/annotations/VisibleForTesting.html]
[[}]]

● Javalin: Kiss Kotlin/Java web framework [[{01_PM.radar]]
@[https://javalin.io]
- Inspired by Javascript KOA.js framework

- Ex: Declare server and API in the same place
  | import io.javalin.ApiBuilder.*;
  | import io.javalin.Javalin;
  |
  | Javalin app = Javalin.create(config -> {
  |     config.defaultContentType = "application/json";
  |     config.addStaticFiles("/public");
  |     config.enableCorsForAllOrigins();
  | }).routes(() -> {
  |     path("users", () -> {
  |         get(UserController::getAll);
  |         post(UserController::create);
  |         path(":user-id", () -> {
  |             get(UserController::getOne);
  |             patch(UserController::update);
  |             delete(UserController::delete);
  |         });
  |         ws("events", userController::webSocketEvents);
  |     });
  | }).start(port);
[[}]]

[[{]]scalability.native_code" >
● JNR(JNI/UNIX friendly)
( used by Netty and others...)
-@[https://github.com/jnr/jnr-ffi]
   load native libraries without writing JNI code by hand, or using tools such as SWIG.
-@[https://github.com/jnr/jnr-unixsocket]
   jnr-unixsocket: UNIX domain sockets (AF_UNIX) for Java
-@[https://github.com/jnr/jnr-enxio]
   Java Native Runtime Enhanced X-platform I/O
-@[https://github.com/jnr/jnr-x86asm]
   Pure java x86 and x86_64 assembler
-@[https://github.com/jnr/jnr-a64asm]
  AArch64 assembler for the Java Native Runtime
-@[https://github.com/jnr/jnr-process]
  A ProcessBuilder look-alike based entirely on native POSIX APIs
-...
[[}]]

●  Java Platform Module System (JPMS) (1.9+) <!-- @ma --> [[{java_lang.101]]
Related:
- JEP 200: THE MODULAR JDK
- JEP 201: MODULAR SOURCE CODE
- JEP 220: MODULAR RUN-TIME IMAGES
- JEP 260: ENCAPSULATE MOST INTERNAL APIS
- JEP 261: MODULE SYSTEM
- JEP 275: MODULAR JAVA APPLICATION PACKAGING
- JEP 282: JLINK: THE JAVA LINKER
- JSR 376: JAVA PLATFORM MODULE SYSTEM
- JSR 379: JAVA SE 9
@[https://www.oracle.com/corporate/features/understanding-java-9-modules.html]
By Paul Deitel

module:
- higher level of aggregation above packages.
- uniquely named, reusable group of related packages and resources.

- module descriptor: (compiled version of module-info.java )
  /module-info.class  ( @ module root's folder)
  -------------------
  - name
  - dependencies (modules)
  - packages explicitly marked as available to other modules
    (by default  implicitly unavailable / strong encapsulation)
  - services offered
  - services consumed
  - module list allowed reflection

- Rules:
  - Each module must explicitly state its dependencies.
  - provides explicit mechanism to declare dependencies between
    modules in a manner that’s recognized both at   compile time
    and   execution time .

- The java platform is now modularized into ~ 95 modules
$ $ java --list-modules  ←  List modules in SE, JDK, Oracle, ...
  ( custom runtimes can be created )

  Module Declarations
$ $ cat module-info.java
  module java.desktop { ← body can be empty
     requires modulename; ← 'static' flag: required just at compile time.
     requires transitive java.xml; ← if a java.desktop method returns a type
                                     from the java.xml module, code using
                                     (reading) java.desktop become dependent
                                     on java.xml. Without 'transitive' compilation
                                     will fail.
     exports ...    ← declares module’s packages whose public types
                      (and their nested public and protected types)
                      are accessible to code in all other modules.
     exports to ... ← fine grained export
     uses           ← specifies a service used by this module
                      (making our module a service consumer).
                      → modules implements/extends the interface/abstract class

     provides...with ← specifies that a module provides a service implementation

     open 'package'  ← Specifies object introspection scope
     opens
     opens ... to

     transitive
  }


 --release $version compiler flag:                                            [troubleshooting]
  @[https://stackoverflow.com/questions/43102787/what-is-the-release-flag-in-the-java-9-compiler/]
   """ ... --release X is more than just a shortcut to -source X
       -target X because -source and -target are not sufficient to safely
       compile to an older release. You also need to set a -bootclasspath
       flag which must correspond to the older release (and this flag is
       often forgotten). So, in Java 9 they made a single --release flag
       which is a replacement for three flags: -source, -target and
       -bootclasspath.
[[}]]

● JAAS [[{security.aaa,01_PM.TODO]]
@[https://en.wikipedia.org/wiki/Java_Authentication_and_Authorization_Service]
- In UNIX, by default we authenticate against /etc/passwd, but the
  (P)lugable (A)uthentication (M)odule (PAM), allows to check against other sources.
  JAAS is similar to PAM for Java, allowing to offer a common AAA front-end to
  file/ddbb/LDAP/... backends.
[[}]]

● Eclipse Microprofile [[{standards.jee.microprofile,01_PM.TODO]]
@[https://dzone.com/articles/microprofile-5-things-you-need-to-know]

- launched at JavaOne 2016 to address the shortcomings in the Enterprise Java microservices space.

- MicroProfile specifies a collection of Java EE APIs and technologies which together
  form a core baseline microservice that aims to deliver application portability across multiple runtimes.

- MicroProfile 1.0 spec includes a subset of the 30+ Java Enterprise specifications:
  - JAX-RS 2.0 for RESTful endpoints
  - CDI 1.1 for extensions and dependency injection
  - JSON-P 1.0 for processing JSON messages.

- MicroProfile 1.2  (September 2017) include:
  - Configuration 1.1
  - Fault Tolerance
  - JWT
  - Metrics
  - Health Check

- MicroProfile 2.0 (Future). It is expected it will align all APIs to Java EE 8.

- vendors runtime support:
  - WebSphere Liberty IBM
  - TomEE from Tomitribe
  - Payara
  - RedHat's WildFly Swarm
  - KumuluzEE.

- Community support:
  - London Java Community
  - SOUJava
  - ...

- key code sample consists of four microservices and a front-end application.
  Vendor            |     JAR |      StartUp
                    | size/Mb | Time in Secs
  WebSphere Liberty |   35    |            7
  WildFly Swarm     |   65    |            6
  Payara            |   33    |            5
  TomEE             |   35    |            3
  KumuluzEE*        |   11    |            2

- CDI-Centric Programming Model
  - Context and Dependency Injection specification
  - Two of its most powerful features are interceptors and observers.
    - Interceptors perform cross-cutting tasks that are orthogonal to business logic
      such as auditing, logging, and security
    - The baked-in event notification model implements the observer
      pattern to provide a powerful and lightweight event notification system
      that can be leveraged system-wide.
[[}]]

● Concurrency Classes Video [[{concurrency.101,01_PM.TODO]]
@[https://www.youtube.com/watch?v=8yD0hHAz3cs&list=PLw8RQJQ8K1ySGcb3ZP66peK4Za0LKf728&index=4]
[[}]]

● JavaPoet [[{java_lang,01_PM.TODO]]
@[https://github.com/square/javapoet]
- Library/API for generating .java source files.
- Useful for things like:
  - annotation processing
  - interacting with metadata files (e.g., database schemas, protocol formats).
  - Transpiler (language A → Java Src ).
    keeping a single source of truth for the metadata .
[[}]]

● R2DBC API [[{async/reactive,persistence.sql,01_PM.TODO]]
@[https://www.infoq.com/news/2018/10/springone-r2dbc]
• Project initiated by Pivotal to provide an async/reactive alternative to JDBC.

  WARN : Since Spring Data R2dbc evolved very quickly, thre are plenty
         of breaking changes introduced since Spring 5.2 and Spring
         Data R2dbc 1.2.
         breaking changes (Compared to Spring Data R2dbc 1.1):
           · Spring Data R2dbc 1.1 DatabaseClient was split into two parts.
             a simple new DatabaseClient is part of Spring framework, as an
             alternative of Jdbc.
           · Another part of the old DatabaseClient is reorganized into a new
             class R2dbcEntityTemplate which acts as the role of JdbcTemplate.
  Ex:
  connectionFactory.create()
    .flatMapMany ( conn ->
       conn.createStatement ( "SELECT value FROM test" )
          .execute()
            .flatMap (result ->
              result.map(( row, metadata -→ row.get("value"))))

  spring:
    r2dbc:                 ← ... (src/main/resources/)application.yml  example:
      username: XXX
      password: XXX
      url: r2dbc:postgresql://...:5432/ddbb_app01
      pool:
        max-create-connection-time: 5s
        initial-size: 5        ←················ probably much lower numbers than
        max-size: 10                             those used for JDBC.
[[}]]

● Nailgun [[{devops.containarization,scalability.jvm,01_PM.troubleshooting,01_PM.TODO]]
- Nailgun is a client, protocol, and server for running Java programs
  from the command line without incurring the JVM startup overhead.

- Programs run in the server (which is implemented in Java), and are
  triggered by the client (written in C), which handles all I/O.

@[https://github.com/facebook/nailgun]
[[}]]

● 9 Profiling tools [[{java_lang.profiling,01_PM.troubleshooting,01_PM.TODO]]
@[https://blog.idrsolutions.com/2014/06/java-performance-tuning-tools/]
[[}]]

● jLine [[{java_lang.repl,java_lang.101,01_PM.low_code,01_PM.TODO]]
jLine: GNU/readline alike library for JAVA:
@[https://github.com/jline/jline3]
- Builtin support for console variables, scripts, custom pipes, widgets and object printing.
- Autosuggestions
- Language REPL Support
──────────────────────────────────────────────
● PicoCli
@[https://github.com/remkop/picocli]
@[https://picocli.info/]
  Picocli is a one-file framework for creating Java user-friendly
 (autocompletion, subcommands, ...)  command line  , GraalVM-enabled
  applications with almost zero code. It supports a variety of command
  line syntax styles including POSIX, GNU, MS-DOS and more. It
  generates highly customizable usage help messages that use ANSI
  colors and styles to contrast important elements and reduce the
  cognitive load on the user.
  - 1 source file so apps can include as source and avoid adding a dependency!!!

──────────────────────────────────────────────
● Clig.Dev
@[https://clig.dev/]
· Command Line Interface Guidelines
  · An open-source guide to help you write better command-line
    programs, taking traditional UNIX principles and updating them for
    the modern day.
    · ...
    · Use a command-line argument parsing library where you can. Either
       your language’s built-in one, or a good third-party one. They will
       normally handle arguments, flag parsing, help text, and even spelling
       suggestions in a sensible way.

· Note: Alternatives in other languajes:
  · Go: Cobra, cli
  · Node: oclif
  · Python: Click, Typer
  · Ruby: TTY
  · Rust: clap, structopt
  · PHP: console
[[}]]

● A Year with Java 11 in Production!  [[{01_PM.TODO]]
@[https://www.infoq.com/presentations/java-11-production-story/?itm_source=www.oficina24x7.com]
Andrzej Grzesik talks about Revolut’s experience in running Java 11 in production for over a year. He talks about the doubts they had, some pain points and gains, as well as surprises that surprised them. He discusses tools, alternative JVM languages, and some 3rd party products.
[[}]]

● Aviam:Light Weight JVM [[{jvm,01_PM.TODO]]
https://readytalk.github.io/avian/  ("Embedded java")
Avian is a lightweight virtual machine and class library designed to
provide a useful subset of Java’s features, suitable for building
self-contained applications.

From Mike's blog: https://blog.plan99.net/kotlin-native-310ffac94af2
  | Enter Avian
  |
  |     “Avian is a lightweight virtual machine and class library
  |    designed to provide a useful subset of Java’s features, suitable
  |    for building self-contained applications.”
  |
  | So says the website. They aren’t joking. The example app demos
  | use of the native UI toolkit on Windows, MacOS X or Linux. It’s not
  | a trivial Hello World app at all, yet it’s a standalone
  | self-contained binary that clocks in at only one megabyte. In
  | contrast, “Hello World” in Go generates a binary that is 1.1mb in
  | size, despite doing much less.
  |
  | Avian can get these tiny sizes because it’s fully focused on
  | doing so: it implements optimisations and features the standard
  | HotSpot JVM lacks, like the use of LZMA compression and ProGuard to
  | strip the standard libraries. Yet it still provides a garbage
  | collector and a JIT compiler.
[[}]]

● R2DBC [[{persistence.sql,async/reactive,01_PM.radar]]
https://www.infoq.com/news/2018/10/springone-r2dbc
  Experimental Reactive Relational Database Connectivity Driver, R2DBC, Announced at SpringOne
[[}]]
● jEnv [[{devops,01_PM.TODO]]
@[http://www.jenv.be/]

 command line tool to help you forget how to set the JAVA_HOME environment variable:

  Configuration:
 $ jenv add /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
   oracle64-1.6.0.39 added
 $ jenv add /Library/Java/JavaVirtualMachines/jdk17011.jdk/Contents/Home
   oracle64-1.7.0.11 added

  Ussage:
  List managed JDKs

  $ jenv versions
    system
    oracle64-1.6.0.39
    * oracle64-1.7.0.11 (set by /Users/hikage/.jenv/version)

  $ jenv global oracle64-1.6.0.39 Configure global version
  $ jenv local oracle64-1.6.0.39 Configure local version (per directory)
  $ jenv shell oracle64-1.6.0.39 Configure shell instance version
[[}]]

● SmallRye Mutiny [[{async/reactive.rxjava,async/reactive,doc_has.comparative,qa,01_PM.TODO]]
@[https://smallrye.io/smallrye-mutiny/]

• SmallRye Mutiny is a reactive programming library. Wait? Another one?  Yes!
• Mutiny is designed after having experienced many issues with other
  Reactive programming libraries and having seen many developers lost
  in an endless sequence of flatMap. Mutiny takes a different approach.
  First, Mutiny does not provide as many operators as the other famous
  libraries, focusing instead on the most used operators. Furthermore,
  Mutiny provides a more guided API, which avoids having classes with
  hundreds of methods that cause trouble for even the smartest IDE.
  Finally, Mutiny has built-in converters from and to other reactive
  programing libraries, so you can always pivot.
[[}]]



● Inmmutable Objects are faster [[{java_lang.101,qa,01_PM.TODO]]
https://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html
[[}]]

● Netty [[{async/reactive.io.network,doc_has.comparative,01_PM.radar,01_PM.backlog]]
- One Framework to rule them all by Norman Maurer
@[https://www.youtube.com/watch?v=DKJ0w30M0vg]
──────────────────────────────────────────────
● Apache MINA:Netty Alt.
• Apache MINA vs Netty: https://www.youtube.com/watch?v=A2pWsxPWJuc
• network application framework which helps users develop high
  performance and high scalability network applications easily. It provides an
  abstract event-driven asynchronous API over various transports such as TCP/IP
  and UDP/IP via Java NIO.

• Apache MINA is often called:
  - NIO framework library
  - client server framework library, or
  - a networking socket library

• Apache MINA comes with many subprojects :
  - Asyncweb : An HTTP server build on top of MINA asynchronous framework
  - FtpServer : A FTP server
  - SSHd : A Java library supporting the SSH protocol
  - Vysper : An XMPP server
[[}]]
[[}]]


● SwarmCache [[{scalability.distributed,scalability.cache,persistence.jpa,01_PM.low_code,01_PM.TODO]]
SwarmCache is a simple but effective distributed cache. It uses IP
multicast to efficiently communicate with any number of hosts on a
LAN. It is specifically designed for use by clustered,
database-driven web applications. Such applications typically have
many more read operations than write operations, which allows
SwarmCache to deliver the greatest performance gains. SwarmCache uses
JavaGroups internally to manage the membership and communications of
its distributed cache.

Wrappers have been written that allow SwarmCache to be used with the
Hibernate and JPOX persistence engines.
[[}]]

● bytes java [[{01_PM.backlog]]
@[https://github.com/patrickfav/bytes-java]
- utility library that makes it easy to create, parse, transform,
  validate and convert byte arrays in Java
[[}]]

● 3 NIO ways to read files [[{async/reactive.io,persistence.fs,01_PM.TODO]]
@[https://howtodoinjava.com/java7/nio/3-ways-to-read-files-using-java-nio/]
- read small file using ByteBuffer and RandomAccessFile
- FileChannel and ByteBuffer to read large files
- Example 3: Reading a file using memory-mapped files in Java
[[}]]

● JLink [[{devops.containarization,01_PM.TODO]]
@[https://docs.oracle.com/javase/9/tools/jlink.htm]
- You can use the jlink tool to assemble and optimize a set of modules
  and their dependencies into a custom runtime image

TODO:
@[https://medium.com/azulsystems/using-jlink-to-build-java-runtimes-for-non-modular-applications-9568c5e70ef4]
[[}]]

[[{java_lang.configuration,standards.JSR330,qa,doc_has.comparative,Spring,standards.JSR330]]
● Spring vs Google Guice
@[https://www.baeldung.com/guice-spring-dependency-injection]
────────────────────────
● Dependency injection
@[http://www.theserverside.com/feature/Spring-vs-Guice-The-Clash-of-the-IOC-Containers]
A: t's important to realize that Dagger was created after Guice, by one
of Guice's creators ("Crazy Bob" Lee) after his move to Square:
- Spring was originally released in October 2002.
- Google originally publicly released Guice in March 2007.
- JSR-330 formalized javax.inject annotations in October 2009,
  with heavy input from Google (Bob Lee), Spring, and other industry
  players.
- Square originally released Dagger 1 publicly in May 2013.
- Google originally released Dagger 2 publicly in April 2015.
- Square marked Dagger 1 as deprecated 10 days ago,
  on September 15, 2016.
● JSR-330: Provider<MyTargetBean>
@[http://javax-inject.github.io/javax-inject/]

FROM https://github.com/google/guice/wiki/JSR330
- JSR-330 standardizes annotations like @Inject and the Provider
  interfaces for Java platforms.
- It doesn't currently specify how applications are configured, so it
  has no analog to Guice's modules.
[[}]]

● Crypto.API(JCA) [{security.cryptography,security.secret_mng,security.aaa,01_PM.TODO]]
  WARN : Prefer a high level cryptographic API like Google Tink
         when possible.

  - See also:
    - Cryptography map:
    @[../General/cryptography_map.html]

    - Bounce Castle FIPS JCA provider
    @[https://www.bouncycastle.org/fips-java/BCFipsIn100.pdf]

    PKCS#11 Ref.guide : [TODO]
  @[https://docs.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html]
  About PCKS#11: @[http:./../General/cryptography_map.html?topics=pkcs]
[[}]]

● Loading properties [[{java_lang.configuration,01_PM.low_code,01_PM.TODO]]
NOTE: Probably is better to use ENV.VARs to simplify compatibility
      with container deployments.

Config properties files located in .../src/main/resources/db_config.properties

InputStream is = getClass().getResurceAsStream("/db_config.properties");
Properties props = new Properties();
props.load(is);
is.close();

└ How to add comments to properties file:
  https://www.tutorialspoint.com/how-to-read-write-data-from-to-properties-file-in-java
[[}]]

● XML Stream parsing [[{persistence.xml,01_PM.TODO]]
[TODO]: Write summary of best XML libraries.
@[https://github.com/FasterXML/aalto-xml]
@[http://www.studytrails.com/java/xml/aalto/java-xml-aalto-stax-async-basic/]
@[https://docs.oracle.com/javase/tutorial/jaxp/stax/why.html]
@[https://gist.github.com/shvalb/38cc8f454ee84a2032d2b341a9b8aeae]
@[http://www.studytrails.com/java/xml/aalto/java-xml-aalto-introduction/]
@[https://gist.github.com/shvalb/38cc8f454ee84a2032d2b341a9b8aeae]
[[}]]

● CGLIB library [[{JVM.101,01_PM.TODO]]
- CGLIB library: Used for bytecode generation/method injection (Used by
  Spring Framework for example).
[[}]]

● Debugger Architecture [[{java_lang.debugging,01_PM.troubleshooting,01_PM.TODO]]
https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/jdwp-spec.html
https://en.wikipedia.org/wiki/Java_Platform_Debugger_Architecture
https://www.baeldung.com/spring-debugging
[[}]]

● Spring Reactor/Spring-Async [[{async/reactive.rxjava,async/reactive,doc_has.comparative,01_PM.TODO]]
@[https://ordina-jworks.github.io/reactive/2016/12/12/Reactive-Programming-Spring-Reactor.html]
@[https://spring.io/blog/2013/05/13/reactor-a-foundation-for-asynchronous-applications-on-the-jvm]
@[https://spring.io/guides/gs/async-method/]
• Q:"Why Reactor when there's already RxJava2?"
   - RxJava2 is java 6 while for Reactor the Spring team decided to go all in
     and focus only on Java 8. This means that you can make use of all the new
     and fancy Java 8 features.
     - If you are going to use Spring 5, Reactor might be the better option.
     - But if you are happy with your RxJava2, there is no direct need to migrate to Reactor."""
<hr/>
● Reactive Spring with Vert.x
@[https://developers.redhat.com/blog/2019/08/21/reactive-spring-boot-programming-with-vert-x/]
- Reactive Spring Boot programming with Vert.x
  The latest bundle of Red Hat supported Spring Boot starters was recently
  released. In addition to supporting the popular Red Hat products for our Spring
  Boot customers, the Red Hat Spring Boot team was also busy creating new ones.
  The most recent technical preview added is a group of Eclipse Vert.x Spring
  Boot starters, which provide a Spring-native vocabulary for the popular JVM
  reactive toolkit.

[[}]]

● Example JVM config.  [[{jvm,scalability.jvm,01_PM.TODO]]
Server version:        Apache Tomcat/8.x
Server built:          unknown
Server number:         8.0.x
OS Name:               Linux
OS Version:            3.10.0-1062.9.1.el7.x86_64
Architecture:          amd64
Java Home:             /ec/local/appserver/u000/app/java/jdk1.8.0_121-strong/jre
JVM Version:           1.8.0_121-b13
JVM Vendor:            Oracle Corporation
Command line argument: -Djava.util.logging.config.file=.../logging.properties
Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager
Command line argument: -Djdk.tls.ephemeralDHKeySize=2048
Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources
Command line argument: -Xms1536m
Command line argument: -Xmx1536m
Command line argument: -XX:MetaspaceSize=512m
Command line argument: -XX:MaxMetaspaceSize=512m
Command line argument: -XX:MaxDirectMemorySize=1G
Command line argument: -XX:+UseParallelGC
Command line argument: -XX:ParallelGCThreads=4
Command line argument: -XX:+UseParallelOldGC
Command line argument: -XX:LargePageSizeInBytes=4m
Command line argument: -XX:-BindGCTaskThreadsToCPUs
Command line argument: -Djava.awt.headless=true
Command line argument: -Dsun.net.inetaddr.ttl=60
Command line argument: -Dsun.net.inetaddr.negative.ttl=5
Command line argument: -Djava.io.tmpdir=/_tmp
Command line argument: -Dfile.encoding=UTF-8
Command line argument: -XX:ErrorFile=./logs/fatal_error/hs_err_pid%p.log
Command line argument: -Dcom.sun.management.jmxremote=true
Command line argument: -Dcom.sun.management.jmxremote.login.config=Tomcat
Command line argument: -Djava.security.auth.login.config=..../login.config
Command line argument: -Dcom.sun.management.jmxremote.access.file=.../jmxremote.access
Command line argument: -Dcom.sun.management.jmxremote.ssl=false
Command line argument: -Djava.rmi.server.hostname=tcsn0201.cc.cec.eu.int
Command line argument: -Dcom.sun.management.jmxremote.ssl.need.client.auth=false
Command line argument: -verbose:gc
Command line argument: -Xloggc:....API_TEST-gc.log
Command line argument: -XX:+PrintGCDetails
Command line argument: -XX:+PrintGCTimeStamps
Command line argument: -XX:+PrintTenuringDistribution
Command line argument: -XX:+PrintGCApplicationConcurrentTime
Command line argument: -XX:+PrintGCApplicationStoppedTime
Command line argument: -Djava.endorsed.dirs=.../tomcat8/endorsed
Command line argument: -Dcatalina.base=...
Command line argument: -Dcatalina.home=...
Command line argument: -Djava.io.tmpdir=.../temp
[[}]]

● mvn: Default Wrapper in 3.7 [[{DevOps.maven,01_PM.TODO]]
https://www.infoq.com/news/2020/04/maven-wrapper/
<hr/>
● Java on VC.Studio
https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-february-2020/?WT.mc_id=social-reddit-marouill
[[}]]

● Vert.x 3.9 Fluent API Query [[{vertx,01_PM.TODO]]
https://developers.redhat.com/blog/2020/05/25/red-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query/
Red Hat build of Eclipse Vert.x 3.9 brings Fluent API Query
[[}]]

● JHSDB [[{java_lang.debugging,monitoring.forensic,01_PM.TODO]]
https://docs.oracle.com/en/java/javase/12/tools/jhsdb.html
- You use the jhsdb tool to attach to a Java process or to a core dump
  from a crashed Java Virtual Machine (JVM).

- jhsdb is a Serviceability Agent (SA) tool. Serviceability Agent (SA)
  is a JDK component used to provide snapshot debugging, performance
  analysis and to get an in-depth understanding of the Hotspot JVM and
  the Java application executed by the Hotspot JVM.

- Even though native debuggers like gdb are available for examining the
  JVM, unlike jhsdb, these native debuggers do not have an inbuilt
  understanding of the data structures in Hotspot and hence, are not
  able to throw insights on the Java application being executed. jhsdb
  knows about the locations and address ranges of crucial components of
  the JVM like the Java heap, heap generations, regions, code cache,
  etc.
[[}]]

● GraalVM Native Image [[{devops.containarization,scalability.jvm.graalvm,cloud.serverless,01_PM.TODO]]
@[https://jamesward.com/2020/05/07/graalvm-native-image-tips-tricks/]

| FROM oracle/graalvm-ce:20.0.0-java11 as builder
| WORKDIR /app
| COPY . /app
|
| RUN gu install native-image
|
| # Build the app (via Maven, Gradle, etc) and create the native image
| FROM scratch
| COPY --from=builder /app/target/my-native-image /my-native-image
| ENTRYPOINT ["/my-native-image"]

- to build a statically linked native image:
  --static

  ...Luckily GraalVM has a way to also include the necessary system
  libraries in the static native image with musl libc:
  - In your Dockerfile download the musl bundle for GraalVM:

| RUN curl -L -o musl.tar.gz \
|     https://github.com/gradinac/musl-bundle-example/releases/download/v1.0/musl.tar.gz ⅋⅋ \
|     tar -xvzf musl.tar.gz

  And then add a native-image parameter that points to the extracted location of the bundle, like:

  -H:UseMuslC=bundle/

  Now your native image will include the standard library system calls that are needed!

- If AOT thing fails, it will fallback to just running the app in the JVM.
  To avoid it running on the JVM:
  --no-fallback

- FAIL-FAST: Don't Defer Problems to Runtime
  - make sure native-image is NOT being run with any of these params:
    --report-unsupported-elements-at-runtime
    --allow-incomplete-classpath
    -H:+ReportUnsupportedElementsAtRuntime

- Reflection Woes:
  - reflection happens at runtime, making it hard for an AOT complier.
  - you can tell GraalVM about what needs reflection access,
    but this can quickly get a bit out-of-hand, hard to derive and maintain.
  - Micronaut and Quarkus do a pretty good job generating the reflection
    configuration at compile time but you might need to augment the
    generated config. (tricky with shaded transitive dependencies).

  - To reliably generate a reflection config you need to exercise as many
    execution code paths as possible, ideally by running unit/integration tests.
  - GraalVM has a way to keep track of reflection and output the configuration.
    - Run the app on GraalVM and use a special Java agent that will be able to
      see the reflective calls.
    STEPS:
      - grab GraalVM Community Edition:
      - set JAVA_HOME and PATH.
      - from release assets grab the right native-image-installable-svm-BLAH.jar file
        and extract it in the root of your GraalVM JAVA_HOME directory.
      - run tests with parameter:
        -agentlib:native-image-agent=config-output-dir=src/graal"
        (This will generate the reflection config (and possibly other configs for
         dynamic proxies, etc).
      - tell native-image about those configs, like:
        -H:ReflectionConfigurationFiles=src/graal/reflect-config.json

   - For Quarkus ⅋ Micronaut see their docs (Quarkus / Micronaut) for details on
     how to add your own reflection config files.
[[}]]

● Async Servlets 3.0+: [[{async/reactive.servlets,standards.jee.servlets,01_PM.TODO]]
https://www.infoworld.com/article/2077995/java-concurrency-asynchronous-processing-support-in-servlet-3-0.html
[[}]]

● Real-World Java 9 [[{async/reactive.101,java_lang.flow_api,java_lang.101,01_PM.TODO]]
@[https://www.infoq.com/presentations/java9-flow-stream-api/?utm_source=oficina24x7.com]

• Real-World Java 9:
  Trisha Gee shows via live coding how we can use the new Flow API to
  utilize Reactive Programming, how the improvements to the Streams API
  make it easier to control real-time streaming data and how the
  Collections convenience methods simplify code. She talks about other
  Java 9 features, including some of the additions to interfaces and
  changes to deprecation.
[[}]]

● SummaryStatistics(1.8+) [[{java_lang.functional,01_PM.TODO]]
- Three of the new classes introduced in JDK 8 are
  DoubleSummaryStatistics, IntSummaryStatistics,
  andLongSummaryStatistics of the java.util package. These classes make
  quick and easy work of calculating total number of elements, minimum
  value of elements, maximum value of elements, average value of
  elements, and the sum of elements in a collection of doubles,
  integers, or longs. Each class's class-level Javadoc documentation
  begins with the same single sentence that succinctly articulates
  this, describing each as "A state object for collecting statistics
  such as count, min, max, sum, and average."
[[}]]

● Deplo WAR to k8s with JKube [[{devops.containarization,standards.jee.war,cloud.k8s]]
@[https://developers.redhat.com/blog/2020/07/27/deploy-your-java-web-application-into-the-cloud-using-eclipse-jkube/]

• JKube Maven  converts war (dependent of a container) into cloud-native app.

  - pom.xml:
    <!-- ... -->
    <packaging>war</packaging>
    <!-- ... -->
    <properties>
      <maven.compiler.source>11</maven.compiler.source>
      <maven.compiler.target>11</maven.compiler.target>
      <failOnMissingWebXml>false</failOnMissingWebXml>  ← configure maven-war-plugin so
                                                          that it won't fail due
      <!-- ... -->                                        to a missing web.xml file.

      <jkube.enricher.jkube-service.type>NodePort</jkube.enricher.jkube-service.type>
      └────────────────────────────────┬────────────────────────────────────────────┘
      configure JKube to create service-resource manifest using NodePort as the spec.type.

    </properties>
    <dependencies>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>${version.spring}</version>
      </dependency>
      <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>4.0.1</version>
        <scope>provided</scope>
      </dependency>
    </dependencies>
    <build>
      <plugins>
        <plugin>
          <groupId>org.eclipse.jkube</groupId>
          <artifactId>kubernetes-maven-plugin</artifactId> ← Alt: openshift-maven-plugin.
          <version>${version.jkube}</version>
        </plugin>
        <!-- ... -->
      </plugins>
    </build>

• example project contains three Java classes:
  └ ExampleInitializer: replaces standard WEB-INF/web.xml
    registering Spring's DispatcherServlet directly.

       final AnnotationConfigWebApplicationContext context
              = new AnnotationConfigWebApplicationContext();
       context.register(ExampleConfiguration.class);
       context.setServletContext(servletContext);
       final ServletRegistration.Dynamic dsr
              = servletContext.addServlet("dispatcher",
                new DispatcherServlet(context));
       dsr.setLoadOnStartup(1);
       dsr.addMapping("/");

  └ ExampleConfiguration: Spring-specific config enabling Spring MVC.

  └ ExampleResource: standard Spring @RestController.

- Deploy to Kubernetes:
    $ mvn clean package    ← generate war in target/
    $ mvn k8s:build        ← Build OCI image (webapp/example:latest)
                             using jkube/jkube-tomcat9-binary-s2i by default.
                             Alternatives like Jetty can be used
    $ mvn k8s:resource     ← create required cluster config resource manifests
    $ mvn k8s:apply        ← apply to (kubectl configured) cluster
    $ kubectl get pod      ← Verify that app is running
    $ mvn k8s:log          ← Retrieve app Logs
[[}]]

[[{]]java_lang.101,java_lang.configuration,01_PM.low_code,01_PM.TODO" bgorange>
● Running *.java (java 11+)
@[https://www.infoq.com/articles/single-file-execution-java11/] by Mohamed Taman
  public class HelloUniverse{
      public static void main(String[] args){
        if ( args == null || args.length != 1 ){
           throw RuntimeException("Name required");
        }
        System.out.printf("Hello, %s to InfoQ Universe!! %n", args[0]);
      }
  }
                                    Before Java 11:
  $ $ javac ./HelloUniverse.java      ← compile (./HelloUniverse.class generated)
  $ $ java  ./HelloUniverse  arg1     ← start up JVM, load class, execute code

                                    After Java 11 (JEP 330)
  $ $ java HelloUniverse.java arg1    ← compile, start up JVM, load class, execute code
                                        (no ./*.class generated on disk)
                                        Use $ java HelloUniverse.java --source $version
                                        when .java extension is not available or to
                                        specify the language version of the source code.
                                      - By default compiled code is part of an unnamed module.
                                        Add flag --add-modules=ALL-DEFAULT to have access to
                                        standard modules in JDK.



  - Run *.class file         ← Java launcher 1.0+
  - Run JAR's    main class  ← Java launcher 1.0+
  - Run Module's main class  ← Java launcher 9+
  - Run class in source.java ← Java launcher 11+

  - Integrate with UNIX scripting using the old beloved Shebang notation:
  $ $ cat script.java
    #!/path/to/java --source $version
    public class HelloUniverse{
        public static void main(String[] args){
          ...
        }
    }

<hr/>

<span xsmall bgorange>JBang: Simplified Java
@[https://www.youtube.com/watch?v=X4x2jM3Y0uE]
[[}]]

● Conclave [[{security.secret_mng,01_PM.TODO]]
https://medium.com/corda/conclave-beta-3-graalvm-mail-more-5038bd6d50da
Today we’re announcing a new beta release of Conclave, a platform
that makes it easy to use secure hardware enclaves with Java. You can
use enclaves to:
- Solve complex multi-party data problems, by running programs on a
  computer that prevents the hardware owner from seeing the
  calculations.
- Protect sensitive data from the cloud.
- Make your hosted service auditable and trustworthy.
- Upgrade privacy on distributed ledger platforms like Corda.
[[}]]

● Checkpointing outside the JVM [[{scalability.JVM,DevOps,01_PM.TODO]] #[jvm_app_checkpoint]
@[https://developers.redhat.com/blog/2020/10/15/checkpointing-java-from-outside-of-java/]
When OpenJDK‘s Java virtual machine (JVM) runs a Java application,
it loads a dozen or so classes before it starts the main class.

  STANDARD JVM START "WARM-UP"  vs   NEW APPROACH: WARM UP ONCE
  ----------------------------       ---------------------------
 - runs method several hundred       - 1st  run : WARM Up once and checkpoint
   times before optimizing it.       - Next runs: restore checkpointed app.
  cost of long startup times.          Start time seconds → millisecs!!!

  Checkpoint inside JVM HOW-TO:  [TODO]
@[https://www.jfokus.se/jfokus19-preso/Checkpointing-Java.pdf]

  Checkpoint Outside JVM HOW-TO:
        - Under the hood it uses Linux Checkpoint/Restore in Userspace (CRIU).
        @[https://www.criu.org/Main_Page]

  $ CONSOLE 1                              CONSOLE
  $ $ setsid java -XX:-UsePerfData \     $ $ sudo criu dump -t $pid \    ← stops and checkpoint
  $     -XX:+UseSerialGC Scooby          $    --shell-job -o dump.log      app

                                         $ $ sudo restore --shell-job \  ← Restore app
                                         $    -d -vvv -o restore.log
[[}]]

● JfrUnit [[{qa.testing,scalability.profiling,01_PM.TODO]]
@[https://github.com/moditect/jfrunit]
- JUnit extension for asserting JDK Flight Recorder events
  emitted by an application identifying performance regressions
  (e.g. increased latencies, reduced throughput).

- JfrUnit supports assertions not on metrics like latency/throughput
  themselves, but on indirect metrics which may impact those.
  - memory allocation,
  - database IO
  - number of executed SQL statements
  - ...

- JfrUnit provide means of identifying and analysizing such issues in
  a reliable, environment independent way in standard JUnit tests,
  before they manifest as performance regressions in production.
[[}]]

● Jrpip: Low code RMI [[{architecture.distributed,01_PM.low_code,01_PM.TODO]] #[jrpip]
  Let developers concentrate on logic vs network plumbing and TCP errors.
- Jrpip mplements remote interface method invocation which allows different
  Java processes to interact with one another.
- designed to increase developer efficiency by providing useful features, such as
  the ability to deploy in any servlet container, interface
  implementation that doesn’t require RemoteException and automatic
  retries with once-execute semantics.
- efficient binary protocol that is streamed, reducing memory
  consumption and garbage collector issues.

- See also notes on gRPC:
  @[./java_map.html?query=grpc]
  @[../WebTechnologies/map.html?topics=grpc&showSearchMenu=false]
[[}]]

● Tablasco [[{qa.testing.data,architecture.batch,01_PM.low_code,01_PM.TODO]]
@[https://github.com/goldmansachs/tablasco]
- (By Goldman Sasch) JUnit rule that adds table verification to unit
  tests. For software products that produce large amounts of data, this
  tool can help to create automated tests that are both comprehensive
  and easy to maintain. Users only need to adapt their existing data to
  a table format that Tablasco understands. “Every test produces a
  color-coded HTML break report, which helps users quickly identify the
  issue,” said Barry, a vice president in the Technology Division.
  Furthermore, Tablasco features automated baseline management,
  allowing users to easily update the baseline file of a failing test.

- JUnit rule for comparing tables and Spark module for comparing large data sets.
[[}]]




● SMTP: Sending mail [[{messaging.mail.smtp,security.notifications]]
- Based on AWS guide @[https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-using-smtp-java.html]
  but applies to any standard SMTP e-mail server.

  - pom coordinates:
    <dependency>
        <groupId>com.sun.mail</groupId>
        <artifactId>javax.mail</artifactId>
        <version>1.6.2</version>
    </dependency>

  import java.util.Properties;

  import javax.mail.Message;
  import javax.mail.Session;
  import javax.mail.Transport;
  import javax.mail.internet.InternetAddress;
  import javax.mail.internet.MimeMessage;

  public class SendMailThroughSMTP {

      static final String
          FROM     = "...", // ← in AWS this address must be verified
          FROMNAME = "...", // ← Human readable FROM
          TO       = "...", // ← in AWS if sending account is still in the
                            //   sandbox this address must be  case-sensitive  verified.

          CONFIGSET = "ConfigSet", // ← Configuration Set name used for this message.
                                   //  If commented out remove header below.   *
          BODY      = String.join( "\n",
              "<h1>header</h1>", "html line2", "html line3", "..." ),
          SMTP_HOST = "email-smtp.us-west-2.amazonaws.com",
          SMTP_USERNAME = "..." , //  *
          SMTP_PASSWORD = "...";
          // SMTP_HOST REF: https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html#region-endpoints

      static final int PORT = 587; // The port you will connect to on the Amazon SES SMTP endpoint.


      public static void main(String[] args) throws Exception {
          final Properties props = System.getProperties();
          props.put("mail.smtp.port"           , PORT  );
          props.put("mail.transport.protocol"  , "smtp");
          props.put("mail.smtp.starttls.enable", "true");
          props.put("mail.smtp.auth"           , "true");
          Session session = Session.getDefaultInstance(props); // ← represents mail session

          final MimeMessage
              msg = new MimeMessage(session);    // ← Build message
              msg.setFrom(new InternetAddress(FROM,FROMNAME));
              msg.setRecipient(
                     Message.RecipientType.TO,
                     new InternetAddress(TO));
              msg.setSubject(MAIL_SUBJECT);
              msg.setContent(HTML_BODY,"text/html");
              msg.setHeader(                     // Remove if not using a configuration set
                     "X-SES-CONFIGURATION-SET",
                     CONFIGSET);

          final Transport transport =            // ← Create transport
              session.getTransport();

          try { // Send the message.
              transport.connect(SMTP_HOST, SMTP_USERNAME, SMTP_PASSWORD); // Connect to SMTP using username/pass
              transport.sendMessage(msg, msg.getAllRecipients());    // Send email.
          } catch (Exception ex) {
              // process and rethrow
          }
          finally { transport.close(); }
      }
  }

   *  : More info at
       https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html

   *  : AWS note, SMTP credentials are different to AWS credentials.
        SMTP username credential is 20-chars (letters and numbers)
[[}]]

● jFleet [[{scalability.persistence,persistence.jpa,persistence.sql,01_PM.TODO]]
@[https://github.com/jerolba/jfleet]
· JFleet is a Java library which persist in database large collections
  of Java POJOs as fast as possible, using the best available technique
  in each database provider, achieving it with alternate persistence
  methods from each JDBC driver implementation.

· Its goal is to store a large amount of information in a single table
  using available batch persistence techniques.

· despite being able to use JPA annotations to map Java objects to
  tables and columns, JFleet is not an ORM.
[[}]]

● JVM Anatomy [[{jvm.101,01_PM.TODO]]
https://shipilev.net/jvm-anatomy-park/
https://shipilev.net/jvm-anatomy-park/22-safepoint-polls/
[[}]]

● Java Class Library (JCL, rt.jar) [[{java_lang.101,01_PM.TODO]]
rt.jar contains the Java Class Library (JCL)
https://en.wikipedia.org/wiki/Java_Class_Library

- The Java Class Library (JCL) is a set of dynamically loadable
  libraries that Java applications can call at run time. Because the
  Java Platform is not dependent on a specific operating system,
  applications cannot rely on any of the platform-native libraries.
  Instead, the Java Platform provides a comprehensive set of standard
  class libraries, containing the functions common to modern operating
  systems.

- Java Class Library (JCL) is almost entirely written in Java, except
  for the parts that need direct access to the hardware and operating
  system (such as for I/O or bitmap graphics). The classes that give
  access to these functions commonly use Java Native Interface wrappers
  to access operating system APIs.

- The Java Class Library (rt.jar) is located in the default bootstrap
  classpath[1] and does not have to appear in the classpath declared
  for the application. The runtime uses the bootstrap class loader to
  find the JCL.

  The Java Module System (part of the Java 9 release) broke the
  monolithic "rt.jar" JAR file and modularized the JCL itself in
  several modules with specified dependencies.
[[}]]

● Java Threading resources [[{concurrency,01_PM.TODO]]
@[https://avaldes.com/?s=java+thread]

- Java Thread, Concurrency and Multithreading Tutorial
- Java Threads and Concurrent Locks with Examples
  https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Lock.html
- Java Thread Deadlock Example and Thread Dump Analysis using VisualVM
- Java Thread Starvation and Livelock with Examples
- Examining Volatile Keyword with Java Threads
- Java Threads Wait, Notify and NotifyAll Example
[[}]]

● JIMFS [[{async/reactive.io,persistence.fs,01_PM.TODO]]
@[https://github.com/google/jimfs]
- Jimfs supports almost all the APIs under java.nio.file:
  - Create/delete/move/Copy  files/dirs.
  - Read/write files with FileChannel/SeekableByteChannel/InputStream/OutputStream/...
  - Symbolic links.
  - Hard links to regular files.
  - SecureDirectoryStream, for operations relative to an open directory.
  - Glob and regex path filtering with PathMatcher.
  - Watching for changes to a directory with a WatchService.
  - Built-in (file) attribute views that can be supported include
    "basic", "owner", "posix", "unix", "dos", "acl" and "user".
- Simple ussage:
  import com.google.common.jimfs.Configuration;
  import com.google.common.jimfs.Jimfs;
  ...

  // For a simple file system with Unix-style paths and behavior:
  final FileSystem fs = Jimfs.newFileSystem(Configuration.unix());
  final Path foo = fs.getPath("/foo");
  Files.createDirectory(foo);
  final Path hello = foo.resolve("hello.txt");
  Files.write(hello, ImmutableList.of("hello world"), StandardCharsets.UTF_8);


[[}]]

● Java Poet [[{01_PM.backlog]]
@[https://github.com/square/javapoet]
• Java API for generating .java source files.
• useful for:
  - transpiling: Custom language to java.
  - annotation processing
  - interacting with metadata files (database schemas, protocol formats,...).

• Avoid boilerplate while also keeping a  single source of truth .
[[}]]

● Storing HttpSessions to Redis [[{persistence.session,cache,architecture.distributed]]
@[https://github.com/AmadeusITGroup/HttpSessionReplacer]
AmadeusITGroup/HttpSessionReplacer: Store JEE Servlet HttpSessions in Redis
[[}]]

● Dekorate k8s annotations [[{cloud.k8s,01_PM.backlog]]
@[https://developers.redhat.com/blog/2021/03/17/using-dekorate-to-generate-kubernetes-manifests-for-java-applications/]
• ex:
  JAVA ANOTATION INPUT
  ====================
  @KubernetesApplication(
     name = "hello-world-fwless-k8s",
     ports = @Port(name = "web", containerPort = 8080),
     expose = true,
     host = "fw-app.127.0.0.1.nip.io",
     imagePullPolicy = ImagePullPolicy.Always
  )

  Kubernetes Output:
  ====================
  · target/classes/META-INF/dekorate/kubernetes.yml
    Use like:
  $ $ kubectl create ns demo
  $ $ kubectl apply -f kubernetes.yml -n demo
  · target/classes/META-INF/dekorate/kubernetes.json

• Integration with Jib to generate OCI images is also available.
[[}]]

● Servlet servers Arch [[{01_PM.TODO,standards.jee.servlets]]
embedded servers usually comprise two logical components:

┌───────────────────────────────────┬────────────────────────────────
│  LOGICAL COMPONENT                │  TOMCAT equivalent
├───────────────────────────────────┼────────────────────────────────
│  a web server component           │  Coyote
│  listening for HTTP requests and  │
│  returning HTTP responses         │
├───────────────────────────────────┼────────────────────────────────
│  an execution context to make     │  Catalina, based on Servlet API
│  a Java web application interact  │  (usually called the Servlet
│  with the web server.             │  Container)
└───────────────────────────────────┴────────────────────────────────
[[}]]

● Yourkit profiler [[{java_lang.profiling,01_PM.radar]]
@[https://www.yourkit.com/java/profiler/features/]
• Yourkit: commercial (non OOSS) profiler with advanced features
• Tight integration with your IDE
• "Smart what if"  allows to evaluate performance gains of supposed optimizations
  without re-profiling the application.
• CPU call tree
• Flame graphs
• Database queries and web requests:
  - display slow SQL queries and web requests.
  (support for MongoDB, Cassandra, HBase,...)

• Memory profiling: object heap, traversing of object graph.
  The Profiler chooses the best way to show you a content of a HashMap, String, ... ).
  For each object you can see how much memory it retains, and what happens when
  particular reference in object graph does not exist.
  This saves time, and lets you estimate the expected memory leak fix without changing the code.

• Memory profiling:

• 40+ comprehensive inspections are waiting to make your code faster and more efficient.

• Profiler knows a lot about typical issues in Java applications and automatically finds them.

• Report inefficient collections and I/O operations.

• Find/Resolve thread synchronization issues.
  It is possible to combine thread states with HTTP requests and SQL queries to get
  the full picture how the requests are processed by your applications.

• Exception profiling: Massive exception throwing is a common but often hidden
  performance problem.

• Deobfuscate the code on the fly restoring original class, method and field names of
  applications obfuscated with ProGuard, yGuard, Zelix KlassMaster, Allatori, and other
  popular Java obfuscators.

• control profiling overhead up to production profiling.

• Extensible API to create custom probes.

• Command line support. (UI free).

• free licenses for non-commercial open source projects.
  Special offers for educational and scientific organizations.
[[}]]

• LMAX Disruptor: High Perf Inter-Thread Messaging Library [[{concurrency,01_PM.radar]]
@[https://lmax-exchange.github.io/disruptor/]

See also:
@[https://www.infoq.com/articles/High-Performance-Java-Inter-Thread-Communications/]

@[https://www.infoq.com/news/2013/05/lmax-zing]
LMAX Exchange Getting Up To 50% Improvement in Latency From Azul's Zing JVM
Interesting points about GC tunning.
[[}]]

• Tribe: reliable multicast [[{java_lang.io.multicast,architecture.distributed,scalability.distributed]]
                            [[doc_has.comparative,qa,01_PM.low_code,01_PM.radar]]
REF: @[http://tribe.ow2.org/]
- Unlike JGroups, Tribe only targets reliable multicast
 (no probabilistic delivery) and is optimized for cluster
 communications.

• JGroups multicast
@[http://www.jgroups.org/]
- toolkit for reliable multicast communication.
- point-to-point FIFO communication channels (basically TCP)
- Targets high performance cluster environments.

- Unlike JGroups, Tribe only targets reliable multicast
  (no probabilistic delivery) and is optimized for
  cluster communications.
[[}]]

● OSV.io [[{scalability.unikernel,security,devops,01_PM.backlog]]
- @[http://osv.io/]
  versatile modular unikernel designed to run unmodified Linux
  applications securely on micro-VMs in the cloud. Built from the ground up for
  effortless deployment and management of micro-services and serverless apps,
  with superior performance. (Includes CRaSH shell)
[[}]]

[[java,01_PM.TODO}]]
