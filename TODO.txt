[[{java,01_PM.TODO]]
•  Spring SecurityContext* [[{]]
https://www.javacodegeeks.com/spring-interview-questions-and-answers.html
https://www.javacodegeeks.com/java-interview-questions.html
https://www.javacodegeeks.com/2014/11/multithreading-concurrency-interview-questions-answers.html
https://www.javacodegeeks.com/2013/02/40-java-collections-interview-questions-and-answers.html
https://www.javacodegeeks.com/spring-batch-tutorial.html
https://docs.spring.io/spring-cloud-cli/docs/current/reference/html/  spring.boot,cli:
[[}]]

• Sprint Tools 4 (Integration with Visual Studio Code, Eclipse, Theia IDE)
  https://spring.io/tools/

• [[{]]
  @[https://www.programcreek.com/2013/03/hashmap-vs-treemap-vs-hashtable-vs-linkedhashmap/]
  @[https://www.programcreek.com/2015/12/top-10-java-utility-classes/]      @ma
  @[https://www.programcreek.com/2013/09/top-9-questions-for-java-map/]
  @[https://www.programcreek.com/2013/09/top-10-questions-for-java-collections/]
  @[https://www.programcreek.com/2013/09/top-8-diagrams-for-understanding-java/]
  @[https://www.programcreek.com/2013/09/top-10-faqs-of-java-strings/]
  @[https://www.programcreek.com/2013/09/top-10-methods-for-java-arrays/]
  @[https://www.programcreek.com/2013/09/top-10-websites-for-advanced-level-java-developers/]
  @[https://www.programcreek.com/2013/08/top-books-for-advanced-level-java-developers/]
[[}]]

• Spring Cloud Function promotes the implementation of business [[{]]
  logic via functions based on the standard interfaces introduced by Java   :
  Supplier: A supplier is a function with only output, no input.
            It’s also known as a 'producer', 'publisher' or 'source'.
  Function :A function has both input and output.
            It’s also known as a processor.
  Consumer. A consumer is a function with input but no output.
            It’s also known as a 'subscriber' or 'sink'
[[}]]

• https://hantsy.github.io/spring-r2dbc-sample/auditing.html

• https://blog.frankel.ch/jvm-security/4/ [[{jvm,security}]]

• https://github.com/vert-x3/vertx-4-migration-guide

• SPARTA (anti-malware)
  - Aimed at preventing malware from appearing in an app store.
  - provides an information-flow type-checker customized to Android
    but can also be applied to other domains.
  @[https://checkerframework.org/sparta/]
    The paper "Collaborative verification of information flow for a
    high-assurance app store" appeared in CCS 2014.

• java_lang.101,java_lang.functional:
  Collectors (1.8+)

• Java 9 to 13 in a Nutshell!!!: @ma
  https://bentolor.github.io/java9to13/#/_preview_features_preview_12

• "The Netflix Domain Graph Service framework - OSS GraphQL for Spring Boot by Paul Bakker"
  https://youtu.be/WfK44fDuijI

• Guava Collections [[{data_structures,qa.data]]
- Widely used Google Core Libraries for Java 6+.
  with as advanced collection types
  https://www.baeldung.com/guava-sets?
[[}]]
######################################################
• Is Java 17 a Glass Half Full?
  https://www.infoq.com/news/2021/07/java-17-glass/

  Overall, the features present in Java 17 are broadly following the
  expected pattern, as InfoQ previously reported on. The unfortunate
  truth is that of the major projects that have been the major areas of
  JDK development in the last three years (Loom, Valhalla, Amber and
  Panama) - none are complete as of the release of Java 17.

  This means that the feature set of Java 17 will be more modest than
  many developers hoped.

  For example, The Algebraic Data Types feature (comprising Records and
  Sealed Types) is complete as of 17. This is a major step forward in
  terms of data modeling and enhancing the OO capabilities of the Java
  language. However, the Pattern Matching feature which complements and
  builds upon algebraic data types is only present as a Preview feature
  in Java 17 (and only in a fairly rudimentary form at that).

• Architecture of a Geospatial Application with Java
  https://www.baeldung.com/java-geospatial-applications

• Eclipse Memory Analyzer Open Source Project
  https://www.eclipse.org/mat/
  - fast and feature-rich Java heap analyzer that helps you find
    memory leaks and reduce memory consumption.
  - Use the Memory Analyzer to analyze productive heap dumps with
    hundreds of millions of objects, quickly calculate the retained sizes
    of objects, see who is preventing the Garbage Collector from
    collecting objects, run a report to automatically extract leak
    suspects.

• Java 17, the Next Long-Term Support Release, is Now Available
  https://www.infoq.com/news/2021/09/java17-released/

• JDK Mission Control 8.1.0 Released!
  https://foojay.io/today/jdk-mission-control-8-1-0-released/

• https://github.com/topics/snippets-collection

• Scala 3 Overhauls Language for Better Developer Experience
  https://www.infoq.com/news/2021/06/scala-3-overhaul/

• Microsoft Open-Sources GCToolkit to Tap into JVM GC Logs  [[{]]
  https://www.infoq.com/news/2021/09/msft-opensourced-gctoolkit/

Besides the API, there are two other modules: the parser and the
Vert.x module. The parser module is based on a collection of regular
expressions and code written over many years to be considered the
most robust GC log parser available. The Vert.x-based messaging
backend makes use of two message buses: the first one streams data
from a data source. The current implementation streams log lines from
the GC log file. The consumers of this bus are the parsers that
convert the data from the data source into events that represent
either a GC cycle or safe point. These events are published on the
second message bus: the event bus. Subscribers on the event bus are
then able to be notified and to process events that are of interest
to them.

More importantly, it has long been known that a suboptimal
configuration collector will result in an application requiring more
CPU and memory, while at the same time, degrading the end user’s
experience. In other words, poorly tuned often equates to a more
expensive runtime and unhappy users. The challenge is that to
optimally tune the GC, one needs to create a delicate balance between
several concerns all of which are not easily seen without the
assistance of tooling. GCToolKit has been helpful in making this
easier. [[}]]

• VMware Overhauls Spring 6 & Spring Boot 3 for Another Decade  @ma
  https://www.infoq.com/news/2021/09/spring-6-spring-boot-3-overhaul/

• java.util.concurrent.locks.ReentrantLock vs synchronized { ... } block  [[{concurrency.101]]

 1) Another significant difference between ReentrantLock and the
synchronized keyword is fairness. The synchronized keyword doesn't
support fairness. Any thread can acquire lock once released, no
preference can be specified, on the other hand, you can make
ReentrantLock fair by specifying fairness property while creating an
instance of ReentrantLock. Fairness property provides a lock to the
longest waiting thread, in case of contention.

 2) The second difference between synchronized and Reentrant lock is
tryLock() method. ReentrantLock provides a convenient tryLock()
method, which acquires lock only if its available or not held by any
other thread. This reduces the blocking of thread waiting for lock-in
Java applications.

 3) One more worth noting the difference between ReentrantLock and
synchronized keyword in Java is, the ability to interrupt Thread
while waiting for Lock. In case of a synchronized keyword, a thread
can be blocked waiting for a lock, for an indefinite period of time
and there was no way to control that. ReentrantLock provides a method
called lockInterruptibly(), which can be used to interrupt thread
when it is waiting for lock. Similarly, tryLock() with timeout can be
used to timeout if the lock is not available in certain time period. [[}]]

• Modern functional programming in Java:  ¡¡¡@ma!!!
@[https://dzone.com/articles/introduction-to-pragmatic-functional-java]

• JAVA DONT's:
  https://dzone.com/articles/we-should-write-java-code-differently?edition=598293#

• Complete how to write files in Guava

• aborted compilation of a multi-module (like AbsisParentPom)  [[{maven]]
  can be restarted (from the last failed module) with '--resume-from' option like:
$ $ mvn --resume-from=com.myCompany.myModule:MyArtifact \
$   $ clean install -P myProfile -DskipTests=true            [[}]]


• Java Erasure
  Type Erasure is a technique employed the Java compiler to support the use of Generics.
@[https://developer.ibm.com/recipes/tutorials/java-language-type-erasure/]

• High Perf Persistence
  https://www.reddit.com/r/linux/comments/ajkfs0/github_trimstraythepracticallinuxhardeningguide/

• Kryo serialization lib
- Object graph serialization library:
 @[https://github.com/EsotericSoftware/kryo]
  Kryo is a fast and efficient binary object graph serialization
  framework for Java. The goals of the project are high speed, low
  size, and an easy to use API. The project is useful any time objects
  need to be persisted, whether to a file, database, or over the
  network.

   Kryo can also perform automatic deep and shallow copying/cloning.
  This is direct copying from object to object, not object to bytes to
  object.
[[}]]


• java_lang.101,qa.billion_dolar_mistake:
  Optional (1.8+)

  Optional<Integer> highestNumber
      = itemList.stream()
        .reduce((int1, int2) ->               ← Reduce returns Optional
                (int1 > int2) ? int1 : int2);

  Optional Evolution
  https://dzone.com/articles/java-optional-api-evolution?edition=699391

[[{_PM.TODO]]
● Secomp JVM Integration
@[https://docs.sonarqube.org/latest/requirements/requirements/]
https://en.wikipedia.org/wiki/Seccomp
http://people.apache.org/~rmuir/es-coverage/post-query-refactoring/org.elasticsearch.bootstrap/Seccomp.java.html
seccomp filter  Non-portable linux/amd64 only security protection, preventing non
                authorized calls to kernel.


By default, Elasticsearch uses seccomp filter. On most distribution
this feature is activated in the kernel. If  distributions without
this featur you have to explicitly deactivate this security layer
by updating sonar.search.javaAdditionalOpts in
$SONARQUBEHOME/conf/sonar.properties_:

sonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=false

You can check if seccomp is available on your kernel with:

$ grep SECCOMP /boot/config-$(uname -r)

If your kernel has seccomp, you will see:

CONFIG_HAVE_ARCH_SECCOMP_FILTER=y
CONFIG_SECCOMP_FILTER=y
CONFIG_SECCOMP=y
[[}]]

[[{qa.testing.101,_PM.TODO]]
● Mockito
• Top voted Java testing framework in StackOverflow
• Top 10 most-widely used Java amongt 30.000 inspected projects.
[[}]]

• Clean JSON Notes.
• @[https://www.baeldung.com/java-json-binding-api]

• Compact monitoring notes: jcmd, Visual Recorder,  CRaSH shell
  Eclipse Mem.Analizer

• https://eclipse-ee4j.github.io/jakartaee-tutorial/ @ma
  https://www.uml-diagrams.org/java-ejb-uml-profile-diagram-example.html
  https://www.uml-diagrams.org/java-ejb-state-machine-diagram-example.html

• https://www.uml-diagrms.org/java-7-api-uml-package-diagram-example.html
  https://www.uml-diagrams.org/examples/java-servlet-25-api-package-diagram-example.html
  https://www.uml-diagrams.org/examples/java-servlet-30-api-package-diagram-example.html
  https://www.uml-diagrams.org/java-thread-uml-state-machine-diagram-example.html

• https://www.uml-diagrams.org/tomcat-server-uml-composite-structure-diagram-example.html
  https://www.uml-diagrams.org/web-application-clusters-uml-deployment-diagram-example.html


• https://github.com/google/re2j
  linear time regular expression matching in Java
  If you use regular expression patterns with a high degree of
  alternation, your code may run faster with RE2/J. In the worst case,
  the java.util.regex matcher may run forever, or exceed the available
  stack space and fail; this will never happen with RE2/J.

• weekly Inside Java Newscast:
  https://www.youtube.com/playlist?list=PLX8CzqL3ArzX8ZzPNjBgji7rznFFiOr58

• Who-is-Who:
  https://nipafx.dev/nicolai-parlog/
  Java developer advocate at Oracle

• plans for Java in 2022.
  https://www.youtube.com/watch?v=4Y3LijiBxRA
  focus on the four main Java projects:
  · https://openjdk.java.net/projects/amber
  · https://openjdk.java.net/projects/loom
  · https://openjdk.java.net/projects/panama/
  · https://openjdk.java.net/projects/valhalla
    The goal of Project Valhalla is to explore and incubate advanced
    Java VM and Language feature candidates such as:
    · Value types
    · Generic specialization
    · Enhanced volatiles
    · and possibly othe related topics, such as reified generics

• https://openjdk.java.net/jeps/0


• Testing add notes:    @ma
  • mockito,
    https://github.com/mockito/mockito/wiki/Features-And-Motivations
    "...Mockito has very slim API, almost no time is needed to start mocking.
      There is only one kind of mock, there is only one way of creating
      mocks. Just remember that stubbing goes before execution,
      verifications of interactions go afterwards... "

• Add notes on JUnit parameterized tests.
  https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests

• Apple has open-sourced GCGC, a tool for Java Garbage Collector (GC)
  logs visualization based on Python 3 and pandas.
  https://www.infoq.com/news/2022/01/apple-gcgc-java/
  https://github.com/apple/GCGC

• GCGC uses a Jupyter notebook to analyze and visualize GC log files. A
  notebook is provided for the analysis and it generates plots and
  tables from collected GC information.

• https://theboreddev.com/understanding-java-streams @ma?

• Data Oriented Programming in Java
   https://www.infoq.com/articles/data-oriented-programming-java/

• cache2k - Java Caching –https://cache2k.org/

• Java: Spring Boot 2.7.0 Released With Support for GraphQL, Podman and Cache2k
  https://www.infoq.com/news/2022/06/spring-boot-2-7/
• Java 18
  https://www.infoq.com/news/2022/03/java18-released/
• Failsafe 3.2 Released with New Resilience Policies
  https://www.infoq.com/news/2022/02/failsafe-resilience-3/

• 101: Six Features From Java 12 to 17 to Get Excited About!
  https://www.infoq.com/articles/six-features-jdk12-to-jdk17/

• Java: Spring Boot 2.6 Improves Docker Images and Metrics, Version 2.4 Is EOL
  https://www.infoq.com/news/2021/12/spring-boot-2-6/

• log4j, Log4Shell: A new fix, details of active attacks, and risk mitigation recommendations
https://www.helpnetsecurity.com/2021/12/15/log4shell-mitigation/
• E-book Collection Page | Red Hat DeveloperLot of books about quarkus!!!
  https://developers.redhat.com/e-books
• Introducing the KivaKit Framework
  https://www.infoq.com/articles/introducing-kivakit/
• Extending Swagger and Spring Doc Open API
  https://dzone.com/articles/extending-swagger-and-spring-doc-open-api?edition=699391 

• concurrency, 101? Measuring ForkJoinPool Parallelism
  https://www.javaspecialists.eu/archive/Issue297-Measuring-ForkJoinPool-Parallelism.html

• Why SOLID principles are still the foundation for modern software architecture
https://stackoverflow.blog/2021/11/01/why-solid-principles-are-still-the-foundation-for-modern-software-architecture/ 
  Single responsibility principle Original definition: “There should
never be more than one reason for a class to change.”If you write a
class with many concerns, or “reasons to change”, then you need
to change the same code whenever any of those concerns has to change.
This increases the likelihood that a change to one feature will
accidentally break a different feature.
  Open-closed principleOriginal definition: “Software entities should
be open for extension, but closed for modification.”This is part of
the design of languages like Java—you can create classes and extend
them (by creating a subclass), but you can’t modify the original
class. One reason for making things “open for extension” is to
limit the dependency on the author of the class—if you need a
change to the class, you’d constantly need to ask the original
author to change it for you, or you’d need to dive into it to
change it yourself. What’s more, the class would start to
incorporate many different concerns, which breaks the single
responsibility principle.The reason for closing classes for
modification is that we may not trust any and all downstream
consumers to understand all the “private” code we use to get our
feature working, and we want to protect it from unskilled hands

Liskov substitution principleOriginal definition:
“If S is a subtype of T, then objects of type T may be replaced with
  objects of type S without altering any of the desirable properties of the program.”
- Interface segregation principle Original Definition:
   “Many client-specific interfaces are better than one
  general-purpose interface.”In OO, you can think of this as
  providing a “view” into your class. Rather than giving your full
  implementation to all your clients, you create interfaces on top of
  them with just the methods relevant to that client, and ask your
  clients to use those interfaces. 
- Dependency inversion principle Original definition:
 “Depend upon abstractions, not concretions.”In OO, this means
that clients should depend on interfaces rather than concrete classes
as much as possible. This ensures that code is relying on the
smallest possible surface area—in fact, it doesn’t depend on code
at all, just a contract defining how that code should behave. As with
other principles, this reduces the risk of a breakage in one place
causing breakages elsewhere accidentally.
________________________________
persistence: No More MultipleBagFetchException Thanks to Multiset Nested Collections SQL and jOOQ.
 https://blog.jooq.org/no-more-multiplebagfetchexception-thanks-to-multiset-nested-collections/
______________________________
Troubleshooting Java Applications with Eclipse Jifa
https://www.infoq.com/news/2022/02/eclipse-jifa/ 
The analytic engine currently has two parts: the Heap Dump Analysis
service based on Eclipse Memory Analyzer (MAT) and the GC Log
Analysis service which supports the G1, Parallel GC, Serial GC, CMS
and ZGC garbage collection algorithms. The GC Log Analysis Service
can process logs from Java 8 and 11, while support for Java 17 is
under development

Eclipse Jifa’s heap dump analysis, based on Eclipse MAT, provides
detailed documentation about analyzing heap dumps

Vue 2.0 and Vert.x are used for the frontend and backend,
respectively.

There are several ways to deploy Eclipse Jifa: only one worker, one
master and several workers or the Kubernetes model.
Java: Compressed GraalVM Native Images: the best startup for Java
apps comes in tiny packages
https://medium.com/graalvm/compressed-graalvm-native-images-4d233766a214
_____________________________________
• Azul Launches Java Cloud Compiler
  https://www.infoq.com/news/2022/02/azul-cloud-compiler/ 
  Azul Intelligence Cloud introduces a third option that bridges the
  benefits of JIT (peak performance) with the benefits of AOT (fast
  startup time). As teams often run the same code across many systems,
  the JRE communicates with an organization’s shared JIT server so
  that each JRE does not need to do the same observation and
  optimization cycle. The cloud compiler can then also perform deeper
  analysis, using CPU resources that are isolated from the running
  application. Resulting applications can reach peak performance in the
  network time needed to transfer this information and run with the
  improved code. In tests described at QCon, the time to peak
  performance was faster and throughput was between 25 to 100%
  faster.
https://www.baeldung.com/java-weekly-425
___________________________
• Spring for GraphQL Version 1.0 Released
  https://www.infoq.com/news/2022/06/spring-graphql/ 
  Still in its infancy, Spring for GraphQL will most likely evolve with
  new features and bug fixes, and could become an alternative to the
  popular DGS framework, developed at Netflix in the last three years.

____________________________
• Java, Introduction To Pragmatic Functional Java - DZone Java
https://dzone.com/articles/introduction-to-pragmatic-functional-java?edition=699391

• Java, quarkus + neo4j,...:
https://www.infoq.com/news/2021/10/java-news-roundup-oct04-2021/
______________________________
Security: Detect and block Log4j exploitation attempts with CrowdSec - The open-source & collaborative IPS
https://crowdsec.net/blog/detect-block-log4j-exploitation-attempts/
______________________________
https://github.com/JakeWharton/RxRelay
Subjects and Relays allow to bridge non-Rx APIs into Rx easily, and without
the worry of accidentally triggering a terminal state.
______________________________
JAVA Example Architecute:
In the case of Java, we may add new libraries (with all its transitive dependencies) for eac    h of the “microservicilitities”, such as Resiliency4J for resiliency, Jaeger for tracing, or     Micrometer for monitoring.
______________________________
JAVA JDK version, JVM version, javac -source/-target/-release/ ... related info:
https://stackoverflow.com/questions/43102787/what-is-the-release-flag-in-the-java-9-compiler
[[java,01_PM.TODO}]]
