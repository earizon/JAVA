# Monitorization [[{monitoring]]
#[micrometer_summary]
## Micrometer Metrics [[{monitoring.micrometer,architecture.distributed,monitoring.distributed,PM.low_code,PM.WiP]]
* simple facade to instrumentation clients for
* instrument JVM-based apps without vendor lock-in.
  (Think SLF4J, but for application metrics! supporting AppOptics,
   Atlas, Datadog, Dynatrace, Elastic, Ganglia, Graphite,
   Influx,Instana, JMX (hierarchical mapping), KairosDB, New Relic,
   Prometheus, SignalFx, Stackdriver, StatsD, Wavefront,)
* Recorded metrics are intended to be used to
  observe/alert/react to current/recent operational state.

* out-of-the-box instrumentation provided by Micrometer
  * JVM Metrics on classloaders, memory, garbage collection,
    threads, etc.
  * Spring Boot 2.0.0.M5+: Micrometer used as instrumentation library powering
    the delivery of application metrics from Spring.
  <https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-metrics>
    2 simple steps setup: [low_code]
    * Declare maven dependency.
    * Add config. to application.yml

* <https://micrometer.io/docs/ref/spring/1.5> (legacy support)
drop-down support for Spring Boot 1.5.x.
  * Cache instrumentation for most popular caching frameworks.
  * OkHttpClient Instrumentation

* Guides: [TODO]
  * <https://micrometer.io/docs/guide/consoleReporter>
  * <https://micrometer.io/docs/guide/httpSenderResilience4jRetry>
  * <https://micrometer.io/docs/guide/customMeterRegistry>
[[}]]

[[monitoring}]]


