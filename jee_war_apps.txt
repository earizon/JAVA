
# Jakarta EE Core Profile 11


* <https://jakarta.ee/specifications/coreprofile/11/jakarta-coreprofile-spec-11.0-m4>

* targeted at developers of with focus on:
  * a minimal set of APIs for microservices.
  * enabling implementations that make use of ahead of time compilation build
    to minimize startup time and memory footprint.
  * Based on JDK 17 API

* Required Components:
  * Jakarta Annotations 3.0*
  * Jakarta Contexts and Dependency Injection (CDI) 4.1 (CDI Lite section)*
  * Jakarta Dependency Injection 2.0
  * Jakarta Interceptors 2.2*
  * Jakarta JSON Processing 2.1 + JSON Binding 3.0
  * Jakarta RESTful Web Services 4.0*


* Optional Components
  * Jakarta Expression Language support is not required in Jakarta 
    Contexts and Dependency Injection Lite implementations.
  * The Java SE section of the CDI 4.1 specification is not required 
    for Core Profile.

# JEE WARs


## `WEB-INF/web.xml` [[{]]

```
 $ mvn archetype:generate \
   -DgroupId=com.mycomp.myprj \
   -DartifactId=mylib -Dversion=1-SNAPSHOT 
 output will be similar to:
 mylib/pom.xml
 mylib/src/main/resources/
 mylib/src/main/resources/static     <·· Spring and others will "pick up" all the content and put
                                         it in the base path of the web application.
 mylib/src/main/java/
 mylib/src/webapp/WEB-INF/           <·· Anything inside WEB-INF is not visible to external apps
 mylib/src/webapp/WEB-INF/web.xml ¹ 
 mylib/src/webapp/WEB-INF/index.jsp      <·· Not even index.jsp
 
 
  ¹ mylib/src/webapp/WEB-INF/web.xml    <·· Anything inside WEB-INF is not visible to external apps
  WEB-INF/web.xml
  <web-app>
     <servlet>
       <servlet-name>MyService01</servlet-name>           <·· name for servlet(or JSP)/compiled class
       <servlet-class>
         com.myCompany.myDepartment.myProject.MyService01
       </servlet-class>
       <init-param>                                       <·· config param for this servlet
         <param-name>parametername</param-name>               (vs global contex-param for all servlets)
         <param-value>parametervalue</param-value>            No other servlet can access it.
       </init-param>
       <load-on-startup>1</load-on-startup>               <·· Init on start up. It also indicates in 
                                                              which order if N servlets exists.
                                                              Optional but good practice.
                                                              Lower numbers are loaded first.
                                                              Otherwise it is loaded on demand (on first
                                                              "arriving" request). on-demand  loading 
                                                              is more risky since we will not see configuration
                                                              bugs on startup but just "later on" in a
                                                              random future when the first request comes in.
  
       ...                                                <·· TODO: servlet security roles.
     </servlet>
  
     <servlet-mapping>
       <servlet-name>myservlet2</servlet-name>
       <url-pattern>/v1/service1</url-pattern>            <·· URL path param. WildCards also allowed.
     </servlet-mapping>                                       Ex: <url-pattern>*.doc</url-pattern>
  
     <context-param>                                      <·· Global config param for all servlets 
       <param-name>debug</param-name>                         In code:
       <param-value>true</param-value>                        String debug=request.getSession()
     </context-param>                                                             .getServletContext()
                                                                                  .getInitParameter("debug");
     <context-param>
        <param-name>jdbc_db1</param-name>
       <param-value>jdbc://...</param-value>
     </context-param>
       ...                                                <·· TODO: Filters and fiter configuration
                                                              Authentication, 
                                                              Data compression
                                                              Logging and Auditing
                                                              Image conversion
                                                              Encryption
                                                              Tokenizing 
                                                              Filters triggering resource access events
                                                              ....
  </web-app>
  
       Servlet 1<···> ServletConfig object. 
                      --------------------- 
                      created by the web container for each servlet from web.xml
                      + String getInitParameter(String param_name) // returns param_value 
                      + Enumeration getInitParameterNames()        // returns (all) parameter names list
                      + String getServletName().
                      + ServletContext getServletContext()  <··· Common config to all Servlets
                        └─────┬──────┘
  * The ServletContext defines a set of methods used by a servlet to communicate
    with its servlet container, such as to get the MIME type of a file, to write
    into a log file, to dispatch requests.
    Usually, there is one context is per Web application inside each JVM.
    WARN: The context can NOT be used as a location to share global information.
  * There is also a method to return the name and version of 
    the servlet container on which the servlet is running. We can get the 
    context path of the web application. 
  * We can get a SessionCookieConfig object form a servlet context through 
    which various properties of the session tracking cookies created. 
  * There is a possibility to set the session tracking modes(COOKIE, SSL, URL)
    that are to become effective for this ServletContext.
    You can set several types of them at once.
  * With a ServletContext object, we can write a specified explanatory message
    with or without stack trace for a given Throwable exception to a servlet
    log file, usually an event log.  
  * There is a possibility to manage a servlet filter with the use of
    ServletContext object.  A filter object performs filtering tasks on the 
    request to a resource, on the response from a resource. It can also filter
    both. A resource can be a servlet or static content.
  
  
  class ... extends HttpServlet {
  
    public void doGet(...) throws ...  {
      ServletConfig configuration = getServletConfig();              // <·· config of just this servlet
      ServletContext context = configuration.getServletContext();    // <·· Global config.
      Enumeration<String> paramNames = context.getInitParameterNames();
      while (paramNames.hasMoreElements()) {
        context_param = paramNames.nextElement();
      }
      ...
      context.setAttribute("key1", "value1"); <·· Add    attribute 
      context.removeAttribute("key1");        <·· Remove attribute
    }
  
    public void init(ServletConfig servletConfig) throws ServletException{
      this.testParam = servletConfig.getInitParameter("test");
    }
  }
```
[[}]]


