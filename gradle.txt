●  Apropos:
- Visit next Web site for a great experience:
  https://earizon.github.io/txt_world_domination/viewer.html?payload=../JAVA/gradle.txt

- If you want to contribute to great gistory of this
  document you can take the next flight to:
@[https://www.github.com/earizon/JAVA]
  Your commits and pull-request will be immortalized
  in the Pantheon of the Unicode Gods.
────────────────────────────────────────────────────────────────────────────────

[[{devops.gradle]]

● Gradle Summary [[{devops.gradle.101]]

  • TLDR

                           ● SETUP TASKS
    $ gradle init            <- Initializes a new Gradle build.
    $ gradle wrapper         <- Generates Gradle wrapper files.

                           ● BUILD TASKS
    $ gradle build           <- Compile package
                                -x {{test}} : Exclude test task:
                                --offline   : offline mode (prevent network access/updates)
    $ gradle clean           <- Clear build directory

    $ gradle assembleRelease <- Build Android Package (APK) in release mode

                           ● HELP TASKS
    $ gradle tasks           <- List main tasks
                                $ gradle tasks --all  <- List all tasks
    $ buildEnvironment       <- show all buildscript dependencies declared in root project 'JAVA'.
    $ components             <- show components produced by root project 'JAVA'.
    $ dependencies           <- show all deps. declared in root project 'JAVA'. [{troubleshooting}]]
    $ dependencyInsight      <- show insight into a specific dep. in root project 'JAVA'.
    $ dependentComponents    <- show dependent components of components in root project 'JAVA'. [incubating]
    $ help                   <- show a help message.
                                $ gradle help --task $task for detailed info
    $ model                  <- show configuration model of root project 'JAVA'. [incubating]
    $ projects               <- show sub-projects of root project     'JAVA'.
    $ properties             <- show properties of root project       'JAVA'.
    $ tasks                  <- show tasks runnable from root project 'JAVA'.


● GRADLE CORE MODEL  [[{gradle.101.core_model]]                    [[{02_doc_has.diagram.UML.ER]]
                                                      ┌>1┃Plugin┃ packaging way to distribute
                                                      v           standard,community&custom tasks.
                                                      1
   ┃settings.gradle┃    ┌>1 ┃ProjectDescriptor┃  ┌>0+┃Task┃(Task==Unit of work!)
                1       v    └───┬──────1────┘   v ┌───┴────────────────────────┐
                ^       1        ·      ^        1  Inputs  : Optional (values,files/dirs)
                └>1+┃Project┃    ·      └>0+┃Build┃ Actions : Optional (compile, cp, ... )
  ┌──────────────────────┴─────┐ ·             ^    Outputs : Optional (files/dirs)
  + root-project always present  ·             ·    *action customization:
  + Projects form a (tree)       ·             ·     Task.doLast  {}
    hierarchy of build deps.     ·             ·     Task.doFirst {}
                                 ·             ·     eg: standard-lifecycle-task don't even have any actions.
                                 ·             ·         It simply aggregate multiple tasks together.
                                 · ┌───────────┴───────────────────────┐
                                 ·  build configures+wires tasks and,
                                 ·  based on their dependencies, builds
                                 ·  directed acyclic graphs (DAGs).
                                 ·  - DAGs are use to determine tasks to
                                 ·    run and run-order.
                                 ·  - the task graph can be defined:
                                 ·    · plugins
                                 ·    · custom build scripts
 ┌|ProjectDescriptor|────────────┴───────────────┐
 │                                               │ ┌ GRADLE FIXED BUILD PHASES ────────────────────────┐
 ├─ READONLY PROPS                               │ │ · INITIALIZATION: setup projects included in build│
 │ · grandle       instance reference            │ │ · CONFIGURATION : Configures DAG (on every build) │
 │ · PluginManager instance reference            │ │ · EXECUTION     : Runs tasks                      │
 │ · Settings      instance injected from:       │ └───────────────────────────────────────────────────┘
 │                 1) ${PROJCT}/gradle.properties│  WARN: [[{02_doc_has.comparative]]
 │                 2) ~/.gradle/gradle.properties│  Gradle’s build phases != Maven’s phases [[}]]
 │                                               │
 ├─ READ/WRITE PROPS  ────────────────────────   │
 │ · startParameter: StartParameter (param.set used to invoke this gradle instance)
 │ · buildCache    : BuildCacheConfiguration     │
 │ · extensions    : ExtensionContainer          │
 │ · plugins       : PluginContainer (applied to this object)
 │                    not deprecated but prefer equivalent methods
 │                    in ProjectDescriptor | PluginAware.getPluginManager()
 │ · rootProject   : ProjectDescriptor (of build)│
 │ · rootDir       : File (of project)           │
 │ · settingsDir   : File (of build)             │
 │                                               │
 ├─ Methods: ────────────────────────            │
 │                                               │
 │  Method	               Description           │
 │  ------------------    -----------            │
 │  apply(closure)        Applies 0+ plugins|scripts
 │  apply(options)        Applies plugin|script using options (injected as map)
 │  apply(action)         Applies 0+ plugins|scripts
 │  buildCache(action)    Configures build cache │
 │  findProject(prjDir)   Returns project with given 'prjDir'
 │  findProject(path)     Returns project with given 'path'
 │  include(projectPaths) Adds projects to build (Build Project Dependency Tree)
 │  includeBuild(rootPrj) Includes build at path │
 │  includeBuild(rootPrj, configuration)         │
 │  includeFlat(prjNames) Adds project list to build
 │  project(projectDir)   Returns project with given prj.dir.
 │  project(path)         Returns the project with given path.
 │                                               │
 │ (REF: https://docs.gradle.org/5.6/dsl/org.gradle.api.initialization.Settings.html)
 └───────────────────────────────────────────────┘              [[02_doc_has.diagram.UML.ER}]]

● GRADLE CORE MODEL CUSTOMIZATION:
  - Custom properties can be added to projects and tasks.

  - Custom models to represent  concepts (other than tasks, files and dependencies)
    can be created adding the concept of "source-sets" to a build.
    [[{KEYPOINT]]: Appropriate modeling of a build process can greatly improve
    a build's ease of use and its efficiency. [[}]]

    Logic must be delegated to plugins and custom models  [[{qa.BEST_PATTERN]]
    (vs build scripts)                                    [[}]]

• Project Coordinates: Help to univocally identify a project and its versions.
  'group   :module     :version' <- gradle terminology [[{02_doc_has.comparative]]
  'groupId :artifactId :version' <- maven  terminology [[}]]

  [[gradle.101.core_model}]]


REF: @[https://docs.gradle.org/current/userguide/gradle_wrapper.html]

  $ gradle init \                       <···· STEP 1) SET UP A NEW GRADLE PROJECT
    --type java-application                <· Java|Scala|Kotlin|C++|Android|Swift apps|libs

  ^                       ^
  └┬──────────────────────┘
  Next layout will added to FS:         [[{02_doc_has.diagram]]
  │                                            NOTE/WARN: gradle.propeties NOT created by init
  ├ build.gradle ·························································
  │ · plugins {
  │ ·     id 'java'        // <- Apply java plugin: build Java    support
  │ ·     id 'application' // <- Apply app. plugin: build cli app support
  │ · }
  │ ·
  │ · repositories {
  │ ·     jcenter()        // Use jcenter (Maven/Ivy/file repos
  │ · }                                    can be declared)
  │ ·
  │ · application {                                         (most dependencies fall in this category).
  │ ·     mainClassName = 'tmp.App'        runtimeOnly    : (supersedes runtime), used only at runtime (vs compilation)
  │ · }                                                     (e.g.: JDBC drivers needed only at runtime)
  │ ·
  │ · dependencies {
  │ ·     implementation     'com.google.guava:guava:28.0-jre'
  │ ·     testImplementation 'junit:junit:4.12'
  │ ·     └─···············┘
  │ · }
  │ ·
  │ └·····································································
  │
  │       configuration :-
  │       compileOnly    : dep. used only at compile (eg. transpiler), (-vs runtime).
  │       implementation : (supersedes compile), dep. used for compilation and runtime
  │                        (most dependencies fall in this category).
  │       runtimeOnly    : (supersedes runtime), used only at runtime (vs compilation)
  │                        (e.g.: JDBC drivers needed only at runtime)
  │       api and compileOnlyApi : dependencies required for compiling both
  │                        the module and transitive module dependencies
  │       (plus testCompileOnly, testImplementation, testRuntimeOnly)
  │                          ·  historically the (now deprecated) 'compile'
  │                             configuration was required to both
  │                             compile and run a project’s
  │                             production code.  It doesn’t
  │                             distinguish between dependencies that
  │                             impact the public API of a Java library
  │
  ├  settings.gradle|1 <···> 1+|Project|1 <··> 1|ProjectDescriptor
  │    rootProject.name = 'demo'
  │    include('app')
  │
  │
  │                            REF: https://docs.gradle.org/5.6/dsl/org.gradle.api.initialization.Settings.html
  │
  ├─ gradle                             <····  generated dir. TO BE ADDED TO GIT
  │  └ wrapper
  │    ├── gradle-wrapper.jar           <···· code for downloading a given gradle version
  │    └── gradle-wrapper.properties
  ├ gradlew      <┬·························· [[{KEYPOINT]]  once in place, replace  OS
  ├ gradlew.bat  <┘                           system-wide gradle (with random version) with
  ├                                           $ ./gradlew build  (gradlew.bat in Windows)
  └ src                                       - This ensures reproducible builds using a
    ├ main/java/project01/App.java              well defined version of gradle. [[}]]
    │ └ resources
    └ test/java/project01/AppTest.java
      └ resources
                                        [[02_doc_has.diagram}]]

  $ gradle wrapper             \        <···· STEP 2) SETUP GRADLE VERSION (Repeat to update Version)
      --gradle-version 5.1     \              <· optional (def.: local installed one)
      --distribution-type bin  \              <· optional (def.: 'bin' -no sample code,docs,...-)
      --gradle-distribution-url ...           <· optional. Ej https://services.gradle.org/distributions/gradle-5.5.1-bin.zip
      --gradle-distribution-sha256-sum        <· optional. Check SHA-256 sum
    └──────────────┬─────────────────┘
    ./gradle/wrapper/gradle-wrapper.properties  is updated with the information
    about the Gradle distribution:

  $ git add \                           <···· STEP 3) Commit gradle artifacts to git.
    build.gradle gradle* settings.gradle &&
    git commit -m "Adding graddle support"
                                              STEP 4) Test setup:
  $ ./gradlew run                       <···· Test running App::main @App.java
  $ ./gradlew build                     <···· Test build (bundling jar)
  $ ./gradlew build --scan              <···· Publish a build-scan
  ...
  Publishing build scan...
  https://gradle.com/s/5u4w3gxeurtd2    <···· Browse link to explore tasks executed, dependencies
                                              downloaded,...

Click the link and explore which tasks where executed, which dependencies where downloaded and many more details!

Further reading                                                                     [[{01_PM.TODO]]
https://docs.gradle.org/current/userguide/building_java_projects.html
https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
https://docs.gradle.org/current/userguide/dynamic_versions.html#sub:declaring_dependency_with_changing_version
https://docs.gradle.org/current/userguide/dynamic_versions.html#sub:declaring_dependency_with_dynamic_version
https://docs.gradle.org/current/userguide/declaring_dependencies.html#sub:project_dependencies
https://docs.gradle.org/current/userguide/dependency_constraints.html#dependency-constraints
https://docs.gradle.org/current/userguide/composite_builds.html#composite_builds
https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:maven_local [[}]]

[[devops.gradle.101}]]

● Example Multi-module Deployer: [[{gradle.multimodule,02_doc_has.code_snippet]]
@[https://github.com/FlamingTuri/multi-module-deployer]
  - library built to speed up deployment of microservice based applications.
  - build and run each application module.
  - configure deployment dependencies between modules
    by just creating and running a simple application.

  INSTALLATION)
    1) Add to your build.gradle the following function:
       def downloadLibFromUrl(String libSaveDir, String libName, String libUrl) {
           def folder = new File(libSaveDir)
           if (!folder.exists()) { folder.mkdirs() }
           def file = new File("$libSaveDir/$libName")
           if (!file.exists()) { ant.get(src: libUrl, dest: file) }
           getDependencies().add('compile', fileTree(dir: libSaveDir, include: libName))
       }

    2) Add the following code to your dependencies declaration:
       dependencies {
           /* ... */
           def libSaveDir = "${System.properties['user.home']}/.gradle/caches/modules-2/files-2.1"
           def version = '1.1.1'
           def libName = "multi-module-deployer-${version}.jar"
           def url = "https://github.com/FlamingTuri/multi-module-deployer/releases/download/v$version/$libName"
           downloadLibFromUrl(libSaveDir, libName, url)
       }

  USAGE EXAMPLE)

  import multi.module.deployer.MultiModuleDeployer;
  import multi.module.deployer.moduleconfig.ModuleConfig;
  import multi.module.deployer.moduleconfig.ModuleConfigFactory;

  public class App {
    public static void main(String[] args) {
        final MultiModuleDeployer multiModuleDeployer = new MultiModuleDeployer();
        String linCmd, winCmd;
        // ─ Add 1st config to deployment list ──────────
        linCmd = "linux   commands to deploy first module";
        winCmd = "windows commands to deploy first module";
        final ModuleConfig firstModuleConfig =
           ModuleConfigFactory.httpModuleConfig(
              linCmd, winCmd, 8080, "localhost", "/api/...");
        multiModuleDeployer.add(firstModuleConfig);

        // ─ Add 2nd config to deployment list ──────────
        // (started ONLY AFTER first one "finishes")
        linCmd = "linux   commands to deploy second module";
        winCmd = "windows commands to deploy second module";
        final ModuleConfig secondModuleConfig =
           ModuleConfigFactory.httpModuleConfig(
              linCmd, winCmd, 3000, "localhost", "/api/...");

        multiModuleDeployer.add(secondModuleConfig);

        // ──────────────────────────────────────────────
        multiModuleDeployer.deploy(); // deploys the modules
    }
  }
[[gradle.multimodule}]]

• What's New [[{01_PM.WHATS_NEW]]
- Gradle v6:
@[https://www.infoq.com/news/2020/01/gradle-releases-version-6/]
[[}]]

● Building Java & JVM projects [[{gradle.java_projects]]

  JAVA LIBRARY PLUGIN:

  build.gradle      (simplest build applying Java Lib Plugin)

  plugins {
      id 'java-library'
  }

  java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
  }

  tasks.register('uberJar', Jar) {      <···· Create FAT / Uber jar.
    archiveClassifier = 'uber'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
      configurations.runtimeClasspath.findAll {
        it.name.endsWith('jar') }.collect { zipTree(it) }
    }
  }

  jar {                      <····· customize MANIFEST.MF in jar/war/ear
    manifest {
       attributes(
         "Implementation-Title": "Gradle",
         "Implementation-Version": archiveVersion)
    }
  }

  version = '1.2.1'

  TASK PROVIDED:
  TASK           | INPUT                 | ACTION                      | OUTPUT
  ---------------+-----------------------+-----------------------------+-----------
  compileJava    | src/main/java         |                             | build/???
  *1             | compilation Classpath |                             |
                 | ^^^^^^^^^^^^^^^^^^^^^ |                             |
                 | + sourceSetCompileOnly   (configuration)            |
                 | + sourceSetImplementation(configuration)            |
  ---------------+-----------------------+-----------------------------+-----------
  compileTestJava| src/test/java         |                             | build/???
  JUnit 3/4/5    | source set actually   |                             |
  ---------------+-----------------------+-----------------------------+-----------
  test           |                       | runs test in src/test/java  |
  ---------------+-----------------------+-----------------------------+-----------
  jar            | compiled classes      | package into                |
                 | src/main/resources    | <project>-<version>.jar     |
                 | source set actually   |                             |
  ---------------+-----------------------+-----------------------------+-----------
  javadoc        | src/main/java         |                             | Javadoc
  ---------------+-----------------------+-----------------------------+-----------

  The Java Library Plugin also integrates the above tasks into the
  standard Base Plugin lifecycle tasks:
  - jar is attached to assemble [1]
  - test is attached to check

  SOURCE SETS tie toghether:
  - source file type/roles (app code, unit test, ...) with location in FS.
  - compilation classpath, including any required dependencies
    (via Gradle configurations)
  - where the compiled class files are placed

  *1: Java Library Plugin creates a compilation task for every source set defined.

   - Most language plugins, Java included, automatically create a source
     set called main, which is used for the project's production code.


• Customizing default source-sets (Not recomended except for compatibility
  with old projects). At build.gradle added something like:
  sourceSets {
      main { java { srcDirs = ['src'] } } <··· Alt 1: Complete override defaults
      main { java { srcDir 'src'      } } <··· Alt 2: Add to defaults.
      test { java { srcDirs = ['test'] } }     common convention in Gradle:
  }                                            - setting a property   replaces values.
                                               - corresponding method appends values.

• Changing compiler options
compileJava {
    options.incremental = true   <··· incremental compilation
    options.fork = true          <··· use new JVM process for compiler
    options.release = 7          <··· Defaults to that of that of JVM of Gradle.
    ...                          <··· compiler verbosity, enable/disable debug output in byte code,
}                                     location for annotation processors used by compiler ...
                                      compiler can find .

• when should you define a custom source set?
  - source need to be compiled with a unique classpath
  - Generate classes handled differently from the main/test ones
  - Form a natural part of the project

• Java properties files and reproducible builds
  WriteProperties TASK:
  - fixes well-known problem:
    - Properties.store() -standard Java API-
      produces a unique file every time breaking usefulness
      of incremental builds.
  - WriteProperties fix the problem.

• Reusing shared Manifests:
  (merging manifests into a single new one is also possible)
  ext.sharedManifest = manifest {              <···· Create standalone (shared) Manifest
      attributes("Implementation-Title": "Gradle",
                 "Implementation-Version": version)
  }
  tasks.register('fooJar', Jar) {
      manifest = project.manifest {
          from sharedManifest                 <······ Reuse in jar build
      }
  }


• ex: use Asciidoc  in Javadoc comments.   [[{qa.documentation.asciidoc]]
  NOTE: This configuration is optional (but elegant)
  · configurations { asciidoclet }
  · dependencies {
  ·     asciidoclet 'org.asciidoctor:asciidoclet:1.+'
  · }
  ·
  · tasks.register('configureJavadoc') {
  ·   doLast {                          <········· Customize Task.Action with doLast
  ·     javadoc {
  ·       options.doclet = 'org.asciidoctor.Asciidoclet'
  ·       options.docletpath = configurations.asciidoclet.files.toList()
  ·     }
  ·   }
  · }
  ·
  · javadoc {
  ·   dependsOn configureJavadoc
  · }

  [[}]]

• The Java Library Plugin (on top of Java Plugin) allows gradle to
distinguish between two different types of dependencies: those
requiring the library at compile and those that are also required to
compile the consumer and have task to create the POM file.


• War Plugin (on top of Java Plugin) adds an extra packaging step to:
  - Copies static resources from src/main/webapp into root of WAR
  - Copies the compiled production classes into a WEB-INF/classes
  - Copies lib.dependencies into WEB-INF/lib subdirectory

[[gradle.java_projects}]]

● TODO/Non-classified [[{01_PM.TODO]]
• CUSTOMIZING THE WRAPPER
  The built-in wrapper task exposes numerous options to customize the runtime behavior.
  -   build.gradle.kts:
      build.tasks.wrapper {
        distributionType = Wrapper.DistributionType.ALL
      }

  - HTTP Basic Authentication (  WARN : use only with TLS connections)
    alt 1: ENV.VARS:
    systemProp.gradle.wrapperUser=username
    systemProp.gradle.wrapperPassword=password
    alt 2: gradle/wrapper/gradle-wrapper.properties
    distributionUrl=https://username:password@somehost/path/to/gradle-distribution.zip

  -  Verifying download
    @gradle/wrapper/gradle-wrapper.properties:
    distributionSha256Sum=371cb9fbebbe9880d147f59bab36d61eee122854ef8c9ee1ecf12b82368bcf10

• https://scans.gradle.com/ [[{troubleshooting]]
   Build Scan™: shareable record of a build providing insights into
   what happened and why. You can create a Build Scan at
   scans.gradle.com for the Gradle and Maven build tools for free.
    Publishing a Build Scan to scans.gradle.com transmits information
   about your Gradle and Maven builds and their environment to Gradle's
   servers. The information is only accessible via a randomly generated
   link, printed at the end of the build. You can delete the
   Build Scan when you are finished. [[}]]

• Groovy DSL:
• Kotlin DSL:

• https://docs.gradle.org/current/userguide/core_dependency_management.html#dependency_management_in_gradle
[[01_PM.TODO}]]

• https://docs.gradle.org/current/userguide/java_testing.html#java_testing

[[devops.gradle}]]
