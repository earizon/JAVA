●  Apropos:
- Visit next Web site for a great experience:
  https://earizon.github.io/txt_world_domination/viewer.html?payload=../JAVA/vertx.txt

- If you want to contribute to great gistory of this
  document you can take the next flight to:
@[https://www.github.com/earizon/JAVA]
  Your commits and pull-request will be immortalized
  in the Pantheon of the Unicode Gods.
────────────────────────────────────────────────────────────────────────────────


[[{vertx]]
• VertX: Who-is-Who
  (Forcibly incomplete but still quite pertinent list of core developers and companies)
  Tim Fox     :  Initiated VertX in 2012
  Julien Viet :  Project lead (as of 2020), RedHat, Marseille
               @[https://github.com/vietj]
               @[http://blog.julienviet.com/]
                 He is also core developer of Crash @[http://www.crashub.org/]

  Julien Ponge:@[https://julien.ponge.org/]
                 Author of VertX in Action
  Many others :@[https://github.com/eclipse-vertx/vert.x/graphs/contributors]
[[}]]

● Vert.X Summary [[{vertx.101,async/reactive.*,doc_has.diagram]]
REF:
- Vert.X guide for java devs @[https://github.com/vert-x3/vertx-guide-for-java-devs]
- VertX maven starter        @[https://github.com/vert-x3/vertx-maven-starter]
- Examples for amqp-bridge,  @[https://github.com/vert-x3/vertx-examples]
  grpc, core, docker,
  gradle/maven , ignite, jca,
  jdbc.  kafka, kotlin, mail,
  metrics, mqtt, openshift3,
  reactjs-server-side-rendering,
   redis, resteasy, rx,
  service-discovery,
  service-proxy, shell, spring,
  sync, unit, web/web-client ...
- Web server examples        @[https://github.com/vert-x3/vertx-examples/tree/master/web-examples/src/main/java/io/vertx/example/web]
  angular, auth, authjdbc,
  authorisation,
  blockinghandler, chat,
  cookie, cors,
  custom_authorisation, form,
  helloworld, http2, , jwt,
  mongo, react, realtime, rest,
  sessions, staticsite,
  templating, upload, vertxbus
- Web/ JDBC server examples @[https://github.com/vert-x3/vertx-examples/blob/master/web-examples/src/main/java/io/vertx/example/web/jdbc/Server.java]

● verticle
REF: @[https://github.com/vert-x3/vertx-guide-for-java-devs/blob/3.8/intro/README.adoc]
- reusable unit  of   deployment
                      ^^^^^^^^^^
                  - Can be passed some   configuration  like
                    credentials, network address,...
                  - can be deployed several times
                  - A verticle can deploy other verticles.

  |verticle| 1 ←─→ 1|event─loop|1 ←──────→   1|Thread|
  └────┬───┘        └────┬─────┘              └──┬───┘
       ^            "input" event like        Must not handle I/O thread-blocking
       │            network buffers,          or CPU intensive operations
                    timing events,            'executeBlocking' can be used
       │            verticles messages, ...   to offload the blocking I/O operations
<<io.vertx.core.                              from the event loop to a worker thread
  AbstractVerticle>> Base Class
  ════════════════ @[https://vertx.io/docs/apidocs/io/vertx/core/AbstractVerticle.html]
-  .start()  ← life-cycle sync/async method to be overrided
-  .stop ()  ← life-cycle sync/async method to be overrided
-  .vertx    ← - Points to the   Vert.x environment where the verticle is deployed
             · - provides methods to create HTTP/TCP/UDP/... servers/clients. Ex:
             ·   · io.vertx.core.http.HttpServer server  = thisO .vertx .createHttpServer();
             · - provides access to the event bus.
             ·   Ex:
             ·     SENDING VERTICLE                         │ RECEIVING VERTICLE
             ·   ┌──────────────────────────────────────────┼────────────────────────────────────────
             ·   │ ...                                      │ ...
             ·   │  vertx .eventBus()                       │ public void onMessage(
             ·   │   .request(wikiDbQueue,                  │          Message<JsonObject> message)
             ·   │       jsonObject, options ,              │ {
             ·   │       └────┬───┘  └──┬──┘                │   String action = message.
             ·   │            ·      headers                │                headers().get("action");
             ·   │            ·    + payload codecs         │
             ·   │            ·    + tiemouts               │   switch (action) {
             ·   │            ·      └──┬──┘                │     case "action1":
             ·   │// Ussually jsonObject contains the data  │       ...
             ·   │// and an "action" header the action to   │       message.reply(
             ·   │// be executed by the receiving verticle  │           new JsonObject()
             ·   │       reply -> {                         │           .put("key1", value1));
             ·   │     if (reply.succeeded()) {             │       break;
             ·   │       ...                                │     case ...:
             ·   │     } else {                             │       ...
             ·   │       ...                                │     default:
             ·   │     }                                    │       message.fail(
             ·   │   });                                    │         ErrorCodes.BAD_ACTION.ordinal(),
             ·   │                                          │         "Bad action: " + action);
             ·   │                                          │   }
             ·   │                                          │ }

-  .config() ← - accessors to some deployment configuration to allow passing   external configuration
                 Ex:
                 │ public static final String CONFIG_WIKIDB_QUEUE = "wikidb.queue";
                 │ ...
                 │ wikiDbQueue =  config() .getString(CONFIG_WIKIDB_QUEUE, "wikidb.queue");
                 │                             ^^^^^^                      ^^^^^^^^^^^^^^
                                       or Integers, booleans               Default param
                                       complex JSON data, ...              if first is null

import io.vertx.core.AbstractVerticle;
public class MainVerticle extends AbstractVerticle {

  @Override
  public void start(Future<Void> startFuture) {
                    ^^^^^^^^^^^^^^^^^^^^^^^^
                    No params for the sync version
    startFuture.complete();
  }
}

● VertX Event Bus [[{vertx.event_bus]]
- main tool for communication between verticles using  messages
  and one of:
  - point-to-point messaging
  - request-response messaging
  - publish / subscribe for broadcasting messages

  |verticle 01|                                    |verticle 02|
  (HTTP server)             event─bus              (DDBB client)
   │                          ║ ║                        │
   ├─── user 1234 ? ─────────→║ ║                        │
   │                          ║ ║─────── user 1234 ? ──→ │
   │                          ║ ║                        ├── ....─→
   │                          ║ ║                        │←─ ....
   │                          ║ ║←────── user 1234 ? ────┤
   │←── user 1234   ──────────║ ║                        │
        ^^^^^^^^^             ║ ║
  Message are free-form
  strings. (JSON recomended    ^
  for multi─language support   │
                               │

                  - It can be accessed through (simple)
                    TCP protocol for 3rd party apps
                    or exposed over general-purpose
                    messaging bridges (AMQP, Stomp,...)
                  - Support cluster support sending
                    messages to verticles deployed⅋running
                    in different application nodes
                  - a   SockJS  bridge allows web applications
                    to seamlessly communicate over the event bus
                    from JavaScript running in the browser by
                    receiving and publishing messages just like
                    any verticle would do.
[[vertx.event_bus}]]

• VertX Event-Loop to threading configuration:  [[{vertx.101]]

By default Vert.x attaches CPU-core-thread 1<-->2 event loops
VertX Threading Strategies:
   Incoming network data -> accepting thread"N":
   accepting thread "N" -> event-loop thread: +event with data

When a verticle opens a network server and is deployed more than once,
then the events are being distributed to the verticle instances in a
round-robin fashion which is very useful for maximizing CPU usage with
lots of concurrent networked requests.
[[}]]

• HTTPS AAA:
@[https://github.com/vert-x3/vertx-guide-for-java-devs/blob/3.8/step-7/README.adoc]

• VertX 4.0 What's New
[[}]]


● Testing [[{vertx.testing,qa.testing]]
@[https://github.com/vert-x3/vertx-guide-for-java-devs/blob/3.8/step-4/README.adoc]
@[https://github.com/vert-x3/vertx-guide-for-java-devs/blob/3.8/step-4/src/test/java/io/vertx/guides/wiki/http/SampleHttpServerTest.java]

└ Ex.1:
  @RunWith(VertxUnitRunner.class)  ← annotation to JUnit tests to allow vertx-unit features
  public class SampleHttpServerTest {

    private   Vertx vertx ;

    @Before public void prepare() {   vertx = Vertx.vertx(); }

    @After public void finish(TestContext   context ) {
      vertx.close(  context .asyncAssertSuccess());
    }

    @Test
    public void start_http_server
           (TestContext   context ) {
                          ^^^^^^^
                // provided by the runner
                // provides access to basic assertions,
                // a context to store data,
                // and several async-oriented helpers

      Async   async  =   context .async();

      vertx
        .createHttpServer().requestHandler(
           req -> req.response().putHeader("Content-Type", "text/plain").end("Ok")
        )
        .listen(
          8080,
          context .asyncAssertSuccess(
          server -> {
            WebClient webClient = WebClient.create(vertx);
            webClient.get(8080, "localhost", "/").send(ar -> {
              if (ar.succeeded()) {
                HttpResponse<Buffer> response = ar.result();
                context .assertTrue(response.headers().contains("Content-Type"));
                context .assertEquals("text/plain", response.getHeader("Content-Type"));
                context .assertEquals("Ok", response.body().toString());
                async .complete();
              } else {
                async .resolve(Promise.failedPromise(ar.cause()));
              }
            });
          }));
    }
  }

└ Ex.2: check/test that a timer task has been called once,
        and that a periodic task has been called 3 times.
      @[https://github.com/vert-x3/vertx-guide-for-java-devs/blob/3.8/step-4/src/test/java/io/vertx/guides/wiki/database/WikiDatabaseVerticleTest.java]

  RunWith(VertxUnitRunner.class)
  public class WikiDatabaseVerticleTest {
    private Vertx vertx;
    @Before public void prepare(TestContext context) { vertx = ...       }
    @After  public void finish(TestContext context)  { vertx.close(...); }

    @Test /*(  timeout=5000 )*/
    public void async_behavior(TestContext context) { // 1
      Vertx vertx = Vertx.vertx();
      Async a1 = context.async();
      Async a2 = context.async(3); // ← works as a countdown that
                                        completes successfully after 3 calls.
      vertx.setTimer(100, n -> a1.complete());
      vertx.setPeriodic(100, n -> a2.countDown());
    }

    @Test
    public void crud_operations(TestContext context) {
      Async async = context.async();

      service.createPage(..., ...,
        context.asyncAssertSuccess(v1 -> {
          service.fetchPage(...,
            context.asyncAssertSuccess(json1 -> {
              context.assertTrue(json1.getBoolean("found"));
              context.assert...;
              ...
              async.complete();  // 1
            }));
        }));
      async.awaitSuccess(  5000 );
    }
  }
[[vertx.testing}]]

[[vertx}]]
