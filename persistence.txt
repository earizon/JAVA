# JAVA SQL persistence 

## Flyway: SQL schema versioning [[{persistence.sql,qa.data,PM.low_code,spring.*,persistence.jpa,PM.TODO]]
* tool providing version control for database (SQL) schemas
  and automated schema (tables, columns, sequences), data, views, procedures
  and packages evolution.
* Single source of truth for DDBB versioning.
* highly reliable
* Supports for many different SQL databases, including        [cloud]
  cloud ones (Amazon RDS, Azure Database, Google Cloud SQL).

### Flyway HowTO:
* PRESETUP: The target database to manage and user with update privileges be created first,
            "outside" of flyway.

* Database changee are called   Migrations . They can be:
  · Versioned  migrations: identified by a version number, applied in order exactly once.
                           An optional revert migration version can be provided to roolback
                           changes in case of error.
  · Repeatable migrations:

* Flyway used an internal flyway_schema_history ddbb to keep track of migrations applied .

* SQL and JAVA  migrations in src/main/resources/db/migration/ are automatically      [spring]
  applied in Spring Boot when  'org.flywaydb:flyway-core' compile dependency is
  detected.
  ```
  | src/main/resources/db/migration/
  | └ V1__Initial_schema.sql   ← Flyway expected file name
  |                              "Verssion"__"Prefix".sql
  |   CREATE TABLE table01 (
  |    id      BIGSERIAL PRIMARY KEY NOT NULL,
  |    column1 BIGINT NOT NULL,
  |    column2 FLOAT8 NOT NULL,
  |    column3 INTEGER NOT NULL,
  |    column4 VARCHAR(255) UNIQUE NOT NULL,
  |   );

  | └ V2__Add_column5.sql
  |   ALTER TABLE table01
  |     ADD COLUMN column5 VARCHAR(255);
  ```
* Alternatives to Flyway include LiquidBase, Obevo, ... [TODO]

## Obevo: DDBB change manager
* <https://github.com/goldmansachs/obevo>
- Obevo: ddbb deployment tool handling enterprise scale schemas and complexity.
- By Goldman Sachs.
- Obevo is a database deployment tool that helps teams manage database
  changes in their Software Development Life Cycle (SDLC) process. In
  addition to handling production deployments, Obevo aids the
  development phase by defining a clean structure to maintain DB object
  code, and helps the testing phase with features such as in-memory
  database conversion. Notably, Obevo was designed for systems of
  enterprise scale and complexity and can manage hundreds of DB objects
  in a schema, while still handling new schemas in a simple manner.
  “We feel our ability to onboard a large and long-lived system to a
  clean SDLC process is a key differentiator in the open source
  space,” said Shant, a vice president in the Technology Division.
  “By publishing this to the open source community, we hope to aid
  others in their own DB deployment estates while growing a strong
  community around the tool.”


> """ Deploying tables for a new application?
>   Or looking to improve the DB Deployment of a years-old system with
>   hundreds (or thousands) of tables, views, stored procedures, and
>   other objects?<br/>
>
>   Obevo has your use case covered.<br/>
>
>   Supported platforms: DB2, H2, HSQLDB, Microsoft SQL Server, MongoDB,
>   Oracle, PostgreSQL, Redshift (from Amazon), Sybase ASE, Sybase IQ
> """

* As a reference Spring Boot includes auto-configuration support for both Flyway and Liquibase.
[[}]]

## QueryDSL Compile safe SQL [[{persistence.sql.querydsl,PM.TODO]]
* <https://www.baeldung.com/intro-to-querydsl>

* Compile safe SQL like domain specific language compatible with JPA.

[[persistence.sql.querydsl}]]

## Jooq: SQL made simple [[{persistence.sql,vertx.*,architecture.async.reactive,PM.low_code,qa.data,PM.TODO]]
* <https://www.jooq.org/>
* WARN: Free for OOSS databases, requires licence for Oracle and maybe others.
* WARN: ¿Deprecated in favor of QueryDSL?

### Vertx+Jooq
<https://github.com/jklingsporn/vertx-jooq>
  jOOQ-CodeGenerator to create vertxified DAOs and POJOs.
  Now with JDBC, async and reactive support!
<https://github.com/jklingsporn/vertx-jooq>

[[}]]

[[{persistence.sql.mybatis]]
## MyBatis 
Summary from <https://www.infoq.com/articles/SQL-relevance-NoSQL/>
*  """ SQL is everywhere in data processing, ... Humble detected an increasing discomfort
   with “classic” ORMs such as Hibernate. These tools have solved two problems:<br/>
   * The repetitiveness of CRUD<br/>
   * Caching and thus speeding up disk access<br/>
   """
* Intelligent caching can be quite hard, even with Hibernate,  ...
* JPA’s caching mechanism is only possible because the ORM strategy has
  been deeply integrated with JPQL. Short of native querying, it is hard
  to bypass the essential mechanisms used for caching.
* Memory is getting cheaper ... What if data is no longer accessed from disk
  (milliseconds), but from memory (nanoseconds) instead?
* Will we still need complicated and complex second level caches, when the
  database already “cached” all relevant data in memory?
* Not only are databases capable of keeping live online transactional
  data in memory all the time, they have already been doing some
  sophisticated caching for quite a while now. Just consider Oracle’s
  cursor cache, query result cache, and scalar subquery cache.
* ...an increasing use of more SQL-centric alternatives such as
  MyBatis or jOOQ (both being “post-JPA” frameworks) indicates a
  certain need to get closer to SQL again.
* ANSI-SQL standard is continually evolving ... things which are
  very hard to get through the JCP and into next generations of JPA.
  ....In all my conference talks about jOOQ, I have been asking the
  audience about their happiness with CriteriaQuery. The answer was
  always unanimously hostile.

### MyBatis "vs" Jooq:
* <https://blog.jooq.org/sql-templating-with-jooq-or-mybatis/>
  * jOOQ is an internal domain-specific language modelling SQL through a Java fluent API.
  * MyBatis is an SQL templating and mapping engine where dynamic SQL
    can be created through an XML-DSL.
* ...  MyBatis’ current success is mostly based on it having provided
  a viable alternative to JPA in a time when JPA was still a
  controversial standard, and when JPA had to prove that it is better
  than JDO, which solves very similar problems.
[[persistence.sql.mybatis}]]

[[{persistence.sql.jpa,PM.TODO]]
## Hibernate/JPA Summary 

* <https://quarkus.io/guides/hibernate-orm-panache-guide>
* Hibernate Gotchas:
  - <https://github.com/theotherian/hibernate-gotchas>.
  - <http://www.theotherian.com/2013/07/hibernate-joins-maxresults.html>.
  hibernate, joins, and max results: a match made in hell.
* Common Hibernate Exceptions Every Developer Must Know:
  - <https://thorben-janssen.com/hibernate-exceptions/>
[[persistence.sql.jpa}]]

[[{persistence.sql.speedment,PM.low_code,qa.data,java_lang.functional]]
## Speedment: SQL as Streams
<https://github.com/speedment/speedment>
- Stream ORM toolkit and runtime.
- The toolkit analyzes the metadata of an existing SQL database and
  automatically creates a Java representation of the data model.
- The powerful ORM enables you to create scalable and efficient Java
  applications using standard Java streams with no need to type SQL or
  use any new API.
  ```
  SQL                                    JAVA 8 Stream Equivalent
 --------------------------------------------------------------------
  FROM                                   stream()
 --------------------------------------------------------------------
  COUNT                                  count()
 --------------------------------------------------------------------
  LIMIT                                  limit()
 --------------------------------------------------------------------
  DISTINCT                               distinct()
 --------------------------------------------------------------------
  SELECT                                 map()
 --------------------------------------------------------------------
  WHERE                                  filter() (before collecting)
 --------------------------------------------------------------------
  HAVING                                 filter() (after  collecting)
 --------------------------------------------------------------------
  JOIN                                   flatMap()
 --------------------------------------------------------------------
  UNION                                  concat(s0, s1).distinct()
 --------------------------------------------------------------------
  ORDER BY                               sorted()
 --------------------------------------------------------------------
  OFFSET                                 skip()
 --------------------------------------------------------------------
  GROUP BY                               collect(groupingBy())
 --------------------------------------------------------------------
       SEARCH FILMS WITH LENGTH > 120 MINUTES:
  SELECT                             ←   final
   `film_id`,`title`,`description`,      Optional<Film>longFilm =
   `release_year`, `language_id`,          films.stream()
   `original_language_id`,                .filter(
   `rental_duration`,`rental_rate`,          Film.LENGTH.greaterThan(120)
   `length`,`replacement_cost`,            )
   `rating`,`special_features`,           .findAny();
   `last_update`
  FROM                                    Searches optimized in background!
       `sakila`.`film
  WHERE
      (`length` > 120)
  ```
[[persistence.sql.speedment}]]

## Other ORM/DSL SQL frameworks

### Excluded ORM Framework Comparative [[{]]

* <https://dzone.com/articles/best-java-orm-frameworks-for-postgresql>
* .... The following frameworks have been excluded from the test due to lack
  of support of one or more of the required features or because of
  other problems. That isn't to say anything negative about
  them—they're certainly promising—but they didn't suit my needs
  for one or more reasons.
* Exposed is the ORM for Kotlin implemented by JetBrains. I've tried
  to use it in Jav,a but it was really hard, almost impossible. For
  Scala developers, this may be a good option.
* Reladomo is an enterprise ORM, but it does not support UDTs or other PostgreSQL advanced features.
* Speedment does not support transactions in its current stable version.
[[}]]

### frameworks no longer developed or maintained: [[{]]
* ActiveJPA seems like it never reached stable release, with the last commits from 2014.
* Apache Torque had its last commit in 2013.
* Carbonado is an inactive project.
* Fjorm's last commit is two years old.
* Hydrate's last version is from 2006.
* IBM PureQuery's last version is from 2009.
* JDO Instruments doesn't even have a working homepage.
* ORMLite's last version is from 2013.
* QuickDB ORM is available only in Google Archive, with its last commit being from 2010.
* Speedo's last commit is from 2005.
* TJDO Project's last commit is from 2008.
[[}]]

### Reladomo ORM (by Goldman Sachs) [[{persistence.sql.ORM,PM.low_code,PM.TODO]]
* <https://github.com/goldmansachs/reladomo>
Enterprise grade ORM framework featuring:
- Strongly typed   compile-time  checked query language
- Bi-temporal chaining
- Transparent multi-schema support
- Full support for unit-testable code
[[}]]

### c3p0 (abandoned) [[{persistence.sql,qa.*,scalability.persistence,PM.TODO]]
Ver HikariCP como alternativa  <https://github.com/brettwooldridge/HikariCP>
<https://www.mchange.com/projects/c3p0/#what_is>
* c3p0: easy-to-use library for making traditional JDBC drivers
        "enterprise-ready" augmenting them with jdbc3 functionality,
        , optional jdbc2 extensions and jdbc4 (v 0.9.5+).
* It provides for:
  - A class which adapt traditional DriverManager-based JDBC drivers to the
    newer javax.sql.DataSource scheme for acquiring database Connections.
  - Transparent pooling of Connection and PreparedStatements behind DataSources
    which can "wrap" around traditional drivers or arbitrary unpooled DataSources.
* The library tries hard to get the details right:
  - The library adopts the approach defined by the JDBC 2 and 3 specification
    (even where these conflict with the library author's preferences). DataSources
    are written in the JavaBean style, offering all the required and most of the
    optional properties (as well as some non-standard ones), and no-arg
    constructors. All JDBC-defined internal interfaces are implemented
    (ConnectionPoolDataSource, PooledConnection, ConnectionEvent-generating
    Connections, etc.) You can mix c3p0 classes with compliant third-party
    implementations (although not all c3p0 features will work with external
    implementations of ConnectionPoolDataSource).
[[}]]

## HikariCP JDBC "zero-overhead" production ready JDBC connection pool [[{]]
https://github.com/brettwooldridge/HikariCP
https://www.baeldung.com/hikaricp

* very light ~ 130KB.
* one order of magniture faster than c3p0 dbcp2 tomcat vibur in connections/sec
  C&P from <https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole>
  """...  In order to make HikariCP as fast as it is, we went down to
    bytecode-level engineering, and beyond. We pulled out every trick we
    know to help the JIT help you. We studied the bytecode output of the
    compiler, and even the assembly output of the JIT to limit key
    routines to less than the JIT inline-threshold. We flattened
    inheritance hierarchies, shadowed member variables, eliminated casts."""
[[}]]


# JAVA Persistence "Others"

[[{scalability.persistence.compression,persistence.fs,PM.TODO]]
## Snappy Fast de/compressor
* <https://github.com/xerial/snappy-java>
Java port of the snappy <http://code.google.com/p/snappy/>
[[scalability.persistence.compression}]]

## JCache [[{scalability.cache,PM.TODO]]
- Map-Like API optimized for caching.
- 1.0 drawbacks:
  - No async operations.
- Implemented by Hazelcast and others
[[}]]
