[[{persistence.sql.jpa,PM.TODO]]
# JPA/Hibernate Persistence Summary  

[[{PM.risk]]
## Must we discard JPA?

cite by Thorben Janssen:

...  Domain Driven Design (DDD) adoption has massively grown.
...  One of the reasons is that the concept of "bounded-contexts" fits 
incredibly well with microservices-design .... You will soon recognize
some of the DDD's design principles ovelaping with JPA:
1. Both use entities, identifiers, and value objects.
1. Do they really mean the same in both contexts?
1. What about DDD's concept of an aggregate? (1+ entities):
  This might sound like you shouldn't use JPA if you want to follow DDD
  design principles. But that's not the case. They actually fit very
  well together if you follow a few simple rules when implementing your
  JPA entity mappings.
[[PM.risk}]]

* Hibernate Gotchas:
  - <https://github.com/theotherian/hibernate-gotchas>.
  - <http://www.theotherian.com/2013/07/hibernate-joins-maxresults.html>.
  hibernate, joins, and max results: a match made in hell.
* Common Hibernate Exceptions Every Developer Must Know:
  - <https://thorben-janssen.com/hibernate-exceptions/>

## JPA tutorial:
  <https://www.javacodegeeks.com/2015/02/jpa-tutorial.html>
* Migrating from JPA 2.x to 3.0:
  <https://thorben-janssen.com/migrating-jpa-2-x-to-3-0/?ck_subscriber_id=935368299>
* <https://quarkus.io/guides/hibernate-orm-panache-guide>

[[{]]
## Quarkus + Panache 
* <https://quarkus.io/guides/hibernate-orm-panache-guide>

  (Similar to Spring Data JPA), Panache for Quarkus handles most of
  the repetitive boilerplate code for you. Hibernate makes complex
  mappings possible, but it does NOT make simple and common mappings
  trivial. Hibernate ORM with Panache for Quarkus focuses on making
  your entities trivial and fun to write in Quarkus.
  Example:
  ```
  | @Entity
  | public class Person extends PanacheEntity {
  |     public String    name;
  |     public LocalDate birth;
  |     public Status    status;
  |
  |     public static Person      findByName(String name) {
  |       return find("name", name).firstResult();
  |     }
  |     public static List<Person> findAlive           () {
  |       return list("status", Status.Alive);
  |     }
  |     public static void       deleteStefs           () {
  |       delete("name", "Stef");
  |     }
  | }
  ```
[[}]]



[[persistence.sql.jpa}]]
